bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
2	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
3	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
4	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
5	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
6	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
7	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[0];	  bitsOut    =(nextByte    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
8	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
9	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
10	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
11	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
12	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  3;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  3;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  3;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
13	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
14	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
15	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
16	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
17	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
18	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (maximumSize  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (maximumSize  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (maximumSize  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
19	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.max(10,  count  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.max(10,  count  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (Math.max(10,  count  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  ')'  expected	66	None	replace
20	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[0];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
21	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[0];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
22	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[1];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
23	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCached,  nextByte);	  int    count    =    readBits(bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
24	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCached);	  int    count    =    readBits(bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
25	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
26	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
27	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  1;	  bitsOut    =(bitsCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
28	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;	  bitsOut    =(bitsCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
29	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	replace
30	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
31	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
32	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
33	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[count];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
34	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
35	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[0];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[0];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
36	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[1];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[1];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
37	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  6)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  6)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  6)&  MASKS[count];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
38	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  1;	  bitsOut    =(byteOrder    >=    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
39	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;	  bitsOut    =(byteOrder    >=    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
40	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  2;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  2;	  bitsOut    =(byteOrder    >=    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
41	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
42	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte  +  1];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
43	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  +  1];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
44	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)&  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
45	[BUG]  [BUGGY]  bitsOut  =(count  <  <  8)&  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  <  <  8)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  <  <  8)&  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
46	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
47	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
48	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  1,  count);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
49	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
50	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  2);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
51	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  count);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
52	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
53	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
54	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
55	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (maximum_CACHE_SIZE  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
56	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
57	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
58	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
59	[BUG]  [BUGGY]  bitsOut  =(count  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
60	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
61	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[0];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
62	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
63	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
64	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
65	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
66	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
67	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  10;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  10;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  10;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
68	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  16;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  16;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
69	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
70	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
71	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  nextByteSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  nextByteSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  nextByteSize  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
72	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
73	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  nextByte  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
74	[BUG]  [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
75	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
76	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
77	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)|  MASKS[count];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte[count];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  nextByte[count];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
80	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
81	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
82	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
83	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  1,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  1,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  1,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
84	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
85	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
86	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
87	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
88	[BUG]  [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte!=  (bitsCachedSize  -  count))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
89	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByteSize  -  count))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByteSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByteSize  -  count))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
90	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
91	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
92	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  1;  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  1;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
94	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCachedSize    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  >  expected	150	None	replace
95	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
96	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	150	None	replace
97	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCachedSize    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	150	None	replace
98	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count  -  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count  -  1]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
99	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte  -  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[nextByte  -  1]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
100	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count  -  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count  -  1]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
101	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count  -  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count  -  1]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
102	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  2]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  2]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  -  2]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
103	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1])+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1])+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  -  1])+  1;	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
104	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
105	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
106	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
107	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  nextByte  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
108	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  count);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
109	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
110	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
111	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  MASKS_SIZE);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
112	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  nextByte);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
113	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  bitsCachedSize);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
114	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
115	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  1);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
116	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCachedSize    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
117	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCachedSize    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
118	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  +  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  +  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  +  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
119	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  count);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
120	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
121	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
122	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
123	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytes,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
124	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached.length,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCached.length,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCached.length,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
125	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count]);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count]);	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  ']'  expected	45	None	replace
126	[BUG]  [BUGGY]  bitsOut  =(nextByte  +  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  +  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  +  MASKS[count]);	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
127	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
128	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[0]);	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
129	[BUG]  [BUGGY]  bitsOut  =(nextByte  -  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  -  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  -  MASKS[count]);	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
130	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count]));	  bitsOut    =(bytesCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	50	None	replace
131	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count]));	  bitsOut    =(bytesCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	50	None	replace
132	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])+  1;	  bitsOut    =(bytesCached    &    MASKS[count]));    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
133	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  1);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])+  1);	  bitsOut    =(bytesCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	50	None	replace
134	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[0]));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[0]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[0]));	  bitsOut    =(bytesCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	50	None	replace
135	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
136	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
137	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
138	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize  +  1);	  int    count    =    readBits(bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
139	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[nextByte]);	  bitsOut    =(bytesCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
140	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[bytesCachedSize]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[bytesCachedSize]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[bytesCachedSize]);	  bitsOut    =(bytesCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
141	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[nextByte]);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[nextByte]);	  bitsOut    =(bytesCached    &    MASKS[nextByte]);    	non-compiled	[CE]  ']'  expected	109	None	replace
142	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  ']'  expected	37	None	replace
143	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  >  expected  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  >  expected	37	None	replace
144	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
145	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
147	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  >  expected	33	None	replace
148	[BUG]  [BUGGY]  bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
149	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  8)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  8)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  8)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
150	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  2)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  2)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  2)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
151	[BUG]  [BUGGY]  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
152	[BUG]  [BUGGY]  nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
153	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
154	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
155	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
156	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
157	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
158	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
159	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
160	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
161	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
162	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
163	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
164	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
165	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
166	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
167	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
168	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  count);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  count);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  0,  count);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
169	[BUG]  [BUGGY]  in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in  =  readBits(nextByte,  count);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
170	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
171	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  MASKSSize;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  MASKSSize;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  MASKSSize;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
172	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
173	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  4;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
174	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  1));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  1));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  1));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
175	[BUG]  [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
176	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  +  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  +  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  +  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
177	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  1));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  1));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  1));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
178	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS_SIZE));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS_SIZE));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
179	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS.length));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS.length));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS.length));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
180	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  2));  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  2));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  2));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
181	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
182	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  1;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
183	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
184	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
185	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MASKS)+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  MASKS)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  MASKS)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
186	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  count;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  count;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
187	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  2;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  2;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
188	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
189	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[byteOrder];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[byteOrder];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[byteOrder];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
190	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[nextByte  +  1];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
191	[BUG]  [BUGGY]  bitsOut  =  nextByte  +  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  +  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  +  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
192	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
193	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(nextByte    <    <    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
194	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(nextByte    <    <    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
195	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(nextByte    <    <    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
196	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MASKS_SIZE));    	non-compiled	[CE]  ';'  expected	56	None	replace
197	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS_SIZE));  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MASKS_SIZE));    	non-compiled	[CE]  ';'  expected	56	None	replace
198	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE));  [CE]  ';'  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MASKS_SIZE));    	non-compiled	[CE]  ';'  expected	56	None	replace
199	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MASKS_SIZE));  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MASKS_SIZE));    	non-compiled	[CE]  ';'  expected	56	None	replace
200	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE));  [CE]  ';'  expected  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MASKS_SIZE));    	non-compiled	[CE]  ';'  expected	56	None	replace
201	[BUG]  [BUGGY]  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  count;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
202	[BUG]  [BUGGY]  bitsOut  +=  nextByte;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  nextByte;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  nextByte;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
203	[BUG]  [BUGGY]  bitsOut  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  1;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
204	[BUG]  [BUGGY]  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  2;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
205	[BUG]  [BUGGY]  bitsOut  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  8;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
206	[BUG]  [BUGGY]  bitsOut  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  4;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
207	[BUG]  [BUGGY]  bitsOut  +=  16;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  16;	  bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
208	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
209	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
210	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
211	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
212	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
213	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
214	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
215	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  count);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
216	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
217	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  nextByte);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
218	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  nextByte);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
219	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCached,  nextByte);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
220	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  in);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  in);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  in);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
221	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  <  <  MASKS[count]);  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  <  <  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  <  <  MASKS[count]);	  bitsOut    =    (byteOrder    &    MASKS[count]);    	non-compiled	[CE]  ']'  expected	78	None	replace
222	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  &  MASKS[0]);	  bitsOut    =    (byteOrder    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
223	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
224	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[0];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
225	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
226	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count  +  1];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
227	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
228	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[nextByte];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
229	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  count);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
230	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  0,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
231	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
232	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  0,  count);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
233	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MASKS_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
234	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
235	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
236	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  2);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
237	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
238	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  16);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  16);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
239	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count,  bitsCached);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
240	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
241	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
242	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
243	[BUG]  [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(nextByte,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
244	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bytesCachedSize,  count);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
245	[BUG]  [BUGGY]  InputStream  in  =  readInt(count,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(count,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(count,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
246	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  count);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
247	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  0,  count);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
248	[BUG]  [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bytesCachedSize,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bytesCachedSize,  0,  count);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
249	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[0];	  bitsOut    =(byteOrder    >=    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
250	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[0];	  bitsOut    =(byteOrder    >=    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
251	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[1];	  bitsOut    =(byteOrder    >=    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	121	None	replace
252	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCached,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCached,  MASKS_SIZE);	  int    count    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
253	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MASKS_SIZE);	  int    count    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	94	None	replace
254	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[0];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
255	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  count);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
256	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
257	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
258	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte,  count);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
259	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte  -  1);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
260	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  1,  nextByte);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
261	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  1,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize  +  1,  nextByte);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
262	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
263	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
264	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count]);  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count]);	  bitsOut    =(bytesCached    <    <    MASKS[count]);    	non-compiled	[CE]  ']'  expected	90	None	replace
265	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE);  [CE]  >  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    <    <    MASKS[count]);    	non-compiled	[CE]  >  expected	90	None	replace
266	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE  |  MASKS[count]);  [CE]  >  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE  |  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE  |  MASKS[count]);	  bitsOut    =(bytesCached    <    <    MASKS[count]);    	non-compiled	[CE]  >  expected	90	None	replace
267	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
268	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
269	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
270	[BUG]  [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte!=  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
271	[BUG]  [BUGGY]  bitsOut  =(nextByte  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  [Delete]  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  ')'  expected	152	None	replace
272	[BUG]  [BUGGY]  bitsOut  =(nextByte  ==  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  ==  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  ==  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
273	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bytesCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  (bytesCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bytesCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
274	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByteSize);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByteSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByteSize);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
275	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.length);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  nextByte.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  nextByte.length);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
276	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  1);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
277	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count  +  1);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
278	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
279	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  2);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
280	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
281	[BUG]  [BUGGY]  bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
282	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
283	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
284	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
285	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  count);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
286	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  1,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1,  bitsCachedSize);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
287	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1,  nextByte);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
288	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByte.length);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByte.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1,  nextByte.length);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
289	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  nextByte  +  1);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
290	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByteSize);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  1,  nextByteSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1,  nextByteSize);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
291	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
292	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  nextByte,  count);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
293	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
294	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize  +  1);	  int    count    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
295	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  bitsCachedSize);	  int    count    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
296	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
297	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1,  bitsCachedSize);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
298	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  2);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
299	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  +  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
300	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
301	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  3);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  3);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  3);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
302	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  MASKS_SIZE);	  bitsOut    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
303	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCached,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCached,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCached,  MASKS_SIZE);	  bitsOut    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
304	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[nextByte];	  bitsOut    =(byteOrder    >=    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
305	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[0];	  bitsOut    =(byteOrder    >=    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
306	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
307	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])/  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])/  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])/  MASKS[count];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
308	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
309	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
310	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])%  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])%  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])%  MASKS[count];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
311	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
312	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCachedSize);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
313	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  bitsCachedSize);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
314	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCachedSize,  nextByte);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
315	[BUG]  [BUGGY]  InputStream  in  =  readBits(byteOrder);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(byteOrder);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(byteOrder);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
316	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bitsCachedSize);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
317	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCached);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
318	[BUG]  [BUGGY]  bitsOut  =  MASKS  &  bitsCached[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  MASKS  &  bitsCached[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  MASKS  &  bitsCached[count];	  bitsOut    =    bitsCached    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
319	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[count];	  bitsOut    =    bitsCached    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
320	[BUG]  [BUGGY]  bitsOut  =  nextByte  +  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  +  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  +  MASKS[count];	  bitsOut    =    bitsCached    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
321	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  1)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  1)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  1)&  MASKS[count];	  bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
322	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
323	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  >  expected	87	None	replace
324	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  1)&  MASKS[count];	  bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
325	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
326	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
327	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
328	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
329	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
330	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
331	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  count,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  count,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  count,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
332	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
333	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
334	[BUG]  [BUGGY]  bitsOut  =(count  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
335	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  (MAXIMUM_CACHE_SIZE  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	181	None	replace
336	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
337	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
338	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (mean  -  count);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (mean  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (mean  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
339	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (Math.max(0,  nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (Math.max(0,  nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (Math.max(0,  nextByte  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
340	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  0,  nextByte);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
341	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  0,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
342	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
343	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  nextByteSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  nextByteSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  nextByteSize  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
344	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  nextByte.length  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  nextByte.length  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  nextByte.length  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
345	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  /  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
346	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
347	[BUG]  [BUGGY]  bitsCached  +=  nextByte;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  nextByte;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  nextByte;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
348	[BUG]  [BUGGY]  bitsCached  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  2;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
349	[BUG]  [BUGGY]  bitsCached  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  8;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
350	[BUG]  [BUGGY]  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  1;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
351	[BUG]  [BUGGY]  bitsCached  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  4;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
352	[BUG]  [BUGGY]  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  count;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
353	[BUG]  [BUGGY]  bitsCached  +=  10;  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  10;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  10;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
354	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
355	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)|  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
356	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  nextByte];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
357	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[count  +  1];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
358	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[0];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
359	[BUG]  [BUGGY]  bitsOut  =  nextByte  -  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  -  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  -  MASKS[count];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
360	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[size];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
361	[BUG]  [BUGGY]  bitsOut  =  MASKS  &  nextByte[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  MASKS  &  nextByte[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  MASKS  &  nextByte[count];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
362	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[1];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
363	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[0]  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[0]  +  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[0]  +  1;	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
364	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
365	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[0]);	  bitsOut    =(bytesCached    &    MASKS[0]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
366	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[0]);	  bitsOut    =(bytesCached    &    MASKS[0]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
367	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
368	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsCached  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
369	[BUG]  [BUGGY]  Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
370	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	173	None	replace
371	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  ']'  expected	173	None	replace
372	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
373	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
374	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  bitsOut);	  int    count    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
375	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
376	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
377	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
378	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
379	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  1)&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  1)&  1;	  bitsOut    =(bitsCached    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
380	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
381	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
382	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
383	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)/  1;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)/  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
384	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE));  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  >  expected	51	None	replace
385	[BUG]  [BUGGY]  bitsOut  =(nextByte  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  -  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  -  MAXIMUM_CACHE_SIZE));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	51	None	replace
386	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	51	None	replace
387	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	51	None	replace
388	[BUG]  [BUGGY]  bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  &  MAXIMUM_CACHE_SIZE));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	51	None	replace
389	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
390	[BUG]  [BUGGY]  bitsCached  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
391	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
392	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
393	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));  [CE]  ';'  expected  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  ';'  expected	70	None	replace
394	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)+  1;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	replace
395	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)+  1;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	replace
396	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
397	[BUG]  [BUGGY]  nextByte  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  nextByte  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	nextByte  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
398	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  count;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
399	[BUG]  [BUGGY]  InputStream  in  =  readBitsIn(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBitsIn(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBitsIn(nextByte,  MAXIMUM_CACHE_SIZE);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
400	[BUG]  [BUGGY]  in.defaultReadBit();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.defaultReadBit();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.defaultReadBit();	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
401	[BUG]  [BUGGY]  InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
402	[BUG]  [BUGGY]  InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(readBits,  MAXIMUM_CACHE_SIZE,  nextByte);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
403	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
404	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  bitsOut);	  int    count    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
405	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])/  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])/  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])/  MASKS[count];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
406	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
407	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count])+  MASKS[count];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
408	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[count])+  MASKS[count];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
409	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[0];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
410	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
411	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
412	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
413	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
414	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
415	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
416	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE  +  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
417	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  1);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  1);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
418	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  0,  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  0,  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
419	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  2);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  2);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
420	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  16);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  16);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
421	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  count);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  count);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
422	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[count  -  1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  nextByte  &  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[count  -  1];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
423	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte  -  1];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[nextByte  -  1];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
424	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  2];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  -  2];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
425	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  -  1],  MAXIMUM_CACHE_SIZE);	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  ';'  expected	151	None	replace
426	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[count  -  1];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[count  -  1];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
427	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
428	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  nextByte);	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
429	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[nextByte];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
430	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  16)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  16)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  16)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
431	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  16)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  16)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  16)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
432	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[0];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
433	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
434	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
435	[BUG]  [BUGGY]  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
436	[BUG]  [BUGGY]  nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	nextByte  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
437	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
438	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
439	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
440	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
441	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  8);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
442	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
443	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
444	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  8);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
445	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
446	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
447	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  nextByte  +  1);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
448	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  bitsCachedSize);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
449	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
450	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  1);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
451	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  -  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  bitsCachedSize);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
452	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  /  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
453	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
454	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  *  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
455	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  2);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
456	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  16);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  -  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  16);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
457	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
458	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count]));  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count]));	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ']'  expected	54	None	replace
459	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count]));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count]));	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	54	None	replace
460	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  1);  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  1);	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	54	None	replace
461	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])/  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
462	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE  +  1;	  bitsOut    =(bytesCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
463	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
464	[BUG]  [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
465	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[0];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
466	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASK[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASK[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASK[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
467	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count])&  MASKS[count];	  bitsOut    =(nextByte    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
468	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)|  MASKS[count];  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)|  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MAXIMUM_CACHE_SIZE)|  MASKS[count];	  bitsOut    =(nextByte    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  >  expected	31	None	replace
469	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
470	[BUG]  [BUGGY]  long  count  =  Math.min(bytesCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bytesCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bytesCachedSize,  nextByte);	  long    count    =    Math.min(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
471	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte  +  1);	  long    count    =    Math.min(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
472	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  MASKS[count]);	  long    count    =    Math.min(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	154	None	replace
473	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
474	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
475	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
476	[BUG]  [BUGGY]  bitsOut  =(count  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  <  <  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  <  <  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
477	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
478	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
479	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
480	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
481	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (maximum_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
482	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
483	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
484	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
485	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count));	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
486	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
487	[BUG]  [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
488	[BUG]  [BUGGY]  bitsOut  =(nextByte  -  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  -  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  -  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
489	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
490	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
491	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  1;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count)+  1;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
492	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)/  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)/  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count)/  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
493	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
494	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  2;  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count)+  2;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
495	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  nextByte[count])&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
496	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
497	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  nextByte[count])&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
498	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  short    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
499	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);	  short    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
500	[BUG]  [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);	  short    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
501	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsOut);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
502	[BUG]  [BUGGY]  short  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
503	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);	  bitsOut    =(bytesCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
504	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MASKS[count]);	  bitsOut    =(bytesCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
505	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[nextByte]);	  bitsOut    =(bytesCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
506	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  nextByte.length);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  nextByte.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  nextByte.length);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
507	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  0,  nextByte);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
508	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  nextByteSize);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  nextByteSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  nextByteSize);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
509	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
510	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  NUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  NUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  NUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
511	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
512	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  2);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  2);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
513	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  1);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
514	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  nextByte)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  nextByte)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  nextByte)&  MASKS[count];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
515	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  1;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  1;	  bitsOut    =(byteOrder    >>    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
516	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE  +  1;	  bitsOut    =(byteOrder    >>    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
517	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  count;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
518	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[nextByte];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
519	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
520	[BUG]  [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
521	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASK[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASK[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASK[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
522	[BUG]  [BUGGY]  bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
523	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
524	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
525	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  bitsOut  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
526	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
527	[BUG]  [BUGGY]  Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
528	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
529	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	124	None	replace
530	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (16  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (16  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (16  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
531	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (count  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
532	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (maximum_CACHE_SIZE  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (maximum_CACHE_SIZE  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (maximum_CACHE_SIZE  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
533	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
534	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[1]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
535	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[1]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
536	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[1]);  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  ']'  expected	119	None	replace
537	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (Math.max(10,  count  -  1))  &  MASKS[count];  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (Math.max(10,  count  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (Math.max(10,  count  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  ')'  expected	65	None	replace
538	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
539	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  nextByte[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  nextByte[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  nextByte[count])&  MASKS[count];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
540	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
541	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
542	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[0])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[0])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MASKS[0])&  MASKS[count];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
543	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  nextByte)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  nextByte)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  nextByte)&  MASKS[count];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
544	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsOut  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	172	None	replace
545	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])/  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])/  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])/  MASKS[count];	  bitsOut    =(bitsCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
546	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count])+  MASKS[count];	  bitsOut    =(bitsCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
547	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])-  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
548	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  bitsCachedSize);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  bitsCachedSize);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
549	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
550	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)|  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)|  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
551	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  2];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  2];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
552	[BUG]  [BUGGY]  bitsOut  =(count  <  <  8)|  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(count  <  <  8)|  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(count  <  <  8)|  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
553	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte[count  +  1];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  nextByte[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  nextByte[count  +  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
554	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS[count]);	  bitsOut    =(bitsCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
555	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[MAXIMUM_CACHE_SIZE]);	  bitsOut    =(bitsCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
556	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[nextByte]);	  bitsOut    =(bitsCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
557	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
558	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE  +  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
559	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  2];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  +  2];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
560	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  +  1],  MAXIMUM_CACHE_SIZE);	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  ';'  expected	77	None	replace
561	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[count  +  1];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
562	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
563	[BUG]  [BUGGY]  long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(bytesCached,  MAXIMUM_CACHE_SIZE);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
564	[BUG]  [BUGGY]  long  count  =  readBits(bytesCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(bytesCachedSize,  nextByte);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
565	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
566	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  1)&  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  1)&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  1)&  1;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
567	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  2;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  2;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
568	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKSSize;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MASKSSize;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  MASKSSize;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
569	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)|  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)|  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)|  1;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
570	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
571	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
572	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
573	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
574	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count])&  MASKS[count];  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	122	None	replace
575	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])|  MASKS[count];  [CE]  ']'  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])|  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])|  MASKS[count];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	122	None	replace
576	[BUG]  [BUGGY]  int  count  =  read(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  0,  MAXIMUM_CACHE_SIZE);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
577	[BUG]  [BUGGY]  int  count  =  read(nextByte,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  bitsCachedSize);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
578	[BUG]  [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
579	[BUG]  [BUGGY]  int  count  =  read(nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  MASKS_SIZE);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
580	[BUG]  [BUGGY]  int  count  =  read(nextByte,  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  1);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
581	[BUG]  [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
582	[BUG]  [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);	  int    count    =    read(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	113	None	replace
583	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
584	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS.length));	  bitsOut    =(bytesCached    &    MASKS.length));    	non-compiled	[CE]  ';'  expected	55	None	replace
585	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS.length));  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS.length));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS.length));	  bitsOut    =(bytesCached    &    MASKS.length));    	non-compiled	[CE]  ';'  expected	55	None	replace
586	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS.length));  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS.length));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS.length));	  bitsOut    =(bytesCached    &    MASKS.length));    	non-compiled	[CE]  ';'  expected	55	None	replace
587	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
588	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (Math.max(0,  bitsCachedSize  -  count));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (Math.max(0,  bitsCachedSize  -  count));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (Math.max(0,  bitsCachedSize  -  count));	  bitsOut    =(bitsCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
589	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[0]);	  bitsOut    =(bitsCached    &    MASKS[0]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
590	[BUG]  [BUGGY]  bitsOut  =  count  &  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  count  &  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  count  &  MASKS[size];	  bitsOut    =    byteOrder    &    MASKS[size];    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
591	[BUG]  [BUGGY]  bitsOut  =  size  &  MASKS[byteOrder];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  size  &  MASKS[byteOrder];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  size  &  MASKS[byteOrder];	  bitsOut    =    byteOrder    &    MASKS[size];    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
592	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bytesCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bytesCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bytesCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
593	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
594	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  count)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
595	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  count);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
596	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
597	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  0,  count);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
598	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached!=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
599	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
600	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	83	None	replace
601	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS_SIZE,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	83	None	replace
602	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
603	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[count  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
604	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[nextByte  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
605	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
606	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  2]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  2]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  2]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
607	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  8;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
608	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  4;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
609	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
610	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
611	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
612	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
613	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
614	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  bitsCachedSize);	  int    count    =    readBits(bytesCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
615	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bytesCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bytesCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bytesCachedSize);	  int    count    =    readBits(bytesCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
616	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  nextByte,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bytesCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
617	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
618	[BUG]  [BUGGY]  bitsOut  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(Math.max(MAXIMUM_CACHE_SIZE,  nextByte));	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
619	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  count);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
620	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte));	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  ';'  expected	60	None	replace
621	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
622	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[i]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[i]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[i]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
623	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[i]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[i]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[i]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
624	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[i]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[i]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[i]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	replace
625	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[i]);  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[i]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[i]);    	non-compiled	[CE]  ']'  expected	163	None	replace
626	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)&  MASKS[nextByte];	  bitsOut    =(bytesCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
627	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)&  MASKS[0];	  bitsOut    =(bytesCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
628	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
629	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
630	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[size]);  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  ']'  expected	49	None	replace
631	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
632	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
633	[BUG]  [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte!=  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
634	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
635	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
636	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
637	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  *  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
638	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
639	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
640	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
641	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize  +  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
642	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize  +  1);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
643	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  count);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
644	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[nextByte]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
645	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  MASKS[count]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
646	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  nextByte[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  nextByte[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  nextByte[count]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
647	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count  -  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count  -  1]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
648	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MASKS.length));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  MASKS.length));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  MASKS.length));	  bitsOut    =(bytesCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	52	None	replace
649	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  2));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  2));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  2));	  bitsOut    =(bytesCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	52	None	replace
650	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  16));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  +  16));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  16));	  bitsOut    =(bytesCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	52	None	replace
651	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  1,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
652	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  /  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  /  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  /  1);	  bitsOut    =    readBits(nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
653	[BUG]  [BUGGY]  bitsOut  =(nextByte  {  MASKS[nextByte]);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  {  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  {  MASKS[nextByte]);	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  ')'  expected	48	None	replace
654	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[0];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  >  expected	174	None	replace
655	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[0];  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  ']'  expected	174	None	replace
656	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[0];  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  ']'  expected	174	None	replace
657	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[1];  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[1];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  ']'  expected	174	None	replace
658	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte.length);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte.length);	  bitsOut    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
659	[BUG]  [BUGGY]  int  count  =  readBits(bytesCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCached,  nextByte);	  int    count    =    readBits(nextByte,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
660	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsOut,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
661	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
662	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
663	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
664	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
665	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  MAXIMUM_CACHE_SIZE);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
666	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsCached  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  bitsCached  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
667	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
668	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
669	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
670	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
671	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
672	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
673	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte,  count);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
674	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  count);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
675	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  MASKS[count]);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
676	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte;  [CE]  ')'  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte;	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  ')'  expected	69	None	replace
677	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
678	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
679	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	  short    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
680	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  short    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
681	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize  +  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	replace
682	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
683	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
684	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
685	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    >=    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
686	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    >=    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
687	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  16;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  16;	  bitsOut    =(bytesCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
688	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  2;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  2;	  bitsOut    =(bytesCached    &    MASKS[count])+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
689	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
690	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[nextByte];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	replace
691	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
692	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (count  -  MASKS_SIZE);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
693	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (Math.max(16,  bitsCachedSize  -  count));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (Math.max(16,  bitsCachedSize  -  count));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (Math.max(16,  bitsCachedSize  -  count));	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
694	[BUG]  [BUGGY]  in.defaultReadBits();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.defaultReadBits();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.defaultReadBits();	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
695	[BUG]  [BUGGY]  InputStream  in  =  readBits(readBits(),  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(readBits(),  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(readBits(),  MAXIMUM_CACHE_SIZE);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
696	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  %  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  %  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  %  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
697	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
698	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
699	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  2;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  2;	  bitsOut    =(byteOrder    >>    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
700	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  +  count);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  +  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  +  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
701	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
702	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
703	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)%  (bitsCachedSize  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)%  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)%  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	replace
704	[BUG]  [BUGGY]  bitsOut  =  in  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  &  MASKS[count];	  bitsOut    =    bitsCached    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	161	None	replace
705	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  ']'  expected  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  ']'  expected	37	None	replace
706	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASK_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  >  expected  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASK_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASK_SIZE)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  >  expected	37	None	replace
707	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  6)&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  6)&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  6)&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
708	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[nextByte];  [CE]  ']'  expected  [FE]                                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[nextByte];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  ']'  expected	37	None	replace
709	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (Math.abs(bitsCachedSize  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  ')'  expected	65	None	replace
710	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKSSize  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MASKSSize  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
711	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
712	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
713	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  0,  nextByte);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
714	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MASKS.length);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  MASKS.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  MASKS.length);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
715	[BUG]  [BUGGY]  long  count  =  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(BYTE_SIZE,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
716	[BUG]  [BUGGY]  long  count  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(0,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(0,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
717	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
718	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
719	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  nextByte  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
720	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKSSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKSSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKSSize  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
721	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
722	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  2);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
723	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  3);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  3);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  3);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
724	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  16;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  16;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
725	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  8;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
726	[BUG]  [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
727	[BUG]  [BUGGY]  bitsCached  +=  Math.max(bitsOut,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(bitsOut,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(bitsOut,  nextByte);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
728	[BUG]  [BUGGY]  bitsCached  +=  Math.max(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(nextByte,  MAXIMUM_CACHE_SIZE);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
729	[BUG]  [BUGGY]  bitsCached  +=  Math.max(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(bitsCachedSize,  nextByte);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
730	[BUG]  [BUGGY]  bitsCached  +=  Math.max(0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(0,  nextByte);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
731	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[1];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))  &  MASKS[1];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    1))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
732	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  16);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  16);	  bitsOut    =    readBits(nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
733	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  *  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  *  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  *  1);	  bitsOut    =    readBits(nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
734	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  4);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  4);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  4);	  bitsOut    =    readBits(nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
735	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[0])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
736	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  8);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  8);	  bitsOut    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	147	None	replace
737	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
738	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
739	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
740	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS_SIZE,  bitsCached);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	132	None	replace
741	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
742	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
743	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[size];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
744	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
745	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[1];	  bitsOut    =(bitsCached!=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	179	None	replace
746	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  *  1];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  *  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[count  *  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
747	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  2);	  bitsOut    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
748	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  3);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  3);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  3);	  bitsOut    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
749	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  8);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  8);	  bitsOut    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
750	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
751	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKSSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MASKSSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKSSize  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
752	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  nextByte  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
753	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  3];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  3];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  +  3];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
754	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  *  1];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  *  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  *  1];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
755	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
756	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  +  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  +  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  +  MASKS[count]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
757	[BUG]  [BUGGY]  bitsOut  =(bitsCached  -  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  -  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  -  MASKS[count]);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
758	[BUG]  [BUGGY]  bitsOut  =  readBits(NextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(NextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(NextByte,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
759	[BUG]  [BUGGY]  bitsOut  =  readBits(currentByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(currentByte,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(currentByte,  MASKS_SIZE);	  bitsOut    =    readBits(nextByte,    MASKS_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	85	None	replace
760	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  nextByte  -  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
761	[BUG]  [BUGGY]  long  count  =  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bytesCachedSize,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
762	[BUG]  [BUGGY]  in.copyCurrentStructure(nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.copyCurrentStructure(nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.copyCurrentStructure(nextByte);	  in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
763	[BUG]  [BUGGY]  in.copyCurrentStructure(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.copyCurrentStructure(bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.copyCurrentStructure(bitsCachedSize);	  in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
764	[BUG]  [BUGGY]  bitsOut.skipChildren();  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut.skipChildren();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
765	[BUG]  [BUGGY]  in.copyCurrentStructure(bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.copyCurrentStructure(bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.copyCurrentStructure(bitsCached);	  in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
766	[BUG]  [BUGGY]  bitsOut  =(byteOrder  -  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  -  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  -  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
767	[BUG]  [BUGGY]  bitsCached  +=  16;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  16;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
768	[BUG]  [BUGGY]  bitsCached  +=  7;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  7;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  7;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
769	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
770	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])&  MASS[0];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
771	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[0])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[0])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[0])&  MASKS[count];	  bitsOut    =(bitsCached    +    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	replace
772	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  >>  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  >>  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  >>  MASKS[count]);	  bitsOut    =    (byteOrder    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
773	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
774	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
775	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  count);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  +  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (MAXIMUM_CACHE_SIZE    -    count);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
776	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS.length)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MASKS.length)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS.length)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(nextByte    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	165	None	replace
777	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte.bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte.bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte.bitsCachedSize);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
778	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  8));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  8));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  8));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
779	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  16));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  16));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  16));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
780	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCached    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	32	None	replace
781	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  6)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  6)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  6)&  MASKS[count];	  bitsOut    =(bitsCached    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
782	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[nextByte];  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	32	None	replace
783	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  0;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  0;	  bitsOut    =(bitsCached    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
784	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[1];	  bitsOut    =(nextByte    <    <    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
785	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
786	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count1]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count1]);	  bitsOut    =(bitsCached    &    MASKS[1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	119	None	replace
787	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
788	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  (nextByte  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
789	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	143	None	replace
790	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    2;    	non-compiled	[CE]  reached  end  of  file  while  parsing	170	None	replace
791	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  2;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	replace
792	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  8;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  8;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	replace
793	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
794	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
795	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
796	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
797	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
798	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count0]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count0]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count0]);	  bitsOut    =(bytesCached    &    MASKS[0]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	replace
799	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
800	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  MASKS[count]);	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
801	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];	  bitsOut    =(byteOrder    >>    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
802	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count  +  1];	  bitsOut    =(byteOrder    >>    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
803	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
804	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)-  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)-  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)-  MASKS[count];	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
805	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[0];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCachedSize    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	150	None	replace
806	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  8);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  8);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
807	[BUG]  [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[0];  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  byteOrder  &  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  ';'  expected	76	None	replace
808	[BUG]  [BUGGY]  bitsOut  =  byteOrder  <  <  MASKS[0];  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  byteOrder  <  <  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  <  <  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  ']'  expected	76	None	replace
809	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS.length);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MASKS.length);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
810	[BUG]  [BUGGY]  bitsOut  =  readBits(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bitsCachedSize);	  bitsOut    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
811	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder  +  1);	  bitsOut    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
812	[BUG]  [BUGGY]  bitsOut  =  readBits(bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bitsCached);	  bitsOut    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
813	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder  -  1);	  bitsOut    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
814	[BUG]  [BUGGY]  int  count  =  Math.min(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(nextByte,  MAXIMUM_CACHE_SIZE);	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
815	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  -  1])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
816	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  16]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  16]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  -  16]);	  bitsOut    =(bitsCached    &    MASKS[count    -    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	162	None	replace
817	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (nextByte  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
818	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    1))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	152	None	replace
819	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[2];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[2];	  bitsOut    =(nextByte    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
820	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  6;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  6;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  6;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
821	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  3;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  3;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  3;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
822	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  count)  <  <  (MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
823	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
824	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
825	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  count)  <  <  (MAXIMUM_CACHE_SIZE  -  2);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
826	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (nextByte  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached!=  (nextByte  -  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  (nextByte  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
827	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[2];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[2];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
828	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
829	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
830	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
831	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	181	None	replace
832	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
833	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
834	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  2];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  2];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
835	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  *  1];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  *  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[count  *  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count    +    1];    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
836	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(bitsCachedSize,  nextByte);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
837	[BUG]  [BUGGY]  bitsOut  =(byteOrder  &  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  &  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  &  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	174	None	replace
838	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[bitsCached];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[bitsCached];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[bitsCached];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
839	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[byte];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[byte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[byte];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
840	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[len];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[len];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[len];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
841	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[hashCode];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[hashCode];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[hashCode];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
842	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize  +  1);	  int    count    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	replace
843	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bytesCached    <    <    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
844	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  2;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
845	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
846	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  2;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
847	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  8;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  8;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  8;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
848	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASK[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASK[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MASK[count];	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	173	None	replace
849	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
850	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
851	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
852	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count)&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count)&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count)&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    >=    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  ']'  expected	4	None	replace
853	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  byteOrder);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  byteOrder);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  byteOrder);	  int    count    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	replace
854	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
855	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte  -  1);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
856	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte  +  1);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
857	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
858	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte+1);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte+1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte+1);	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
859	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte;  [CE]  ')'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte;	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  ')'  expected	70	None	replace
860	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    >=    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
861	[BUG]  [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(bitsCachedSize,  nextByte);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
862	[BUG]  [BUGGY]  bitsOut  +=  Math.max(16,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(16,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(16,  nextByte);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
863	[BUG]  [BUGGY]  bitsOut  +=  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
864	[BUG]  [BUGGY]  bitsOut  +=  Math.max(0,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(0,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(0,  nextByte);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
865	[BUG]  [BUGGY]  bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  [Delete]  (MAXIMUM_CACHE_SIZE  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (MAXIMUM_CACHE_SIZE    -    count))    &    MASKS[count];    	non-compiled	[CE]  ')'  expected	63	None	replace
866	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASK_SIZE));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASK_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASK_SIZE));	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	53	None	replace
867	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+(nextByte  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+(nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)+(nextByte  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	164	None	replace
868	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (value  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (value  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (value  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	164	None	replace
869	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
870	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  1;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count)+  1;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
871	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  2;  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count)+  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count)+  2;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
872	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  -  1];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[count  -  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
873	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[NUMBER];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[NUMBER];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[NUMBER];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
874	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[0];	  bitsOut    =(bitsCached    >=    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	126	None	replace
875	[BUG]  [BUGGY]  bitsOut  =(nextByte  -  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  -  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  -  MASKS[count])&  MASKS[count];	  bitsOut    =(nextByte    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
876	[BUG]  [BUGGY]  bitsOut  =(nextByte  +  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  +  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  +  MASKS[count])&  MASKS[count];	  bitsOut    =(nextByte    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
877	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  1])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
878	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  16]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  16]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  16]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
879	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  8]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  8]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  8]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
880	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  0);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  0);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  0);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
881	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  1);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  1);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
882	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  16);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  16);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
883	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  2);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  2);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
884	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bytesCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize  -  1);	  bitsOut    =    readBits(bytesCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
885	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
886	[BUG]  [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  count;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  count;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
887	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;	  Integer    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    count;    	non-compiled	[CE]  reached  end  of  file  while  parsing	72	None	replace
888	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    <    <    MASKS[count]);    	non-compiled	[CE]  ']'  expected	90	None	replace
889	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
890	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  ==  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  ==  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  ==  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    ==    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	159	None	replace
891	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
892	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
893	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
894	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
895	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  2);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
896	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCached    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	156	None	replace
897	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  count);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
898	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[1];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[1];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
899	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  (bitsCachedSize  -  count))&  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	replace
900	[BUG]  [BUGGY]  bitsOut  =(byteOrder  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
901	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  2;  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  2;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
902	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  16;  [CE]  ']'  expected  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  16;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
903	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MASKS  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
904	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
905	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	131	None	replace
906	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)-  (MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
907	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[2];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[2];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
908	[BUG]  [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
909	[BUG]  [BUGGY]  int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
910	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  16)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  <  16)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  16)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
911	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  6)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  6)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  6)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
912	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCachedSize    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
913	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >  MASKS[count])&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >  MASKS[count])&  MASKS[count];	  bitsOut    =(bitsCachedSize    >=    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	120	None	replace
914	[BUG]  [BUGGY]  bitsOut  +=  Math.min(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(bitsCachedSize,  nextByte);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
915	[BUG]  [BUGGY]  bitsOut  +=  Math.min(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(ByteOrder.MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
916	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte)+  1;	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
917	[BUG]  [BUGGY]  bitsOut  +=  Math.min(ByteOrder.SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(ByteOrder.SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(ByteOrder.SIZE,  nextByte);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
918	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[size];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
919	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCached];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCached];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCached];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
920	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCachedSize];  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCachedSize];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[bitsCachedSize];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
921	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[byte];  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  8)|  MASKS[byte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)|  MASKS[byte];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
922	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  0;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  0;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  0;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
923	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  8)&  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  8)&  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  8)&  1;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
924	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS[count]);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
925	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  count);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
926	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
927	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  8);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  8);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
928	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  2);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
929	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
930	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MASKS[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
931	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
932	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
933	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[size];	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
934	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MASKS_SIZE);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
935	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  8);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  8);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
936	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  16);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  16);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
937	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MASKS[count])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MASKS[count])+  MASKS[count];	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	replace
938	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS[count])+  MASKS[count];	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
939	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS)+  MASKS[count];	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
940	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS.length)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS.length)+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS.length)+  MASKS[count];	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
941	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
942	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
943	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  16);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  16);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  16);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
944	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  3);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  3);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  3);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
945	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  4);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  4);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  4);	  bitsOut    =    readBits(nextByte,    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	133	None	replace
946	[BUG]  [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[nextByte];  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  byteOrder  &  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  ';'  expected	75	None	replace
947	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte)&  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte)&  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte)&  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
948	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS[nextByte]);	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
949	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
950	[BUG]  [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[size];  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  byteOrder  &  MASKS[size];	  bitsOut    =    byteOrder    &    MASKS[size];    	non-compiled	[CE]  ';'  expected	79	None	replace
951	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
952	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  2;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  2;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
953	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[0];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	replace
954	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[1];  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[1];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	122	None	replace
955	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[size];  [CE]  ']'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[size];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	122	None	replace
956	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[0]));	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	54	None	replace
957	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  1]));	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ';'  expected	54	None	replace
958	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bitsCached);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
959	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bitsCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bitsCached,  nextByte);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
960	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
961	[BUG]  [BUGGY]  InputStream  in  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
962	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
963	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  nextByte);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  nextByte);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  nextByte);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
964	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  0);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  0);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  0);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
965	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  8);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)&  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
966	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
967	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  8);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  reached  end  of  file  while  parsing	145	None	replace
968	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  +  8);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  +  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  +  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
969	[BUG]  [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[count  -  1];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  byteOrder  &  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  byteOrder  &  MASKS[count  -  1];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  ';'  expected	151	None	replace
970	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[3];  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[3];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[3];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[1];    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
971	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MASKS_SIZE)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  MASKS_SIZE)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  MASKS_SIZE)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
972	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  &  MASKS[nextByte]  :  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
973	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  :  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  :  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  MASKS.length)?  bitsCached  :  MASKS[nextByte];	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
974	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCachedSize  :(bytesCached  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  MASKS.length)?  bitsCachedSize  :(bytesCached  &  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  MASKS.length)?  bitsCachedSize  :(bytesCached  &  MASKS[nextByte]);	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
975	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCached,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	137	None	replace
976	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
977	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
978	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[2];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[2];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[2];	  bitsOut    =(byteOrder    >>    MASKS[count])&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	replace
979	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  >=  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  >=  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  >=  MASKS[count]);	  bitsOut    =    (byteOrder    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
980	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  16))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  16))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  16))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))&    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
981	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[MAXIMUM_CACHE_SIZE];    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
982	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[index];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[index];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))  &  MASKS[index];	  bitsOut    =(nextByte    <    <    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
983	[BUG]  [BUGGY]  bitsOut  =  readBits(bitsCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(bitsCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bitsCached,  nextByte);	  bitsOut    =    readBits(nextByte,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
984	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])  &  MASKS[bitsCachedSize];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])  &  MASKS[bitsCachedSize];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count])  &  MASKS[bitsCachedSize];	  bitsOut    =(nextByte    <    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ']'  expected	31	None	replace
985	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])  +  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])  +  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])  +  MASKS[nextByte];	  bitsOut    =(bytesCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
986	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsOut);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
987	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  -  1);	  int    count    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
988	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
989	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
990	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  1,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
991	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  MASKS_SIZE);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
992	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  0,  count);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
993	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  nextByte);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
994	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  0);  [CE]  reached  end  of  file  while  parsing  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  0);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  0);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
995	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  1);  [CE]  reached  end  of  file  while  parsing  [FE]                                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  1);	  InputStream    in    =    readBits(in,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	187	None	replace
996	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  (MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(bitsCached    <    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ')'  expected	122	None	replace
997	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte])+  1;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte])+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[nextByte])+  1;	  bitsOut    =(bytesCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
998	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[NextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[NextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[NextByte]);	  bitsOut    =(bytesCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	109	None	replace
999	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  (nextByte  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  (nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  (nextByte  -  count);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	142	None	replace
1000	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
1001	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS_CachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS_CachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MASKS_CachedSize);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
1002	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MASKS_SIZE);	  bitsOut    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
1003	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  1,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
1004	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE,  bitsCached);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
1005	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(byteOrder,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
1006	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1007	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (nextByte  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bytesCached    &    MASKS_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
1008	[BUG]  [BUGGY]  bitsOut  =(bitsCached  -  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  -  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  -  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bitsCached    +    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	128	None	replace
1009	[BUG]  [BUGGY]  bitsCached  +=  Math.max(16,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(16,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(16,  nextByte);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
1010	[BUG]  [BUGGY]  bitsCached  +=  Math.max(10,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.max(10,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(10,  nextByte);	  bitsCached    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
1011	[BUG]  [BUGGY]  final  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  final  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	final  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
1012	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  1;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	169	None	replace
1013	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1)+  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1)+  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  1)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	102	None	replace
1014	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE;  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ')'  expected	102	None	replace
1015	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count]  +  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MASKS[count)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
1016	[BUG]  [BUGGY]  bitsOut  +=  Math.max(10,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.max(10,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(10,  nextByte);	  bitsOut    +=    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
1017	[BUG]  [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in.readInt()  &  MASKS[count  +  1];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1018	[BUG]  [BUGGY]  bitsOut  =  bitsCached  &  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  bitsCached  &  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  bitsCached  &  MASKS[count  +  1];	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1019	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[count  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[count  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  &  MASKS[count  +  1]);	  bitsOut    =    byteOrder    &    MASKS[count    +    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1020	[BUG]  [BUGGY]  bitsOut  =  in  &  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  &  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  &  MASKS[size];	  bitsOut    =    byteOrder    &    MASKS[size];    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
1021	[BUG]  [BUGGY]  bitsOut  =  size  &  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  size  &  MASKS[size];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  size  &  MASKS[size];	  bitsOut    =    byteOrder    &    MASKS[size];    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
1022	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS.length)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1023	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)  <  <  (bitsCachedSize  -  8);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    8);    	non-compiled	[CE]  illegal  start  of  type	145	None	replace
1024	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MASKS[i]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MASKS[i]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[i]);    	non-compiled	[CE]  ')'  expected	163	None	replace
1025	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])  &  MASKS[nextByte];	  bitsOut    =(bitsCachedSize    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
1026	[BUG]  [BUGGY]  int  count  =  Math.min(16,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(16,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(16,  nextByte);  bitsOut  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
1027	[BUG]  [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsOut,  nextByte);  bitsOut  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	171	None	replace
1028	[BUG]  [BUGGY]  int  count  =  Math.min(16,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(16,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(16,  nextByte);  bitsCached  +=  MASKS[count];	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
1029	[BUG]  [BUGGY]  int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MASKS_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	replace
1030	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[0])&  MASKS[0];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[0])&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[0])&  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  ']'  expected	76	None	replace
1031	[BUG]  [BUGGY]  bitsOut  =  bitsCached  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  bitsCached  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  bitsCached  &  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
1032	[BUG]  [BUGGY]  bitsOut  =  in  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in  &  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
1033	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  3]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  3]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  3]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
1034	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  *  1]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  *  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  *  1]);	  bitsOut    =(bitsCached    &    MASKS[count    +    1]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	replace
1035	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE));  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  >  expected	53	None	replace
1036	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  1);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1037	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  nextByte);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  nextByte);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (nextByte    -    count);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
1038	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  bitsCachedSize);	  int    count    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
1039	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  bitsCachedSize);	  int    count    =    readBits(nextByte,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	replace
1040	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])  &  MASKS[nextByte];	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	157	None	replace
1041	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS[count])  &  MASKS[count];  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (MASKS[count])  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (MASKS[count])  &  MASKS[count];	  bitsOut    =(bitsCached    >>    MASKS[count])&    MASKS[count];    	non-compiled	[CE]  ')'  expected	157	None	replace
1042	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MAXIMUM_CACHE_SIZE;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    1)&    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
1043	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)/  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
1044	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  16;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS)+  16;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS)+  16;	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	replace
1045	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	177	None	replace
1046	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count  -  1,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count  -  1,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    0,    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	84	None	replace
1047	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  bitsCached);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCached);    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
1048	[BUG]  [BUGGY]  long  count  =  Math.max(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(bitsCachedSize,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	176	None	replace
1049	[BUG]  [BUGGY]  bitsCached  +=  Math.min(bitsOut,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  Math.min(bitsOut,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(bitsOut,  nextByte);	  bitsCached    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	replace
1050	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
1051	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  maxIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
1052	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  *  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte  *  1,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  *  1,  nextByte);	  bitsOut    =    readBits(nextByte    +    1,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
1053	[BUG]  [BUGGY]  final  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  final  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	final  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
1054	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[0];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
1055	[BUG]  [BUGGY]  int  count  =  readBits(bitsOut,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsOut,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsOut,  nextByte);	  int    count    =    readBits(nextByte,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	replace
1056	[BUG]  [BUGGY]  InputStream  in  =  readInputStream(in,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInputStream(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInputStream(in,  MAXIMUM_CACHE_SIZE);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1057	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);	  in.close();    	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	replace
1058	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  *  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
1059	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  2);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	130	None	replace
1060	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1061	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  bitsCachedSize  -  2);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  bitsCachedSize  -  2);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    2);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
1062	[BUG]  [BUGGY]  InputStream  in  =  readInt(length,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readInt(length,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(length,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readInt(bitsCachedSize,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1063	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  3);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  3);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  3);	  bitsOut    =(bitsCached    &    MASKS[count],    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  ')'  expected	160	None	replace
1064	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	167	None	replace
1065	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  MASKS[nextByte]);	  bitsOut    =(bitsCached    &    MASKS[nextByte]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
1066	[BUG]  [BUGGY]  bitsOut  =  bitsCachedSize  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  bitsCachedSize  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  bitsCachedSize  &  MASKS[count];	  bitsOut    =    nextByte    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	74	None	replace
1067	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count],  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    +    MASKS[count]);    	non-compiled	[CE]  ')'  expected	149	None	replace
1068	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1069	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1070	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
1071	[BUG]  [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[nextByte];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in.readInt()  &  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1072	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[nextByte]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  &  MASKS[nextByte]);	  bitsOut    =    byteOrder    &    MASKS[nextByte];    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
1073	[BUG]  [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(bitsOut,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  int    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MASKSSize;    	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	replace
1074	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
1075	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  1))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
1076	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)/  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)/  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)/  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
1077	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	175	None	replace
1078	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count  -  1];  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[count  -  1];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1079	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count  +  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[count  +  1];	  bitsOut    =(byteOrder    <    <    16)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
1080	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  bitsOut);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
1081	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  1,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
1082	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  MASKS_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  MASKS_SIZE);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
1083	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  count);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
1084	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  data.length);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  0,  data.length);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  data.length);	  int    count    =    readBits(nextByte,    0,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
1085	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (Number  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1086	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (number  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (number  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (number  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (count    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
1087	[BUG]  [BUGGY]  long  count  =  readBits(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(bitsCachedSize,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(bitsCachedSize,  nextByte);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
1088	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  nextByte  -  1);	  int    count    =    readBits(bitsCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	replace
1089	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	129	None	replace
1090	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  bitsCached);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
1091	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  bitsCachedSize);	  bitsOut    =    readBits(in,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	148	None	replace
1092	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)+    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	127	None	replace
1093	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count],  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCachedSize    &    MASKS[count]);    	non-compiled	[CE]  ')'  expected	111	None	replace
1094	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCachedSize    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
1095	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
1096	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    bitsCachedSize);    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
1097	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
1098	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE  *  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE  *  MASKS[size]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE  *  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[size]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
1099	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  1)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(byteOrder  >=  1)&  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  1)&  MASKS[count];	  bitsOut    =(byteOrder    >>    MAXIMUM_CACHE_SIZE)&    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
1100	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
1101	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)-  (bitsCachedSize  -  count);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  reached  end  of  file  while  parsing	141	None	replace
1102	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])  +  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])  +  MAXIMUM_CACHE_SIZE[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])  +  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
1103	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)/  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MASKS)+    MAXIMUM_CACHE_SIZE[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	replace
1104	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (nextByte  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
1105	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  1))  &  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))&    MASKS[1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	153	None	replace
1106	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1107	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bitsCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1108	[BUG]  [BUGGY]  in.defaultReadBit(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  in.defaultReadBit(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.defaultReadBit(nextByte,  MAXIMUM_CACHE_SIZE);	  in.skipChildren();    	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	replace
1109	[BUG]  [BUGGY]  bitsOut  +=  Math.min(16,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  +=  Math.min(16,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(16,  nextByte);	  bitsOut    +=    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
1110	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(nextByte  >>  MASKS[count]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  MASKS[count]);	  bitsOut    =(nextByte    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
1111	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  -  1];  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte  -  1];	  bitsOut    =(bitsCached    <    <    8)|    MASKS[nextByte];    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
1112	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCached);	  long    count    =    Math.max(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	replace
1113	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    bitsOut    =    in.readInt();    	non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	replace
1114	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count  +  1]);  [CE]  ']'  expected  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count  +  1]);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count  +  1]);	  bitsOut    =(bytesCached    <    <    MASKS[count]);    	non-compiled	[CE]  ']'  expected	90	None	replace
1115	[BUG]  [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[count  -  1];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  in.readInt()  &  MASKS[count  -  1];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  in.readInt()  &  MASKS[count  -  1];	  bitsOut    =    byteOrder    &    MASKS[count    -    1];    	non-compiled	[CE]  reached  end  of  file  while  parsing	151	None	replace
1116	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  +  1,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1,  bitsOut);	  int    count    =    readBits(nextByte    +    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
1117	[BUG]  [BUGGY]  InputStream  in  =  readBits(bytesCached,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(bytesCached,  nextByte);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(bytesCached,  nextByte);	  InputStream    in    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	replace
1118	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte  +  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  nextByte  +  1);	  int    count    =    readBits(bytesCachedSize,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	96	None	replace
1119	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  2))&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  2))&  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  2))&  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[0];    	non-compiled	[CE]  illegal  start  of  type	182	None	replace
1120	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
1121	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])&    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  ']'  expected	34	None	replace
1122	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count]));  [CE]  ']'  expected  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count]));  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count]));	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  ']'  expected	54	None	replace
1123	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])-  1;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])-  1;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])-  1;	  bitsOut    =(bitsCached    &    MASKS[count]));    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
1124	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  int  count  =  readBits(nextByte  -  bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  bitsOut,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	replace
1125	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  count,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	83	None	replace
1126	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
1127	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE  -  1);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS_SIZE  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE    -    1);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
1128	[BUG]  [BUGGY]  bitsCached  +=  6;  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsCached  +=  6;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  6;	  bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	replace
1129	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0])+  MASKS[count];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[0])+  MASKS[count];	  bitsOut    =(bitsCached    &    MASKS[count])+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1130	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  2))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  2))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  2))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
1131	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1,  count))  &  MASKS[0];  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1,  count))  &  MASKS[0];  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  1,  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (bitsCachedSize    -    count))&    MASKS[0];    	non-compiled	[CE]  ')'  expected	125	None	replace
1132	[BUG]  [BUGGY]  long  count  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsOut,  MAXIMUM_CACHE_SIZE);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    bitsOut);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
1133	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1134	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  count)  <  <  (MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1135	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCached  +  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  count)  <  <  (MAXIMUM_CACHE_SIZE  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    count)    <    <    (bitsCachedSize    -    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
1136	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  maxIMUM_CACHE_SIZE);	  bitsOut    =    readBits(byteOrder);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
1137	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])  +  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  bitsOut  =(bitsCachedSize  -  MASKS[count])  +  MAXIMUM_CACHE_SIZE;  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  -  MASKS[count])  +  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bitsCachedSize    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	replace
1138	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
1139	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  long    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	185	None	replace
1140	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
1141	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError      [CONTEXT]      if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;      [BUGGY]  InputStream  in  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE);  [BUGGY]        final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  dataArea,  MAXIMUM_CACHE_SIZE);	  InputStream    in    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	86	None	replace
