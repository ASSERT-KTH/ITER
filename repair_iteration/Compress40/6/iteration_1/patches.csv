bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
2	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
3	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
4	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
5	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >>  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
6	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
7	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
8	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  count);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
9	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte  +  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
10	[BUG]  [BUGGY]  bitsOut  =  readBits(bytesCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(bytesCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(bytesCachedSize);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
11	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(byteOrder);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
12	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte  -  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  1);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
13	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte  +  1,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  +  1,  nextByte);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
14	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
15	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
16	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  +  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
17	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
18	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  bitsOut);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
19	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte  -  1);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
20	[BUG]  [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	short  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
21	[BUG]  [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >>  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
22	[BUG]  [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  >=  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
23	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
24	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
25	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  <  <  8)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  8)&  MASKS[count];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte];  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[nextByte];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count];  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[count];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[0];  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[0];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  <  <  8)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  8)&  MASKS[count];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[count];  [CE]  ']'  expected  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
32	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[count];  [CE]  ']'  expected  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
33	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  >  expected	20	None	replace
34	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  MAXIMUM_CACHE_SIZE;	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
35	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  1)&  1;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  1)&  1;	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
36	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  16)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  16)&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
37	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  ']'  expected  [FE]                                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
38	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  count)  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (MAXIMUM_CACHE_SIZE  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (count  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  &  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MASKS[count]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
46	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  &  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MASKS[count]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
47	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[0]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[0]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
48	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[nextByte]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[nextByte]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
49	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[size]);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[size]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[size]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
50	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count]));  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count]));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count]));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
51	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
52	[BUG]  [BUGGY]  bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  +  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
53	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]));  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count]));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
55	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS.length));  [CE]  ';'  expected  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS.length));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS.length));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
56	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE));  [CE]  ';'  expected  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS_SIZE));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
57	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
58	[BUG]  [BUGGY]  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
59	[BUG]  [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
60	[BUG]  [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
61	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
62	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  count;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
63	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (MAXIMUM_CACHE_SIZE  -  count))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  <  <  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
66	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
67	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
68	[BUG]  [BUGGY]  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
69	[BUG]  [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
70	[BUG]  [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsCached  +=  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
71	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
72	[BUG]  [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [CE]  reached  end  of  file  while  parsing  [FE]                            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	Integer  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  count;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
73	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]                              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
74	[BUG]  [BUGGY]  bitsOut  =  nextByte  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  nextByte  &  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  nextByte  &  MASKS[count];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
75	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  byteOrder  &  MASKS[nextByte];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[nextByte];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
76	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  byteOrder  &  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[0];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
77	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  1];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  +  1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  +  1];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
78	[BUG]  [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  (byteOrder  &  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  (byteOrder  &  MASKS[count]);	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
79	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[size];  [CE]  reached  end  of  file  while  parsing  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  byteOrder  &  MASKS[size];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[size];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
80	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
81	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
82	[BUG]  [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
83	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  nextByte);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
84	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  0,  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  0,  count);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
85	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MASKS_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MASKS_SIZE);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
86	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
87	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [CE]  >  expected  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MAXIMUM_CACHE_SIZE)&  MASKS[count];	      	non-compiled	[CE]  >  expected	6	None	replace
88	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  bitsOut  =  in.readInt();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
89	[BUG]  [BUGGY]  in.skipChildren();  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  in.skipChildren();  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.skipChildren();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
90	[BUG]  [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count]);  [CE]  ']'  expected  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  <  <  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  <  <  MASKS[count]);	      	non-compiled	[CE]  ']'  expected	6	None	replace
91	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
92	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCachedSize);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
93	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  0,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
94	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MASKS_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MASKS_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
95	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder,  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
96	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(bytesCachedSize,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize,  nextByte);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
97	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
98	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
99	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
100	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
101	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS)+  MAXIMUM_CACHE_SIZE[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
102	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [CE]  ']'  expected  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count)+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  ']'  expected	2	None	replace
103	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count])+  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count])+  MASKS[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
104	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MAXIMUM_CACHE_SIZE;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
105	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(bitsCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
106	[BUG]  [BUGGY]  int  count  =  readBits(bytesCachedSize);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(bytesCachedSize);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bytesCachedSize);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
107	[BUG]  [BUGGY]  int  count  =  readBits(byteOrder);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(byteOrder);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(byteOrder);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
108	[BUG]  [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(bitsCachedSize,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCachedSize,  nextByte);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
109	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[nextByte]);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[nextByte]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[nextByte]);	  bitsOut    =(bytesCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
110	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[0]);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS[0]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[0]);	  bitsOut    =(bytesCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
111	[BUG]  [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCachedSize  &  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCachedSize  &  MASKS[count]);	  bitsOut    =(bytesCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
112	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKSSize;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKSSize;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKSSize;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
113	[BUG]  [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  read(nextByte,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
114	[BUG]  [BUGGY]  InputStream  in  =  readBits(nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  InputStream  in  =  readBits(nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(nextByte);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
115	[BUG]  [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readInt(bitsCachedSize,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
116	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
117	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count])+  MASKS[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
118	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  +  1]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  +  1]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
119	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[1]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[1]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[1]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
120	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  >=  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
121	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
122	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
123	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))&  MASKS[count];  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  1))&  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
124	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))&  MASKS[MAXIMUM_CACHE_SIZE];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (bitsCachedSize  -  count))&  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
126	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  (bitsCachedSize  -  count))&  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
127	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
128	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE));  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MAXIMUM_CACHE_SIZE));	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  ';'  expected	4	None	replace
129	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
130	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
131	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[0];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
132	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsCached);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
133	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  1);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
134	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  +  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
135	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE  -  1);	  bitsOut    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
136	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte  +  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  +  1);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
137	[BUG]  [BUGGY]  int  count  =  readBits(bitsCached);  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(bitsCached);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(bitsCached);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
138	[BUG]  [BUGGY]  int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);	  int    count    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
139	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
140	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[1];  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
142	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
143	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  1);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
144	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
145	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  8);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
146	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  2);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
147	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte  -  MAXIMUM_CACHE_SIZE);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
148	[BUG]  [BUGGY]  bitsOut  =  readBits(in,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  readBits(in,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(in,  nextByte);	  bitsOut    =    readBits(nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
149	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count]);	  bitsOut    =(bytesCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
150	[BUG]  [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[count];  [CE]  ']'  expected  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCachedSize  <  <  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
151	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  1];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count  -  1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count  -  1];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
152	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  1))&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  1))&  MASKS[count];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
153	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))&  MASKS[1];	  bitsOut    =(bitsCached    >>    (nextByte    -    count))    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
154	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
155	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKSSize;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
156	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >=  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
157	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
158	[BUG]  [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  +  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
159	[BUG]  [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  ==  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >=    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
160	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count],  MAXIMUM_CACHE_SIZE);	  bitsOut    =(bytesCached    &    MASKS[count]);    	non-compiled	[CE]  ')'  expected	1	None	replace
161	[BUG]  [BUGGY]  bitsOut  =  bitsCached  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =  bitsCached  &  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  bitsCached  &  MASKS[count];	  bitsOut    =    byteOrder    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
162	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1]);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count  -  1]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count  -  1]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
163	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[i]);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS[i]);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[i]);	  bitsOut    =(bitsCached    &    MASKS[count]);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
164	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)  <  <  (nextByte  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
165	[BUG]  [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(nextByte  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
166	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS_SIZE)  <  <  (bitsCachedSize  -  count);	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)    <    <    (bitsCachedSize    -    count);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
167	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
168	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  bitsOut);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  readBits(nextByte,  bitsOut);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  bitsOut);	  int    count    =    readBits(nextByte,    MAXIMUM_CACHE_SIZE);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
169	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
170	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  2;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
171	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
172	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsOut    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
173	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE)+    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
174	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[0];  [CE]  ']'  expected  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])&  MASKS[0];	  bitsOut    =(byteOrder    <    <    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  ']'  expected	20	None	replace
175	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  1;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  1;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  1;	  bitsOut    =(bytesCached    &    MAXIMUM_CACHE_SIZE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
176	[BUG]  [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(bitsCachedSize,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
177	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  1;	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
178	[BUG]  [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MASKS[count];	  long    count    =    Math.min(MAXIMUM_CACHE_SIZE,    nextByte);    bitsCached    +=    MAXIMUM_CACHE_SIZE;    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
179	[BUG]  [BUGGY]  bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached!=  MASKS[count])&  MASKS[count];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
180	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[1];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])&  MASKS[1];	  bitsOut    =(byteOrder    >>    MASKS[count])    &    MASKS[count];    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
181	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  MAXIMUM_CACHE_SIZE))  &  MASKS[count];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
182	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[0];  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[0];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[0];	  bitsOut    =(bitsCached    <    <    (bitsCachedSize    -    count))    &    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
183	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  1];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  1];  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)|  MASKS[count  +  1];	  bitsOut    =(bitsCached    <    <    8)&    MASKS[count];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
184	[BUG]  [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]                  AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.max(MAXIMUM_CACHE_SIZE,  nextByte);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
185	[BUG]  [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                    AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
186	[BUG]  [BUGGY]  in.close();  [CE]  reached  end  of  file  while  parsing  [FE]                      AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  in.close();  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	in.close();	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
187	[BUG]  [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]                        AssertionError    [CONTEXT]    if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;    [BUGGY]  InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);  [BUGGY]      final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	InputStream  in  =  readBits(in,  MAXIMUM_CACHE_SIZE);	      	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
