bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bytesCached  &  MASKS[count]);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MASKS[count]);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
2	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)+  MASKS[count];	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
3	[BUG]  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bitsCached  &  MASKS[count]);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  &  MASKS[count]);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
4	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE));  [CE]  ';'  expected  [FE]          AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE));  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE));	}  	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bytesCached  &  MAXIMUM_CACHE_SIZE)  <  <  (bitsCachedSize  -  count);	}  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]    [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]    [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	  	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
7	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
8	[BUG]  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte,  MAXIMUM_CACHE_SIZE);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
9	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[count];  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  (bitsCachedSize  -  count))  &  MASKS[count];	}  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  count  =  readBits(nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  int  count  =  readBits(nextByte);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	int  count  =  readBits(nextByte);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
11	[BUG]  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =  byteOrder  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  byteOrder  &  MASKS[count];	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
12	[BUG]  [BUGGY]  bitsOut  =  readBits(nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =  readBits(nextByte);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =  readBits(nextByte);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
13	[BUG]  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count];  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bitsCached  <  <  8)&  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  <  <  8)&  MASKS[count];	}  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(bitsCached  >>  (nextByte  -  count))  &  MASKS[count];	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
15	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(byteOrder  >>  MASKS[count])  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >>  MASKS[count])  &  MASKS[count];	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
16	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsOut  +=  MAXIMUM_CACHE_SIZE;	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
17	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
18	[BUG]  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])  &  MASKS[count];  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(byteOrder  >=  MASKS[count])  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  >=  MASKS[count])  &  MASKS[count];	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
19	[BUG]  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	long  count  =  Math.min(MAXIMUM_CACHE_SIZE,  nextByte);  bitsCached  +=  MAXIMUM_CACHE_SIZE;	}  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
20	[BUG]  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])  &  MASKS[count];  [CE]  ']'  expected  [FE]                AssertionError  [CONTEXT]  if  (nextByte  <  0)  {  return  nextByte;  }  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsCached  |=  (nextByte  <<  bitsCachedSize);  }  else  {  bitsCached  <<=  8;  bitsCached  |=  nextByte;  }  bitsCachedSize  +=  8;  [BUGGY]  bitsOut  =(byteOrder  <  <  MASKS[count])  &  MASKS[count];  [BUGGY]    final  long  bitsOut;  if  (byteOrder  ==  ByteOrder.LITTLE_ENDIAN)  {  bitsOut  =  (bitsCached  &  MASKS[count]);  bitsCached  >>>=  count;  }  else  {  bitsOut  =  (bitsCached  >>  (bitsCachedSize  -  count))  &  MASKS[count];  }  bitsCachedSize  -=  count;  [CLASS]  BitInputStream  [METHOD]  readBits  [RETURN_TYPE]  long  final  int  count  [VARIABLES]  ByteOrder  byteOrder  boolean  long[]  MASKS  InputStream  in  int  MAXIMUM_CACHE_SIZE  bitsCachedSize  count  long  bitsCached  bitsOut  nextByte  	projects/Compress40/src/main/java/org/apache/commons/compress/utils/BitInputStream.java	0.4082482904638631	97	97	2	replace	bitsOut  =(byteOrder  <  <  MASKS[count])  &  MASKS[count];	}  	non-compiled	[CE]  ']'  expected	11	None	replace
