bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  arg.equals(commandLine))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  arg.equals(commandLine))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  arg.equals(commandLine))  {  return  false;  }	  ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]  ||  commandLine.equals(optionMap.keySet()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine.equals(optionMap.keySet()))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals(optionMap.keySet()))  {  return  false;  }	  ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]  ||  commandLine.equals(arg))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine.equals(arg))  {  return  true;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals(arg))  {  return  true;  }	  ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  Option  option  =  optionsMap.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.keySet().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.keySet().iterator();	  Option    option    =    optionsMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
5	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg).values().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg).values().iterator();	  Option    option    =    optionsMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
6	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  name);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg,  name);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  name);	  Option    option    =    optionMap.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  description  -  1);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg,  description  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  description  -  1);	  Option    option    =    optionMap.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");	  throw    new    CommandLinesException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
9	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(commandLine);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.get(commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(commandLine);	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
10	[BUG]  [BUGGY]  Option  optionMap  =  options.get(arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  options.get(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  options.get(arg);	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
11	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.get(arg)+  1;  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(arg)+  1;	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
12	[BUG]  [BUGGY]  ||  commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine  ==  null)  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine  ==  null)  {  return  false;  }	  if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  final  Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  final  Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }	  final    Option    option    =    optionMap.get(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( " ",  arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( " ",  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( " ",  arg);	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( " ")  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( " ")  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( " ")	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( " "));  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( " "));  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( " "));	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.keySet().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.keySet().iterator();	  Option    option    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg).values().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.getOption(arg).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.getOption(arg).values().iterator();	  Option    option    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(commandLine).iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.getOption(commandLine).iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.getOption(commandLine).iterator();	  Option    option    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "Can  not  find  command  line: "  +  commandLine);	  throw    new    CommandLinesException(   "Can    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);	  throw    new    CommandLinesException(   "Can    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg,  description);	  throw    new    CommandLinesException(   "Can    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap  ==  null)?  null  :  optionMap.values().iterator();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
24	[BUG]  [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.keySet().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap  ==  null)?  null  :  optionMap.keySet().iterator();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
25	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.getOptionMap(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.getOptionMap(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.getOptionMap(arg);	  Option    optionMap    =    optionMap.getOptionMap();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
26	[BUG]  [BUGGY]  Option  optionMap  =  options.getOptionMap();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  options.getOptionMap();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  options.getOptionMap();	  Option    optionMap    =    optionMap.getOptionMap();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
27	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.cloneOptionMap();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.cloneOptionMap();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.cloneOptionMap();	  Option    optionMap    =    optionMap.getOptionMap();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
28	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg  -  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg  -  1);	  Option    option    =    optionMap.getOption(commandLine    -    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
29	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine  +  1);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine  +  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine  +  1);	  Option    option    =    optionMap.getOption(commandLine    -    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
30	[BUG]  [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  commandLine);	  throw    new    CommandLineException(   "Failed    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
31	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);	  throw    new    CommandLineException(   "Failed    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
32	[BUG]  [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg,  description);	  throw    new    CommandLineException(   "Failed    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
33	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(commandLine,  arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(commandLine,  arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(commandLine,  arg);	  Option    option    =    optionsMap.get(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(commandLine  -  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(commandLine  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(commandLine  -  1);	  Option    option    =    optionsMap.get(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
35	[BUG]  [BUGGY]  ||  optionMap.containsKey(commandLine))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  optionMap.containsKey(commandLine))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  optionMap.containsKey(commandLine))  {  return  false;  }	  ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
36	[BUG]  [BUGGY]  ||  options.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  options.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  options.containsKey(arg))  {  return  false;  }	  ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
37	[BUG]  [BUGGY]  ||  optionMap.containsValue(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  optionMap.containsValue(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  optionMap.containsValue(arg))  {  return  false;  }	  ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
38	[BUG]  [BUGGY]  final  String  commandLine  =  optionMap.get(commandLine);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  final  String  commandLine  =  optionMap.get(commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  String  commandLine  =  optionMap.get(commandLine);	  final    String    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
39	[BUG]  [BUGGY]  final  String  commandLine  =  optionMap.get(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  final  String  commandLine  =  optionMap.get(arg)+  1;  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  String  commandLine  =  optionMap.get(arg)+  1;	  final    String    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
40	[BUG]  [BUGGY]  final  String  commandLine  =  optionMap.get(commandline);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  final  String  commandLine  =  optionMap.get(commandline);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  String  commandLine  =  optionMap.get(commandline);	  final    String    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
41	[BUG]  [BUGGY]  Option  option  =  optionMap.containsKey(arg);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.containsKey(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.containsKey(arg);	  Option    option    =    optionMap.tailMap(arg);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
42	[BUG]  [BUGGY]  Option  option  =  optionMap.getValue(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getValue(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getValue(arg);	  Option    option    =    optionMap.getKey(arg);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
43	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  commandLine);	  throw    new    CommandLineException(   "Could    not    instantiate    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
44	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);	  throw    new    CommandLineException(   "Could    not    instantiate    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
45	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg,  description);	  throw    new    CommandLineException(   "Could    not    instantiate    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
46	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option  ==  null)  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine);  if(option  ==  null)  {  return  false;  }	  Option    option    =    optionMap.getOption(commandLine);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
47	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).keySet().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg).keySet().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).keySet().iterator();	  Option    option    =    optionMap.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine,  arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(commandLine,  arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine,  arg);	  Option    option    =    optionMap.get(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine  -  1);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(commandLine  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine  -  1);	  Option    option    =    optionMap.get(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line: "  +  commandLine);	  throw    new    CommandLineException(   "Could    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
51	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);	  throw    new    CommandLineException(   "Could    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
52	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg,  description);	  throw    new    CommandLineException(   "Could    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
53	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg,  commandLine);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  commandLine);	  Option    option    =    optionMap.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg  +  1);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg  +  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  arg  +  1);	  Option    option    =    optionMap.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg,  description);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg,  description);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  arg,  description);	  Option    option    =    optionMap.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
56	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(commandLine  +  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(commandLine  +  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(commandLine  +  1);	  Option    option    =    optionsMap.get(arg    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
57	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg  -  1);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg  -  1);	  Option    option    =    optionsMap.get(arg    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
58	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.get(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
59	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.get(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
60	[BUG]  [BUGGY]  Option  option  =  optionMap.narrowKey(arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.narrowKey(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.narrowKey(arg);	  Option    option    =    optionMap.narrow(arg);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
61	[BUG]  [BUGGY]  Option  option  =  optionMap.narrow(commandLine);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.narrow(commandLine);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.narrow(commandLine);	  Option    option    =    optionMap.narrow(arg);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
62	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  commandLine);	  throw    new    CommandLineException(   "Could    not    find    command    line    for    option:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
63	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);	  throw    new    CommandLineException(   "Could    not    find    command    line    for    option:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
64	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).keys().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg).keys().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).keys().iterator();	  Option    option    =    optionMap.get(arg).values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).description.values().iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg).description.values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).description.values().iterator();	  Option    option    =    optionMap.get(arg).values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine).values().iterator();  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(commandLine).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine).values().iterator();	  Option    option    =    optionMap.get(arg).values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");	  throw    new    CommandLineException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
68	[BUG]  [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);	  throw    new    CommandLineException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
69	[BUG]  [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
70	[BUG]  [BUGGY]  return(optionMap  ==  null)?  null  :  options.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap  ==  null)?  null  :  options.values().iterator().next();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap  ==  null)?  null  :  options.values().iterator().next();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
71	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.keySet().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.keySet().iterator();	  Option    optionMap    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
72	[BUG]  [BUGGY]  Option  optionMap  =  options.values().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  options.values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  options.values().iterator();	  Option    optionMap    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
73	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.keys().iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.keys().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.keys().iterator();	  Option    optionMap    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
74	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  IllegalStateException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
75	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(arg));  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(arg));  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(arg));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
76	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(commandLine));  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(commandLine));  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(commandLine));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
77	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine  +  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(commandLine  +  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine  +  1);	  Option    option    =    optionMap.get(arg    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
78	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg)+  2;  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg)+  2;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg)+  2;	  Option    option    =    optionMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg)/  1;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg)/  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg)/  1;	  Option    option    =    optionMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
80	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg)-  1;  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg)-  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg)-  1;	  Option    option    =    optionMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
81	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg)+  2;  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg)+  2;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg)+  2;	  Option    option    =    optionMap.getOption(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
82	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg)/  1;  [CE]  illegal  start  of  expression  [FE]                        OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg)/  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg)/  1;	  Option    option    =    optionMap.getOption(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
83	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine)+  1;  [CE]  illegal  start  of  expression  [FE]                          OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine)+  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine)+  1;	  Option    option    =    optionMap.getOption(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
84	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg  -  1  +  1);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg  -  1  +  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg  -  1  +  1);	  Option    option    =    optionMap.get(arg    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
85	[BUG]  [BUGGY]  ||  commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine!=  null)  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine!=  null)  {  return  false;  }	  if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.getOption(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
87	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.getOption(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
88	[BUG]  [BUGGY]  ||  commandLine.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine.equals( "- "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals( "- "))  {  return  false;  }	  ||    commandLine.equals(   "       "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg)+  2;  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg)+  2;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg)+  2;	  Option    option    =    optionsMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
90	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg)/  1;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg)/  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg)/  1;	  Option    option    =    optionsMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
91	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg)-  1;  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg)-  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg)-  1;	  Option    option    =    optionsMap.get(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  arg.getMessage());  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  arg.getMessage());  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  IllegalArgumentException( " "  +  arg.getMessage());	  throw    new    IllegalArgumentException(   "   ".equals(arg));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
93	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");	  throw    new    CommandLinesException(   "The    command    line    is    not    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.   "  +  arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.   "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.   "  +  arg);	  throw    new    CommandLinesException(   "The    command    line    is    not    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  if(commandLine.equals(arg)||  commandLine.equals(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine.equals(arg)||  commandLine.equals(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine.equals(arg)||  commandLine.equals(arg))  {  return  false;  }	  if(commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }	  if(optionMap.containsKey(arg)||    options.canProcess(commandLine,    arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
97	[BUG]  [BUGGY]  Option  option  =  options.getOption(commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.getOption(commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.getOption(commandLine);	  if(optionMap.containsKey(arg)||    options.canProcess(commandLine,    arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.getOption(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.getOption(arg);	  if(optionMap.containsKey(arg)||    options.canProcess(commandLine,    arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
99	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  null);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg,  null);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  null);	  Option    option    =    optionMap.getOption(commandLine,    null);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
100	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  this);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  this);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  this);	  Option    option    =    optionMap.getOption(commandLine,    null);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Thread.currentThread().setContextClassLoader(commandLine);	  if(commandLine    ==    null    ||    commandLine.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  cannot  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "The  command  line  cannot  be  null. ");	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
103	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  is  not  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  is  not  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "The  command  line  is  not  a  valid  command  line. ");	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
104	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( " ")  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( " ")  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( " ")	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
105	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
106	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ",  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ",  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ",  arg);	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
107	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "]. ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "]. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "]. ");	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
108	[BUG]  [BUGGY]  Option  commandLine  =  optionMap.get(commandLine);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  commandLine  =  optionMap.get(commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionMap.get(commandLine);	  Option    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
109	[BUG]  [BUGGY]  Option  commandLine  =  optionMap.get(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  commandLine  =  optionMap.get(arg)+  1;  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionMap.get(arg)+  1;	  Option    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  Option  commandLine  =  optionMap.get(arg  +  1);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  commandLine  =  optionMap.get(arg  +  1);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionMap.get(arg  +  1);	  Option    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  ||  commandLine.equals( "null "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine.equals( "null "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals( "null "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "null   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
112	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");	  throw    new    CommandLinesException(   "The    command    line    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
113	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Please  check  that  the  command  line  is  deprecated. ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Please  check  that  the  command  line  is  deprecated. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Please  check  that  the  command  line  is  deprecated. ");	  throw    new    CommandLinesException(   "The    command    line    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
114	[BUG]  [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  commandLine);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  commandLine);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  commandLine);	  throw    new    CommandLineException(   "Unable    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
115	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);	  throw    new    CommandLineException(   "Unable    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
116	[BUG]  [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg,  description);	  throw    new    CommandLineException(   "Unable    to    parse    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
117	[BUG]  [BUGGY]  return(optionMap.values().containsKey(arg))?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.values().containsKey(arg))?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.values().containsKey(arg))?  null  :  optionMap.values().iterator();	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
118	[BUG]  [BUGGY]  return(optionMap.values().iterator())?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.values().iterator())?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.values().iterator())?  null  :  optionMap.values().iterator();	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
119	[BUG]  [BUGGY]  return(optionMap.containsKey(commandLine))?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.containsKey(commandLine))?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.containsKey(commandLine))?  null  :  optionMap.values().iterator();	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
120	[BUG]  [BUGGY]  return(optionMap.keySet().containsKey(arg))?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.keySet().containsKey(arg))?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.keySet().containsKey(arg))?  null  :  optionMap.values().iterator();	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
121	[BUG]  [BUGGY]  return(optionMap.values().iterator());  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.values().iterator());  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.values().iterator());	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
122	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Try  again. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  cannot  be  null.  Try  again. ");	  throw    new    CommandLinesException(   "The    command    line    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
123	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(arg  +  1);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.get(arg  +  1);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(arg  +  1);	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
124	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(arg  -  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.get(arg  -  1);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(arg  -  1);	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( " "  +  arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( " "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( " "  +  arg);	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
126	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( ", ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( ", ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( ", ");	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
127	[BUG]  [BUGGY]  Option  option  =  optionMap.values().tailMap(arg);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.values().tailMap(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.values().tailMap(arg);	  Option    option    =    optionMap.tailMap(arg);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
128	[BUG]  [BUGGY]  Option  option  =  optionMap.keySet();  [CE]  illegal  start  of  expression  [FE]                        OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.keySet();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.keySet();	  Option    option    =    optionMap.tailMap(arg);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
129	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( " "  +  arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( " "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( " "  +  arg);	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
130	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( "The  command  line  must  not  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( "The  command  line  must  not  be  null. ");	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
131	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( " ",  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLineException( " ",  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( " ",  arg);	  Throwables.throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
132	[BUG]  [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");	  throw    new    CommandLineException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
133	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.values().tailMap(arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.values().tailMap(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.values().tailMap(arg);	  Option    optionMap    =    optionMap.tailMap(arg);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
134	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.keySet();  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.keySet();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.keySet();	  Option    optionMap    =    optionMap.tailMap(arg);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
135	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg);  if(option  ==  null  ||  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.get(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
136	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg)+  1L;  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg)+  1L;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg)+  1L;	  Option    option    =    optionMap.getOption(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
137	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).options().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg).options().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).options().iterator();	  Option    option    =    optionMap.get(arg).values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
138	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  does  not  exist. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  does  not  exist. ");	  throw    new    CommandLinesException(   "The    command    line    is    not    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
139	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.   "  +  arg);	  throw    new    CommandLinesException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
140	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line.  Must  be  a  valid  command  line. ");	  throw    new    CommandLinesException(   "The    command    line    must    be    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
141	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg  -  2);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg  -  2);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg  -  2);	  Option    option    =    optionMap.get(arg    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
142	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + ", ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + ", ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + ", ");	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
143	[BUG]  [BUGGY]  ThrowablesException.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ThrowablesException.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	ThrowablesException.throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
144	[BUG]  [BUGGY]  if(commandLine!=  null  &&  commandLine.equals( "   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine!=  null  &&  commandLine.equals( "   "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  &&  commandLine.equals( "   "))  {  return  false;  }	  if(commandLine!=    null    ||    commandLine.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
145	[BUG]  [BUGGY]  Option  option  =  optionsMap.values().get(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.values().get(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.values().get(arg);	  Option    option    =    optionsMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
146	[BUG]  [BUGGY]  return(optionMap  ==  null)?  null  :  options.values().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap  ==  null)?  null  :  options.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap  ==  null)?  null  :  options.values().iterator();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
147	[BUG]  [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( "- "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  ||  commandLine.equals( "- "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
148	[BUG]  [BUGGY]  ||  optionMap.containsKey(arg))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  optionMap.containsKey(arg))  {  return  true;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  optionMap.containsKey(arg))  {  return  true;  }	  ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
149	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg  +  2);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionsMap.get(arg  +  2);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg  +  2);	  Option    option    =    optionsMap.get(arg    +    1);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
150	[BUG]  [BUGGY]  optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }	  if(optionMap.containsKey(arg)||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
151	[BUG]  [BUGGY]  optionMap.containsKey(arg)||  options.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  optionMap.containsKey(arg)||  options.containsKey(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	optionMap.containsKey(arg)||  options.containsKey(arg))  {  return  false;  }	  if(optionMap.containsKey(arg)||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
152	[BUG]  [BUGGY]  optionMap.containsKey(arg))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  optionMap.containsKey(arg))  {  return  true;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	optionMap.containsKey(arg))  {  return  true;  }	  optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
153	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  arg.toString());  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  arg.toString());  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  IllegalArgumentException( " "  +  arg.toString());	  throw    new    IllegalArgumentException(   "   ".equals(arg));    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
154	[BUG]  [BUGGY]  Option  option  =  optionMap.values().narrow(arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.values().narrow(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.values().narrow(arg);	  Option    option    =    optionMap.narrow(arg);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
155	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg  +  2);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg  +  2);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg  +  2);	  Option    option    =    optionMap.get(arg    +    1);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
156	[BUG]  [BUGGY]  ||  commandLine.startsWith(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||  commandLine.startsWith(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.startsWith(arg))  {  return  false;  }	  ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
157	[BUG]  [BUGGY]  final  String  commandLine  =  optionMap.getKey(arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  final  String  commandLine  =  optionMap.getKey(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  String  commandLine  =  optionMap.getKey(arg);	  final    String    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
158	[BUG]  [BUGGY]  Option  option  =  options.getOption(commandLine).values().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.getOption(commandLine).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.getOption(commandLine).values().iterator();	  Option    option    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
159	[BUG]  [BUGGY]  Option  option  =  options.get(arg).values().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.get(arg).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.get(arg).values().iterator();	  Option    option    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
160	[BUG]  [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( "null "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( "null "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  ||  commandLine.equals( "null "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "null   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
161	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "true "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "true "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.equals( "true "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "null   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
162	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.length()!=  0)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine  ==  null  ||  commandLine.length()!=  0)  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.length()!=  0)  {  return  false;  }	  if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
163	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.length()  ==  0)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine  ==  null  ||  commandLine.length()  ==  0)  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.length()  ==  0)  {  return  false;  }	  if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
164	[BUG]  [BUGGY]  if(commandLine!=  null  &&  commandLine.equals(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine!=  null  &&  commandLine.equals(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  &&  commandLine.equals(arg))  {  return  false;  }	  if(commandLine!=    null    ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
165	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( ". "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( ". "))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.equals( ". "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "-   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
166	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  description)+  1;  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg,  description)+  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  description)+  1;	  Option    option    =    optionMap.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
167	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  is  deprecated. ");  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  is  deprecated. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line.  Please  check  that  the  command  line  is  deprecated. ");	  throw    new    CommandLinesException(   "The    command    line    is    not    a    valid    command    line.   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
168	[BUG]  [BUGGY]  return(optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return(optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.values().iterator();	  return(optionMap.containsKey(arg))?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
169	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg)-  1;  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg)-  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg)-  1;	  Option    option    =    optionMap.getOption(arg)+    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
170	[BUG]  [BUGGY]  ||(commandLine!=  null  &&  commandLine.equals( " ")))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||(commandLine!=  null  &&  commandLine.equals( " ")))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||(commandLine!=  null  &&  commandLine.equals( " ")))  {  return  false;  }	  if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
171	[BUG]  [BUGGY]  ||(commandLine!=  null  &&  commandLine.length()  >  0))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  ||(commandLine!=  null  &&  commandLine.length()  >  0))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||(commandLine!=  null  &&  commandLine.length()  >  0))  {  return  false;  }	  if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
172	[BUG]  [BUGGY]  Throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");	  throw    new    CommandLinesException(   "The    command    line    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
173	[BUG]  [BUGGY]  return  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  return  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return  new  CommandLinesException( "The  command  line  cannot  be  null. ");	  throw    new    CommandLinesException(   "The    command    line    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
174	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.getKey(arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.getKey(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.getKey(arg);	  Option    optionMap    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
175	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  CommandLinesException( "The  command  line  must  not  be  null. ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( "The  command  line  must  not  be  null. ");	  Throwables.throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
176	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(arg).values().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  optionMap  =  optionMap.get(arg).values().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(arg).values().iterator();	  Option    optionMap    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
177	[BUG]  [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  name);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  name);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "Can  not  find  command  line: "  +  name);	  throw    new    CommandLinesException(   "Can    not    find    command    line:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
178	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg,  description);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg,  description);	  throw    new    CommandLineException(   "Could    not    find    command    line    for    option:   "    +    arg);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
179	[BUG]  [BUGGY]  Return(optionMap  ==  null)?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Return(optionMap  ==  null)?  null  :  optionMap.values().iterator();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Return(optionMap  ==  null)?  null  :  optionMap.values().iterator();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
180	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg.length  -  1);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg.length  -  1);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg.length  -  1);	  Option    option    =    optionMap.get(arg    -    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
181	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
182	[BUG]  [BUGGY]  Option  commandLine  =  optionsMap.get(arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  commandLine  =  optionsMap.get(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionsMap.get(arg);	  Option    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
183	[BUG]  [BUGGY]  Option  commandLine  =  optionMap.getKey(arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  commandLine  =  optionMap.getKey(arg);  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionMap.getKey(arg);	  Option    commandLine    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
184	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg)+  1;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg)+  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  arg)+  1;	  Option    option    =    optionMap.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
185	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  arg  + "] ");  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  arg  + "] ");  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  arg  + "] ");	  throw    new    CommandLinesException(   "The    command    line    must    be    in    the    range    [   "    +    commandLine    +   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
186	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg.toString());  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg.toString());  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg.toString());	  Option    option    =    optionMap.getOption(commandLine    -    1);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
187	[BUG]  [BUGGY]  Option  option  =  optionMap.getKey(arg)+  1;  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getKey(arg)+  1;  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getKey(arg)+  1;	  Option    option    =    optionMap.getKey(arg);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
188	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg);  if(option!=  null  &&  optionMap.containsKey(arg))  {  return  false;  }	  Option    option    =    optionMap.getOption(arg);    if(option!=    null    ||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
189	[BUG]  [BUGGY]  Return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Return(optionMap  ==  null)?  null  :  optionMap.values().iterator().next();	  return(optionMap!=    null)?    null    :    optionMap.values().iterator().next();    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
190	[BUG]  [BUGGY]  if(optionMap.containsKey(arg)&&  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  if(optionMap.containsKey(arg)&&  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]      }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(optionMap.containsKey(arg)&&  optionMap.containsKey(arg))  {  return  false;  }	  if(optionMap.containsKey(arg)||    optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
191	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).commandLines().iterator();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.get(arg).commandLines().iterator();  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).commandLines().iterator();	  Option    option    =    optionMap.get(arg).values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
192	[BUG]  [BUGGY]  Option  option  =  optionMap.keySet().narrow(arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  optionMap.keySet().narrow(arg);  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.keySet().narrow(arg);	  Option    option    =    optionMap.narrow(arg);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
193	[BUG]  [BUGGY]  Option  option  =  options.get(arg);  if(option!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {      [BUGGY]  Option  option  =  options.get(arg);  if(option!=  null)  {  return  false;  }  [BUGGY]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.get(arg);  if(option!=  null)  {  return  false;  }	  Option    option    =    optionMap.get(arg);    if(option    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
