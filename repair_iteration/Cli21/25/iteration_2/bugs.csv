bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  commandLine.equals( "   "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  ||  commandLine.equals( "   "))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals( "   "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "null "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "null "))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.equals( "null "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
3	[BUG]  [BUGGY]  Option  option  =  optionMap.keySet().iterator();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.keySet().iterator();  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.keySet().iterator();	      Option    option    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.values().iterator();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  options.values().iterator();  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  options.values().iterator();	      Option    option    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg).values().iterator();  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg).values().iterator();  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg).values().iterator();	      Option    option    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if(commandLine.equals(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine.equals(arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine.equals(arg))  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null)  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine!=  null)  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null)  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  ||  commandLine.equals(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  ||  commandLine.equals(arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  commandLine.equals(arg))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  Option  commandLine  =  optionMap.get(arg);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  commandLine  =  optionMap.get(arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  commandLine  =  optionMap.get(arg);	  if(commandLine    ==    null    ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  Throwables.throw  new  CommandLinesException( " ");  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Throwables.throw  new  CommandLinesException( " ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLinesException( " ");	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
12	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  a  valid  command  line. ");	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  is  not  a  valid  command  line. ");	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  Option  option  =  optionMap.get(commandLine);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(commandLine);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(commandLine);	      Option    option    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg)+  1;  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg)+  1;  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg)+  1;	      Option    option    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg  +  1);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg  +  1);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg  +  1);	      Option    option    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  arg);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  arg);	      Option    option    =    optionMap.getOption(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  null);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(commandLine,  null);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine,  null);	      Option    option    =    optionMap.getOption(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(arg,  description);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg,  description);	      Option    option    =    optionMap.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                  OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(arg)+  1;  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg)+  1;	      Option    option    =    optionMap.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  if(option!=  null)  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine);  if(option!=  null)  {  return  false;  }	      Option    option    =    optionMap.getOption(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
22	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option  ==  null)  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg);  if(option  ==  null)  {  return  false;  }	      Option    option    =    optionMap.getOption(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
23	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(commandLine);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionsMap.get(commandLine);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(commandLine);	      Option    option    =    optionsMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
24	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg  +  1);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionsMap.get(arg  +  1);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg  +  1);	      Option    option    =    optionsMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	optionMap.containsKey(arg))  {  return  false;  }	  if(!optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.get(arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  optionMap  =  optionMap.get(arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.get(arg);	  if(!optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
27	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(arg));  [CE]  illegal  start  of  expression  [FE]                  OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(arg));  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  IllegalArgumentException( " ".equals(arg));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	||  optionMap.containsKey(arg))  {  return  false;  }	      if(optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.tailMap(arg);  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  optionMap  =  optionMap.tailMap(arg);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.tailMap(arg);	      if(optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  Option  option  =  optionMap.tailMap(arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.tailMap(arg);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.tailMap(arg);	      if(optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg);  if(option  ==  null)  {  return  false;  }	      Option    option    =    optionMap.get(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  final  Option  option  =  optionMap.get(arg);  if(option!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  final  Option  option  =  optionMap.get(arg);  if(option!=  null)  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  Option  option  =  optionMap.get(arg);  if(option!=  null)  {  return  false;  }	      Option    option    =    optionMap.get(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  CommandLineException( " ");  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Throwables.throw  new  CommandLineException( " ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Throwables.throw  new  CommandLineException( " ");	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
36	[BUG]  [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Failed  to  parse  command  line: "  +  arg);	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
37	[BUG]  [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "The  command  line  must  be  a  valid  command  line. ");	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  optionMap  =  optionMap.values().iterator();  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.values().iterator();	      if(optionMap.containsKey(arg))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  final  String  commandLine  =  optionMap.get(arg);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  final  String  commandLine  =  optionMap.get(arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	final  String  commandLine  =  optionMap.get(arg);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( " "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine!=  null  ||  commandLine.equals( " "))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  ||  commandLine.equals( " "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine  ==  null  ||  commandLine.equals( "- "))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine  ==  null  ||  commandLine.equals( "- "))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(   "   "))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
42	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line: "  +  arg);	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  instantiate  command  line: "  +  arg);	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(arg)+  1;  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionsMap.get(arg)+  1;  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.get(arg)+  1;	      Option    option    =    optionsMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  Option  optionMap  =  optionMap.getOptionMap();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  optionMap  =  optionMap.getOptionMap();  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  optionMap  =  optionMap.getOptionMap();	  if(!optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg  -  1);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg  -  1);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg  -  1);	      Option    option    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  >=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg);  if(option  >=  null)  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg);  if(option  >=  null)  {  return  false;  }	      Option    option    =    optionMap.get(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
48	[BUG]  [BUGGY]  Option  option  =  optionsMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionsMap.values().iterator();  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionsMap.values().iterator();	      Option    option    =    optionMap.values().iterator();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  cannot  be  null. ");	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "Can  not  find  command  line: "  +  arg);	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  if(optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(optionMap.containsKey(arg)||  optionMap.containsKey(arg))  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  if(optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(optionMap.containsKey(arg)||  options.canProcess(commandLine,  arg))  {  return  false;  }	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine  -  1);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(commandLine  -  1);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(commandLine  -  1);	      Option    option    =    optionMap.getOption(commandLine);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
54	[BUG]  [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLinesException( "The  command  line  must  be  in  the  range  [ "  +  commandLine  + "] ");	  throw    new    CommandLinesException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  Option  option  =  optionMap.get(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.get(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.get(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }	      Option    option    =    optionMap.get(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getOption(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getOption(arg);  if(option!=  null  ||  optionMap.containsKey(arg))  {  return  false;  }	      Option    option    =    optionMap.getOption(arg);    if(option!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
57	[BUG]  [BUGGY]  Option  option  =  optionMap.getKey(arg);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.getKey(arg);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.getKey(arg);	      Option    option    =    optionMap.get(arg);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
58	[BUG]  [BUGGY]  if(commandLine!=  null  ||  commandLine.equals(arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(commandLine!=  null  ||  commandLine.equals(arg))  {  return  false;  }  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(commandLine!=  null  ||  commandLine.equals(arg))  {  return  false;  }	  if(commandLine    ==    null    ||    commandLine.equals(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  return(optionMap!=  null)?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  return(optionMap!=  null)?  null  :  optionMap.values().iterator();  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap!=  null)?  null  :  optionMap.values().iterator();	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  return(optionMap!=  null)?  null  :  optionMap.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  return(optionMap!=  null)?  null  :  optionMap.values().iterator().next();  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap!=  null)?  null  :  optionMap.values().iterator().next();	  return    false;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Unable  to  parse  command  line: "  +  arg);	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	throw  new  CommandLineException( "Could  not  find  command  line  for  option: "  +  arg);	  throw    new    CommandLineException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  return(optionMap.containsKey(arg))?  null  :  optionMap.values().iterator();  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  return(optionMap.containsKey(arg))?  null  :  optionMap.values().iterator();  [BUGGY]    }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	return(optionMap.containsKey(arg))?  null  :  optionMap.values().iterator();	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
64	[BUG]  [BUGGY]  if(optionMap.canProcess(commandLine,  arg))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  if(optionMap.canProcess(commandLine,  arg))  {  return  false;  }  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	if(optionMap.canProcess(commandLine,  arg))  {  return  false;  }	      if(optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  Option  option  =  optionMap.narrow(arg);  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    final  String  arg)  {  if  (arg  ==  null)  {  return  false;  }  if  (optionMap.containsKey(arg))  {    [BUGGY]  Option  option  =  optionMap.narrow(arg);  [BUGGY]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();  if  (option.canProcess(commandLine,  arg))  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	124	124	1	replace	Option  option  =  optionMap.narrow(arg);	      if(optionMap.containsKey(arg))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
