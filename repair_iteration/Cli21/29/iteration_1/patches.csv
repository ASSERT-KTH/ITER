bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.next();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =(Option)option.next();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.next();	      Option    commandLine    =(Option)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  final  Option  commandLine  =(Option)iter.next();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  final  Option  commandLine  =(Option)iter.next();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =(Option)iter.next();	      Option    commandLine    =(Option)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
4	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  description)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  description)&&  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  description)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
5	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArgument();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  final  Option  commandLine  =  option.getArgument();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArgument();	      final    Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
6	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getDescription();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  final  Option  commandLine  =  option.getDescription();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getDescription();	      final    Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
7	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg();  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  final  Option  commandLine  =  option.getArg();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg();	      final    Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
8	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getCommandLine(arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(arg);	      Option    commandLine    =    option.getCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  description);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(command,  description);	      Option    commandLine    =    option.getCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(commandLine);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  Option  option  =  option.getOption(description);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(description);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(description);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  Option  option  =  option.getOption(defaultName);  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(defaultName);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(defaultName);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
13	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
14	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasDescription())  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
15	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasMoreArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  Option  commandLine  =  option.getDescription();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getDescription();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getDescription();	      Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  optionMap.getOption(arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(arg);	      Option    option    =    option.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
22	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine,  arg);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(commandLine,  arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine,  arg);	      Option    option    =    option.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  Option  option  =  option.getOption(arg,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(arg,  description);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(arg,  description);	      Option    option    =    option.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  description);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(),  description);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(),  description);	      Option    option    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
25	[BUG]  [BUGGY]  if  (commandLine.canProcess(option,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (commandLine.canProcess(option,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (commandLine.canProcess(option,  arg))  {	  if    (option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  if  (option.canProcess(arg,  null))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option.canProcess(arg,  null))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(arg,  null))  {	  if    (option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  if  (option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {	  if    (option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  if  (option.canProcess(commandLine,  null)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option.canProcess(commandLine,  null)&&  options.hasArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(commandLine,  null)&&  options.hasArg())  {	  if    (option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  null))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(commandLine,  null))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  null))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(arg);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getParameterType(arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(arg);	      Option    commandLine    =    option.getParameterType(0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentType(0);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgumentType(0);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentType(0);	      Option    commandLine    =    option.getParameterType(0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
35	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(1);  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getParameterType(1);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(1);	      Option    commandLine    =    option.getParameterType(0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
36	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(option);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  optionMap.getOption(option);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(option);	      Option    option    =    option.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
38	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg1();  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArg1();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg1();	      Option    commandLine    =    option.getArgument();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
39	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(command);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(command);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(command);	      Option    commandLine    =    option.getCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  if  (option!=  null  &&  option.canProcess(commandLine,  null))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option!=  null  &&  option.canProcess(commandLine,  null))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&  option.canProcess(commandLine,  null))  {	  if    (option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
44	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg);  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getCommandLine(arg);	      final    Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
45	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(arg,  commandLine)||  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
46	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
47	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasOption(option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.hasOption(option))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  if  (option!=  null  &&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option!=  null  &&  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&  option.canProcess(commandLine,  arg))  {	  if    (option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if  (option!=  null  &&  option.canProcess(arg,  commandLine))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option!=  null  &&  option.canProcess(arg,  commandLine))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&  option.canProcess(arg,  commandLine))  {	  if    (option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
54	[BUG]  [BUGGY]  Option  option  =  option.cloneOption();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.cloneOption();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.cloneOption();	      Option    option    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  Option  option  =  option.getOption(this);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  option  =  option.getOption(this);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(this);	      Option    option    =    option.getOption();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  option))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(commandLine,  option))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  option))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  if  (!option.canProcess(arg,  commandLine))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(arg,  commandLine))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(arg,  commandLine))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  Option  commandLine  =(Option)iter.getValue();  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =(Option)iter.getValue();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)iter.getValue();	      Option    commandLine    =(Option)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
60	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)&&  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  null)&&  option.hasArg())  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)&&  option.hasArg())  {	  if    (option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(2);  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getParameterType(2);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(2);	      Option    commandLine    =    option.getParameterType(0);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getArg()))  {  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getArg()))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getArg()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentLine();  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgumentLine();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentLine();	      Option    commandLine    =    option.getCommandLine();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]        OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  Option  commandLine  =  option.getcommandLine();  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getcommandLine();  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getcommandLine();	      Option    commandLine    =    option.getArgument();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
68	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]          OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {  [BUGGY]    return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg1();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArg1();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg1();  if(commandLine!=  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  Option  commandLine  =  option.getArguments();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArguments();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArguments();  if(commandLine!=  null)  {  return  false;  }	      Option    commandLine    =    option.getCommandLine();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException    [CONTEXT]    return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();    [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg);  [BUGGY]    if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(arg);	      Option    commandLine    =    option.getCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
