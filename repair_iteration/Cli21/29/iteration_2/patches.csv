bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(commandLine.canProcess(arg,  option)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(commandLine.canProcess(arg,  option)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(commandLine.canProcess(arg,  option)||  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
2	[BUG]  [BUGGY]  if  (commandLine.canProcess(option,  description))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (commandLine.canProcess(option,  description))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (commandLine.canProcess(option,  description))  {	  if    (commandLine.canProcess(option,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
3	[BUG]  [BUGGY]  if  (!commandLine.canProcess(option,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!commandLine.canProcess(option,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!commandLine.canProcess(option,  arg))  {	  if    (commandLine.canProcess(option,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
4	[BUG]  [BUGGY]  if  (commandLine.canProcess(option,  name))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (commandLine.canProcess(option,  name))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (commandLine.canProcess(option,  name))  {	  if    (commandLine.canProcess(option,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
5	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(arg,  description);	  Option    commandLine    =    option.getArgumentCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
6	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(commandLine);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(commandLine);	  Option    commandLine    =    option.getArgumentCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
7	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.getValue();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)option.getValue();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.getValue();	  Option    commandLine    =(Option)iter.getValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
8	[BUG]  [BUGGY]  Option  commandLine  =(Option)iter.getAnonymousValue();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)iter.getAnonymousValue();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)iter.getAnonymousValue();	  Option    commandLine    =(Option)iter.getValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
9	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.getDescription();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)option.getDescription();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.getDescription();	  Option    commandLine    =(Option)option.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(command,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(command,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(command,  description);	  Option    commandLine    =    option.getArgumentCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
11	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(arg,  description);	  Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(commandLine);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(commandLine);	  Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getArg()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
14	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getArg()))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getArg()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getArg()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getArg()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
15	[BUG]  [BUGGY]  if  (commandLine!=  null  &&  option.canProcess(arg,  option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (commandLine!=  null  &&  option.canProcess(arg,  option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (commandLine!=  null  &&  option.canProcess(arg,  option))  {	  if    (option!=    null    &&    option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
16	[BUG]  [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  &&  option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&    option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
17	[BUG]  [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||  option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
18	[BUG]  [BUGGY]  if  (commandLine!=  null  &&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (commandLine!=  null  &&  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (commandLine!=  null  &&  option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
19	[BUG]  [BUGGY]  if(commandLine.canProcess(arg,  option)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(commandLine.canProcess(arg,  option)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(commandLine.canProcess(arg,  option)&&  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
20	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArgument();  if(commandLine  ==  null)  {  return  false;  }	  Option    commandLine    =    option.getArgument();    if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
21	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getDescription()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
22	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
23	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
24	[BUG]  [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
25	[BUG]  [BUGGY]  if(arg!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(arg!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(arg!=  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
26	[BUG]  [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
27	[BUG]  [BUGGY]  if  (option.canProcess(commandLine,  false)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option.canProcess(commandLine,  false)&&  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(commandLine,  false)&&  options.hasArg())  {	  if    (option.canProcess(commandLine,    null)&&    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
28	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg(),  description;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArg(),  description;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg(),  description;	  final    Option    commandLine    =    option.getArg();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg(),  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArg(),  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg(),  description);	  final    Option    commandLine    =    option.getArg();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)||  hasLikeOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  arg)||  hasLikeOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)||  hasLikeOption(arg))  {	  if    (!option.canProcess(commandLine,    arg)&&    hasLikeOption(arg))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {	  if    (!option.canProcess(commandLine,    arg)&&    hasLikeOption(arg))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)||  options.hasOption(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
33	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
34	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg1();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg1();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg1();  if(commandLine  ==  null)  {  return  false;  }	  Option    commandLine    =    option.getArg1();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
35	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg2();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg2();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg2();  if(commandLine!=  null)  {  return  false;  }	  Option    commandLine    =    option.getArg1();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
36	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg3();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg3();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg3();  if(commandLine!=  null)  {  return  false;  }	  Option    commandLine    =    option.getArg1();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
37	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(command,  arg);	  Option    commandLine    =    option.getCommandLine(command,    description);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  description,  arg);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  description,  arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(command,  description,  arg);	  Option    commandLine    =    option.getCommandLine(command,    description);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  false)&&  options.looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  false)&&  options.looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  false)&&  options.looksLikeOption(commandLine,  arg))  {	  if    (option.canProcess(commandLine,    null)&&    options.looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
40	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.hasOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.hasOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)&&  options.hasOption(arg))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
41	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)||  options.hasOption(option))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
42	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  null)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
43	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  false)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  false)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  false)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
44	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  description)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  description)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  description)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    description)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  description)&&  options.hasOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  description)&&  options.hasOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  description)&&  options.hasOption(arg))  {	  if(option.canProcess(commandLine,    description)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  if(option.canProcess(arg,  description)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  description)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  description)||  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(arg,    commandLine)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
47	[BUG]  [BUGGY]  if(option.canProcess(commandLine)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine)||  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(arg,    commandLine)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
48	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getDescription();  if(commandLine!=  null)  {  return  false;  }	  Option    commandLine    =    option.getDescription();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  false)&&  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  false)&&  option.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  false)&&  option.hasArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
50	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)||  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)||  option.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)||  option.hasArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
51	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  null)&&  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  null)&&  option.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  null)&&  option.hasArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
52	[BUG]  [BUGGY]  final  Option  commandLine  =(Option)option.next();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =(Option)option.next();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =(Option)option.next();	  final    Option    commandLine    =(Option)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  Option  option  =  option.getOption(this,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(this,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(this,  description);	  Option    option    =    option.getOption(this);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(this);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  options.getOption(this);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  options.getOption(this);	  Option    option    =    option.getOption(this);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
55	[BUG]  [BUGGY]  option  =  option.getOption(this,  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  option  =  option.getOption(this,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	option  =  option.getOption(this,  description);	  Option    option    =    option.getOption(this);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
56	[BUG]  [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
57	[BUG]  [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasArg())  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
58	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasDescription())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasDescription())  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
59	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(commandLine);	  Option    option    =    optionMap.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
60	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(defaultName);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(defaultName);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(defaultName);	  Option    option    =    optionMap.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
61	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasMoreArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasMoreArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasMoreArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArgument())  {  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArgument())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasMoreArgument())  {	  if(option.canProcess(commandLine,    arg)||    options.hasMoreArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArguments())  {  [CE]  illegal  start  of  expression  [FE]                        OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasMoreArguments())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasMoreArguments())  {	  if(option.canProcess(commandLine,    arg)||    options.hasMoreArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  null))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  null))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||  option.canProcess(commandLine,  null))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
65	[BUG]  [BUGGY]  if  (option  ==  null  &&  option.canProcess(commandLine,  null))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option  ==  null  &&  option.canProcess(commandLine,  null))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option  ==  null  &&  option.canProcess(commandLine,  null))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
66	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentLine()  +  1;  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentLine()  +  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentLine()  +  1;	  Option    commandLine    =    option.getArgumentLine();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
67	[BUG]  [BUGGY]  Option  option  =  option.clone();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.clone();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.clone();	  Option    option    =    option.cloneOption();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
68	[BUG]  [BUGGY]  Option  option  =  option.cloneOption(commandLine);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.cloneOption(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.cloneOption(commandLine);	  Option    option    =    option.cloneOption();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
69	[BUG]  [BUGGY]  Option  option  =  option.cloneOption(description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.cloneOption(description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.cloneOption(description);	  Option    option    =    option.cloneOption();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
70	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentType(arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentType(arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentType(arg);	  Option    commandLine    =    option.getArgumentType(0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
71	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentType(1);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentType(1);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentType(1);	  Option    commandLine    =    option.getArgumentType(0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
72	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentType(commandLine);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentType(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentType(commandLine);	  Option    commandLine    =    option.getArgumentType(0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
73	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArgument();  if(commandLine!=  null)  {  return  false;  }	  Option    commandLine    =    option.getArgument();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
74	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)&&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
75	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    options.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
76	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    options.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  Option  option  =  option.getOption(name);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(name);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(name);	  Option    option    =    option.getOption(defaultName);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  Option  option  =  option.getOption(defaultName,  description);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(defaultName,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(defaultName,  description);	  Option    option    =    option.getOption(defaultName);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine,  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(commandLine,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine,  description);	  Option    option    =    option.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
80	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg,  description);  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  options.getOption(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  options.getOption(arg,  description);	  Option    option    =    option.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
81	[BUG]  [BUGGY]  Option  option  =  option.getOption(name,  description);  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(name,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(name,  description);	  Option    option    =    option.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
82	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getCommandLine(commandLine);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getCommandLine(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getCommandLine(commandLine);	  final    Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
83	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getCommandLine(arg,  description);	  final    Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
84	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getCommandLine(commandline);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getCommandLine(commandline);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getCommandLine(commandline);	  final    Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  options.getOption(description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  options.getOption(description);	  Option    option    =    option.getOption(description);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
86	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getSummary();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getSummary();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getSummary();	  final    Option    commandLine    =    option.getDescription();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  if(option!=  null  ||!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||!option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
88	[BUG]  [BUGGY]  if(option  ==  null  &&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  &&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  &&!option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
89	[BUG]  [BUGGY]  if  (!option.canProcess(arg,  null))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(arg,  null))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(arg,  null))  {	  if    (!option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
90	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  null)&&!looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  null)&&!looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  null)&&!looksLikeOption(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
91	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(arg,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getParameterType(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(arg,  description);	  Option    commandLine    =    option.getParameterType(arg);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
92	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getParameterType(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(commandLine);	  Option    commandLine    =    option.getParameterType(arg);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
93	[BUG]  [BUGGY]  Option  commandLine  =  option.getParameterType(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getParameterType(arg)+  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getParameterType(arg)+  1;	  Option    commandLine    =    option.getParameterType(arg);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
94	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(arg,  description);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(arg,  description);	  Option    option    =    optionMap.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
95	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(commandline);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(commandline);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(commandline);	  Option    option    =    optionMap.getOption(arg);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
96	[BUG]  [BUGGY]  Option  commandLine  =  option.getArguments();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArguments();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArguments();  if(commandLine  ==  null)  {  return  false;  }	  Option    commandLine    =    option.getArguments();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
97	[BUG]  [BUGGY]  Option  commandLine  =  option.getArguments();  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArguments();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArguments();	  Option    commandLine    =    option.getArguments();    if(commandLine!=    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
98	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasDescription())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasDescription())  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
99	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  name.equals(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  name.equals(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  name.equals(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  description.equals(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  description.equals(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasDescription()  ||  description.equals(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
102	[BUG]  [BUGGY]  if(option!=  null  &&  options.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  options.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  options.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
103	[BUG]  [BUGGY]  if(commandLine!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(commandLine!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(commandLine!=  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
104	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)||  options.hasArg())  {	  if(option.canProcess(arg,    commandLine)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
105	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArgument())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArgument())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasArgument())  {	  if(option.canProcess(arg,    commandLine)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
106	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getDescription();  if(commandLine  ==  null)  {  return  false;  }	  Option    commandLine    =    option.getDescription();    if(commandLine    ==    null)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
107	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
108	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)||!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  arg)||!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)||!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
109	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  description  +  1;  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(),  description  +  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(),  description  +  1;	  Option    option    =    option.getOption(),    description);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
110	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  name);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(),  name);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(),  name);	  Option    option    =    option.getOption(),    description);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
111	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  commandLine);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(),  commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(),  commandLine);	  Option    option    =    option.getOption(),    description);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
112	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getParameterType(0);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getParameterType(0);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getParameterType(0);	  final    Option    commandLine    =    option.getArgument();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
113	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  option)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  option)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  option)&&  options.hasOption(option))  {	  if(!option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
114	[BUG]  [BUGGY]  Option  commandLine  =  option.getSummary();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getSummary();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getSummary();	  Option    commandLine    =    option.getDescription();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
115	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&!looksLikeOption(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
116	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg2();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg2();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg2();	  Option    commandLine    =    option.getArg1();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
117	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg3();  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg3();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg3();	  Option    commandLine    =    option.getArg1();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
118	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg1(),  description;  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg1(),  description;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg1(),  description;	  Option    commandLine    =    option.getArg1();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
119	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasArg()  ||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  options.hasArg()  ||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  options.hasArg()  ||  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)&&    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
120	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine,  arg,  description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(commandLine,  arg,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine,  arg,  description);	  Option    option    =    option.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
121	[BUG]  [BUGGY]  Option  option  =  option.getOption(description,  arg);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(description,  arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(description,  arg);	  Option    option    =    option.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
122	[BUG]  [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&!option.canProcess(commandLine,  arg)&&  hasLikeOption(arg))  {	  if    (!option.canProcess(commandLine,    arg)&&    hasLikeOption(arg))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
123	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine)&&  hasLikeOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine)&&  hasLikeOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine)&&  hasLikeOption(arg))  {	  if    (!option.canProcess(commandLine,    arg)&&    hasLikeOption(arg))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
124	[BUG]  [BUGGY]  final  Option  commandLine  =  optionMap.getCommandLine(arg);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  optionMap.getCommandLine(arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  optionMap.getCommandLine(arg);	  final    Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
125	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasOption(option.getDescription()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)&&  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
126	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
127	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)&&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)&&  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)&&  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)&&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
128	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)&&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
129	[BUG]  [BUGGY]  Option  commandLine  =  option.getcommandLine(arg);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getcommandLine(arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getcommandLine(arg);	  Option    commandLine    =    option.getcommandLine();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
130	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.getArgument();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)option.getArgument();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.getArgument();	  Option    commandLine    =(Option)iter.getValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
131	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.getCommandLine();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)option.getCommandLine();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.getCommandLine();	  Option    commandLine    =(Option)iter.getValue();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
132	[BUG]  [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  &&  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
133	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
134	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)||  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    options.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
135	[BUG]  [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  option.canProcess(commandLine,  arg))  {	  if(!option.canProcess(commandLine,    arg)&&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
136	[BUG]  [BUGGY]  if(option!=  null  ||!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  ||!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  ||!option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(!option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
137	[BUG]  [BUGGY]  Option  option  =  option.getOption(arg,  name);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(arg,  name);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(arg,  name);	  Option    option    =    option.getOption(arg,    description);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
138	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.looksLikeOption(commandLine,  arg))  {	  if    (option.canProcess(commandLine,    null)&&    options.looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
139	[BUG]  [BUGGY]  if(option.canProcess(arg,  null)&&  options.looksLikeOption(commandLine,  option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  null)&&  options.looksLikeOption(commandLine,  option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  null)&&  options.looksLikeOption(commandLine,  option))  {	  if    (option.canProcess(commandLine,    null)&&    options.looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
140	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasOption(option.getArg()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasOption(option.getArg()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.hasOption(option.getArg()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getArg()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
141	[BUG]  [BUGGY]  if  (canProcess(option,  name))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (canProcess(option,  name))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (canProcess(option,  name))  {	  if    (commandLine.canProcess(option,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
142	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  option)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  option)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  option)||  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
143	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  options)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  options)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  options)||  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
144	[BUG]  [BUGGY]  if  (option.canProcess(arg,  null)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option.canProcess(arg,  null)&&  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(arg,  null)&&  options.hasArg())  {	  if    (option.canProcess(commandLine,    null)&&    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
145	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(description);	  Option    option    =    option.getOption(description);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
146	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  null)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
147	[BUG]  [BUGGY]  if(option.canProcess(arg,  null)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  null)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  null)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    null)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
148	[BUG]  [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option!=  null  &&!option.canProcess(commandLine,  option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option!=  null  &&!option.canProcess(commandLine,  option))  {	  if    (!option.canProcess(commandLine,    option))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
149	[BUG]  [BUGGY]  if  (option.canProcess(commandLine,  option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (option.canProcess(commandLine,  option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (option.canProcess(commandLine,  option))  {	  if    (!option.canProcess(commandLine,    option))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
150	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  name);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(command,  name);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(command,  name);	  Option    commandLine    =    option.getCommandLine(command,    description);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
151	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasMoreArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.hasMoreArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasMoreArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
152	[BUG]  [BUGGY]  if(option.canProcess(commandLine)&&  options.hasMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                      OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine)&&  options.hasMoreArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine)&&  options.hasMoreArg())  {	  if(option.canProcess(commandLine,    arg)||    options.hasMoreArg())    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
153	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)&&  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)&&  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)&&    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
154	[BUG]  [BUGGY]  if(option.canProcess(commandLine)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine)&&  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine)&&  options.hasArg())  {	  if(option.canProcess(commandLine,    arg)&&    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
155	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg(description);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArg(description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg(description);	  final    Option    commandLine    =    option.getArg();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
156	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg(commandLine);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArg(commandLine);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg(commandLine);	  final    Option    commandLine    =    option.getArg();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
157	[BUG]  [BUGGY]  Option  option  =  option.cloneOption(this);  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.cloneOption(this);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.cloneOption(this);	  Option    option    =    option.cloneOption();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
158	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  option)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  option)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  option)&&  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
159	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  options)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  options)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  options)&&  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
160	[BUG]  [BUGGY]  if(option.canProcess(arg,  description)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  description)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  description)&&  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
161	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
162	[BUG]  [BUGGY]  if  (!option.canProcess(arg,  commandLine)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(arg,  commandLine)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(arg,  commandLine)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
163	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getcommandLine();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getcommandLine();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getcommandLine();	  final    Option    commandLine    =    option.getDescription();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
164	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  options.hasArg())  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
165	[BUG]  [BUGGY]  Option  commandLine  =  option.getArg0();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArg0();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArg0();	  Option    commandLine    =    option.getArg1();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
166	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  options))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  options))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  options))  {	  if    (!option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
167	[BUG]  [BUGGY]  final  Option  commandLine  =(Option)iter.getValue();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =(Option)iter.getValue();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =(Option)iter.getValue();	  final    Option    commandLine    =(Option)iter.next();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
168	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(commandLine,  arg)||  option.canProcess(commandLine,  arg))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
169	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine();	  Option    commandLine    =    option.getArgumentCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
170	[BUG]  [BUGGY]  Option  commandLine  =  options.getArgumentCommandLine(command);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  options.getArgumentCommandLine(command);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  options.getArgumentCommandLine(command);	  Option    commandLine    =    option.getArgumentCommandLine(command);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
171	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine)&&!looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine)&&!looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine)&&!looksLikeOption(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
172	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(arg,  commandLine)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(arg,  commandLine)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(arg,  commandLine)||  options.hasArg())  {	  if(option.canProcess(arg,    commandLine)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
173	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  option)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  option)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  option)||  options.hasArg())  {	  if(option.canProcess(arg,    commandLine)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
174	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  options.hasArg(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
175	[BUG]  [BUGGY]  if(option.canProcess(arg,  description)||  options.hasOption(option.getName()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  description)||  options.hasOption(option.getName()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  description)||  options.hasOption(option.getName()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
176	[BUG]  [BUGGY]  Option  option  =  option.getOption(),  description;  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(),  description;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(),  description;	  Option    option    =    option.getOption(),    description);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
177	[BUG]  [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&!option.canProcess(commandLine,  arg)||  options.hasOption(option))  {	  if(!option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
178	[BUG]  [BUGGY]  if(option.canProcess(arg,  null)&&  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  null)&&  option.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  null)&&  option.hasArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
179	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)&&  option.getArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)&&  option.getArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)&&  option.getArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
180	[BUG]  [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  commandLine)||  options.hasDescription())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  commandLine)||  options.hasDescription())  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
181	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(arg,  null))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(arg,  null))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(arg,  null))  {	  if    (option.canProcess(arg,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
182	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  options.getOption(option);	  Option    option    =    optionMap.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
183	[BUG]  [BUGGY]  Option  option  =  optionMap.getOption(option,  description);  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  optionMap.getOption(option,  description);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  optionMap.getOption(option,  description);	  Option    option    =    optionMap.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
184	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentLine(arg);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentLine(arg);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentLine(arg);	  Option    commandLine    =    option.getArgumentLine();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
185	[BUG]  [BUGGY]  Option  commandLine  =(Option)option.clone();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =(Option)option.clone();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =(Option)option.clone();	  Option    commandLine    =(Option)option.next();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
186	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg  +  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg  +  1);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(arg  +  1);	  Option    commandLine    =    option.getArgumentCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
187	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  name)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  name)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  name)&&  options.hasOption(option))  {	  if(option.canProcess(commandLine,    description)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
188	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {	  if(option.canProcess(commandLine,    description)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
189	[BUG]  [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&!option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {	  if(!option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
190	[BUG]  [BUGGY]  Option  option  =  option.getOption(this)+  1;  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(this)+  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(this)+  1;	  Option    option    =    option.getOption(this);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
191	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine,  null);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(commandLine,  null);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine,  null);	  Option    option    =    option.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
192	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentType(2);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentType(2);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentType(2);	  Option    commandLine    =    option.getArgumentType(0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
193	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentDescription();  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentDescription();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentDescription();	  Option    commandLine    =    option.getDescription();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
194	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)&&  option.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)&&  option.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)&&  option.hasArg())  {	  if(option.canProcess(commandLine,    null)&&    option.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
195	[BUG]  [BUGGY]  Option  option  =  this.optionMap.getOption(option);  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  this.optionMap.getOption(option);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  this.optionMap.getOption(option);	  Option    option    =    option.getOption(this);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
196	[BUG]  [BUGGY]  if(commandLine.canProcess(option,  arg)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(commandLine.canProcess(option,  arg)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(commandLine.canProcess(option,  arg)&&  options.hasOption(option))  {	  if(option.canProcess(arg,    commandLine)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
197	[BUG]  [BUGGY]  Option  option  =  option.cloneTree();  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.cloneTree();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.cloneTree();	  Option    option    =    option.cloneOption();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
198	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(arg,  commandLine))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(arg,  commandLine))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(arg,  commandLine))  {	  if    (option!=    null    &&    option.canProcess(arg,    commandLine))    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
199	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg)+  1;  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getCommandLine(arg)+  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getCommandLine(arg)+  1;	  final    Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
200	[BUG]  [BUGGY]  if(option.hasProcess(commandLine,  arg)||  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.hasProcess(commandLine,  arg)||  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.hasProcess(commandLine,  arg)||  options.hasArg())  {	  if(option.canProcess(arg,    commandLine)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
201	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.hasOption(option.getArg()))  {	  if(option.canProcess(commandLine,    arg)||    options.hasOption(option.getArg()))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
202	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
203	[BUG]  [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getArgumentCommandLine(arg)+  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getArgumentCommandLine(arg)+  1;	  Option    commandLine    =    option.getArgumentCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
204	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  null)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  null)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  null)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
205	[BUG]  [BUGGY]  final  Option  commandLine  =  option.getArg1();  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  final  Option  commandLine  =  option.getArg1();  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	final  Option  commandLine  =  option.getArg1();	  final    Option    commandLine    =    option.getArg();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
206	[BUG]  [BUGGY]  if(option  ==  null  ||!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||!option.canProcess(commandLine,  arg))  {	  if    (option!=    null    &&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
207	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  option)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  option)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  option)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    option))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
208	[BUG]  [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  null))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||  option.canProcess(commandLine,  null))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||  option.canProcess(commandLine,  null))  {	  if    (option!=    null    &&    option.canProcess(commandLine,    null))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
209	[BUG]  [BUGGY]  if(option.canProcess(arg,  description)&&  options.hasOption(option.getDescription()))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(arg,  description)&&  options.hasOption(option.getDescription()))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(arg,  description)&&  options.hasOption(option.getDescription()))  {	  if(option.canProcess(commandLine,    arg)&&    options.hasOption(option.getDescription()))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
210	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasOption(option))  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
211	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {  [CE]  illegal  start  of  expression  [FE]              OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  option)&&  options.hasOption(arg))  {	  if(!option.canProcess(commandLine,    arg)&&    options.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
212	[BUG]  [BUGGY]  Option  commandLine  =  option.getCommandLine(arg)+  1;  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  commandLine  =  option.getCommandLine(arg)+  1;  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  commandLine  =  option.getCommandLine(arg)+  1;	  Option    commandLine    =    option.getCommandLine(arg);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
213	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.hasDescription())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.hasDescription())  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
214	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  arg)||  option.hasDescription())  {  [CE]  illegal  start  of  expression  [FE]                    OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  arg)||  option.hasDescription())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  arg)||  option.hasDescription())  {	  if(option.canProcess(commandLine,    arg)||    options.hasDescription())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
215	[BUG]  [BUGGY]  if(option  ==  null  ||!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]            OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option  ==  null  ||!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option  ==  null  ||!option.canProcess(commandLine,  arg)&&!option.canProcess(commandLine,  arg))  {	  if    (!option.canProcess(commandLine,    arg)&&!option.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
216	[BUG]  [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(!option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(!option.canProcess(commandLine,  arg)&&  options.canProcess(commandLine,  arg))  {	  if(option.canProcess(commandLine,    arg)||    options.canProcess(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
217	[BUG]  [BUGGY]  Option  option  =  option.getOption(commandLine,  arg  +  1);  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  Option  option  =  option.getOption(commandLine,  arg  +  1);  [BUGGY]      if  (option.canProcess(commandLine,  arg))  {  return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	Option  option  =  option.getOption(commandLine,  arg  +  1);	  Option    option    =    option.getOption(commandLine,    arg);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
218	[BUG]  [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasArg())  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option!=  null  &&  option.canProcess(commandLine,  arg)&&  options.hasArg())  {	  if(option!=    null    &&    option.canProcess(commandLine,    arg)||    options.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
219	[BUG]  [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(option))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(option))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if  (!option.canProcess(commandLine,  arg)&&  hasLikeOption(option))  {	  if    (!option.canProcess(commandLine,    arg)&&    hasLikeOption(arg))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
220	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)||  options.looksLikeOption(commandLine,  arg))  {  [CE]  illegal  start  of  expression  [FE]                OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)||  options.looksLikeOption(commandLine,  arg))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)||  options.looksLikeOption(commandLine,  arg))  {	  if    (option.canProcess(commandLine,    null)&&    options.looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
221	[BUG]  [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.looksLikeOption(arg,  description))  {  [CE]  illegal  start  of  expression  [FE]                  OptionException      [CONTEXT]      return  true;  }  final  Map  tailMap  =  optionMap.tailMap(arg);  for  (final  Iterator  iter  =  tailMap.values().iterator();  iter.hasNext();)  {  final  Option  option  =  (Option)  iter.next();      [BUGGY]  if(option.canProcess(commandLine,  null)&&  options.looksLikeOption(arg,  description))  {  [BUGGY]      return  true;  }  }  if  (looksLikeOption(commandLine,  arg))  {  return  false;  }  if  (anonymous.size()  >  0)  {  [CLASS]  GroupImpl  [METHOD]  canProcess  [RETURN_TYPE]  boolean  WriteableCommandLine  commandLine  String  arg  [VARIABLES]  Set  newPrefixes  prefixes  triggers  boolean  SortedMap  newOptionMap  optionMap  WriteableCommandLine  commandLine  Iterator  iter  List  anonymous  newAnonymous  options  Option  option  String  arg  description  name  Map  tailMap  int  maximum  minimum  	projects/Cli21/src/java/org/apache/commons/cli2/option/GroupImpl.java	1.0	134	134	1	replace	if(option.canProcess(commandLine,  null)&&  options.looksLikeOption(arg,  description))  {	  if    (option.canProcess(commandLine,    null)&&    options.looksLikeOption(commandLine,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
