bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	      RealVector    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	16	None	replace
5	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension());  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension());  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getDimension());	      RealVector    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	16	None	replace
6	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry());  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getEntry());	      RealVector    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	16	None	replace
7	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize());  [CE]  cannot  find  symbol  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize());  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getDimension(),  v.getSize());	      RealVector    res    =    new    RealVector(this,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
8	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	2	1	replace
9	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	2	1	replace
10	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	2	1	replace
11	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	2	1	replace
12	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	non-compiled	[CE]  ';'  expected	23	None	replace
13	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	non-compiled	[CE]  ')'  expected	23	None	replace
14	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
15	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	26	None	replace
16	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
17	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
18	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
19	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  int  dimension  =  v.getDimension()  +  1;  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	int  dimension  =  v.getDimension()  +  1;	      int    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	18	1	replace
20	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  +  1;  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  int  dimension  =  v.getDimension()  +  1;  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int  dimension  =  v.getDimension()  +  1;	      int    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	18	1	replace
21	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  double  dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	double  dimension  =  v.getDimension();	      int    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	18	1	replace
22	[BUG]  [BUGGY]  double  dimension  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  double  dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	double  dimension  =  v.getDimension();	      int    dimension    =    v.getDimension();    	compilable	  [FE]  MathRuntimeException$6  	18	1	replace
23	[BUG]  [BUGGY]  int  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [CE]  possible  loss  of  precision  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  int  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	int  dimension  =  v.getDimension()  *  DEFAULT_ZERO_TOLERANCE;	      int    dimension    =    v.getDimension();    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
24	[BUG]  [BUGGY]  res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  res  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setDimension(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  res.setDimension(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	6	None	replace
25	[BUG]  [BUGGY]  RealVector  res  =  v.getDimension();  [CE]  incompatible  types  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  v.getDimension();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  v.getDimension();	  res.setDimension(v.getDimension());    	non-compiled	[CE]  incompatible  types	6	None	replace
26	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension());  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(this,  v.getDimension());	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
27	[BUG]  [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension());  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  res  =  new  RealVector(v.getDimension());	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.getEntry();  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Annotation  <  RealVector>  entry  =  v.getEntry();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Annotation  <  RealVector>  entry  =  v.getEntry();	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
29	[BUG]  [BUGGY]  vices.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  vices  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  vices.add(new  OpenMapRealVector(v));  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	vices.add(new  OpenMapRealVector(v));	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  vices	21	None	replace
30	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getValue());  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(v.getValue());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getValue());	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
31	[BUG]  [BUGGY]  new  OpenMapRealVector(this,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  new  OpenMapRealVector(this,  v.getEntry());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector(this,  v.getEntry());	      	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	8	None	replace
32	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(v.getEntry());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v.getEntry());	      	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	8	None	replace
33	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	20	1	add
34	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	20	1	add
35	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	20	1	add
36	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	20	1	add
37	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  If(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  If(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    If(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	20	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	5	2	replace
39	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  AssertionError  	5	2	replace
40	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);	      RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	14	None	replace
41	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v);	      RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	14	None	replace
42	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	      RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	14	None	replace
43	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v,  DEFAULT_ZERO_TOLERANCE);	      RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	14	None	replace
44	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
45	[BUG]  [BUGGY]  checkMultiply(v,  v.getDimension());  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkMultiply(v,  v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  v.getDimension());	  checkMultiply(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
46	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  value);  [CE]  cannot  find  symbol  value  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkMultiply(v.getDimension(),  value);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  value);	  checkMultiply(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	22	None	replace
47	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  epsilon);  [CE]  cannot  find  symbol  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkMultiply(v.getDimension(),  epsilon);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v.getDimension(),  epsilon);	  checkMultiply(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
48	[BUG]  [BUGGY]  CheckVectorDimensions(v.getDimension());  [CE]  cannot  find  symbol  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  CheckVectorDimensions(v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckVectorDimensions(v.getDimension());	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
49	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
50	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
51	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
52	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
53	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
54	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
55	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	1	1	add
56	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	non-compiled	[CE]  ';'  expected	1	None	add
57	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  DEFAULT_ZERO_TOLERANCE);	      RealVector    res    =(RealVector)this.entries.get(v);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	15	None	replace
58	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  current);  [CE]  cannot  find  symbol  current  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  current);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  current);	      RealVector    res    =(RealVector)this.entries.get(v);    	non-compiled	[CE]  cannot  find  symbol  current	15	None	replace
59	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this);	      RealVector    res    =(RealVector)this.entries.get(v);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	15	None	replace
60	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  v);  [CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  v);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  v);	      RealVector    res    =(RealVector)this.entries.get(v);    	non-compiled	[CE]  method  get  in  class  OpenIntToDoubleHashMap  cannot  be  applied  to  given  types;	15	None	replace
61	[BUG]  [BUGGY]      res.setEntry(v.getValue());  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      res.setEntry(v.getValue());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        res.setEntry(v.getValue());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
62	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
63	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	4	2	add
65	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  AssertionError  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  AssertionError  	4	2	add
66	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
67	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
68	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  	non-compiled	[CE]  ')'  expected	4	None	add
69	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
71	[BUG]  [BUGGY]      int  dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        int    dimension    =    v.getDimension();    int  dimension  =  v.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	17	None	add
72	[BUG]  [BUGGY]      int  dimension  =  v.getDimension();  Int  dimension  =  v.getDimension();  [CE]  cannot  find  symbol  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  Int  dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        int    dimension    =    v.getDimension();    Int  dimension  =  v.getDimension();	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
73	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	        int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();	  	compilable	  [FE]  MathRuntimeException$6  	17	1	add
74	[BUG]  [BUGGY]      int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  dimensions  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        int    dimension    =    v.getDimension();    int  dimensions  =  v.getDimension();	  	compilable	  [FE]  MathRuntimeException$6  	17	1	add
75	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	        int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();	  	compilable	  [FE]  MathRuntimeException$6  	17	1	add
76	[BUG]  [BUGGY]      int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [FE]  MathRuntimeException$6  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  Dimension  =  v.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        int    dimension    =    v.getDimension();    int  Dimension  =  v.getDimension();	  	compilable	  [FE]  MathRuntimeException$6  	17	1	add
77	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
79	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
80	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkDimensions(v,  epsilon.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  epsilon.getDimension());	  checkDimensions(v.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
81	[BUG]  [BUGGY]  checkDimensions(v,  v.getDimension());  [CE]  cannot  find  symbol  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkDimensions(v,  v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  v.getDimension());	  checkDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
82	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  value);  [CE]  cannot  find  symbol  value  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkDimensions(v.getDimension(),  value);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v.getDimension(),  value);	  checkDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	24	None	replace
83	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	11	None	replace
84	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(v);  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(v);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(v);	      RealVector    res    =    new    RealVector(this);    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	19	None	replace
85	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry());  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.getEntry());  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.getEntry());	      RealVector    res    =    new    RealVector(this);    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	19	None	replace
86	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
87	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
88	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
89	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	non-compiled	[CE]  ')'  expected	23	None	replace
90	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
91	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
92	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
93	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
94	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
95	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	12	None	replace
96	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
97	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Iterator  <  RealVector>  iter  =  v.getEntrySet().iterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.getEntrySet().iterator();	      	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	8	None	replace
98	[BUG]  [BUGGY]  Iterator  <  RealVector>  iter  =  v.getEntryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Iterator  <  RealVector>  iter  =  v.getEntryIterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  RealVector>  iter  =  v.getEntryIterator();	      	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	8	None	replace
99	[BUG]  [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply);  [CE]  cannot  find  symbol  multiply  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =  new  RealVector(this,  v.multiply);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =  new  RealVector(this,  v.multiply);	      RealVector    res    =    new    RealVector(this,    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  multiply	14	None	replace
100	[BUG]  [BUGGY]  checkDimensions(v,  current.getDimension());  [CE]  cannot  find  symbol  current  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkDimensions(v,  current.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkDimensions(v,  current.getDimension());	  checkDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  current	24	None	replace
101	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	21	1	replace
102	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	21	1	replace
103	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null.getDimension());  }  [CE]  <null>  cannot  be  dereferenced  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  checkVectorDimensions(null.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  <null>  cannot  be  dereferenced	21	None	replace
104	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	21	None	replace
105	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
106	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
107	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    If(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  	non-compiled	[CE]  ';'  expected	4	None	add
108	[BUG]  [BUGGY]      Iterator  <  RealVector>  iter  =  v.entries().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      Iterator  <  RealVector>  iter  =  v.entries().iterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        Iterator  <  RealVector>  iter  =  v.entries().iterator();	  	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	7	None	add
109	[BUG]  [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.value);  [CE]  cannot  find  symbol  value  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  RealVector  res  =(RealVector)this.entries.get(v,  this.value);  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	RealVector  res  =(RealVector)this.entries.get(v,  this.value);	      RealVector    res    =(RealVector)this.entries.get(v);    	non-compiled	[CE]  cannot  find  symbol  value	15	None	replace
110	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
111	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
112	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
113	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
114	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
115	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
116	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
117	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
118	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension());  [CE]  cannot  find  symbol  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  CheckIntToDoubleHashMap(v.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	CheckIntToDoubleHashMap(v.getDimension());	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
119	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet().iterator();  [CE]  >  expected  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet().iterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.entrySet().iterator();	      	non-compiled	[CE]  >  expected	8	None	replace
120	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	new  OpenMapRealVector().ebeMultiply(v);	      	compilable	  [FE]  StackOverflowError  	8	2	replace
121	[BUG]  [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  [FE]  StackOverflowError  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  new  OpenMapRealVector().ebeMultiply(v);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	new  OpenMapRealVector().ebeMultiply(v);	      	compilable	  [FE]  StackOverflowError  	8	2	replace
122	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();  [CE]  >  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  Map.Entry  <  K,  V  >=  v  =  map.entrySet().iterator();	      	non-compiled	[CE]  >  expected	8	None	replace
123	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntry();  [CE]  >  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntry();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  v.getEntry();	      	non-compiled	[CE]  >  expected	8	None	replace
124	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	28	1	replace
125	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	compilable	  [FE]  MathRuntimeException$6  	28	1	replace
126	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	28	None	replace
127	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
128	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
129	[BUG]  [BUGGY]  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                  MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
130	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	27	1	replace
131	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	27	1	replace
132	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
133	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
134	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	9	None	replace
135	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry());  }  [CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getEntry());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v!=  null)  {  checkVectorDimensions(v.getEntry());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  method  getEntry  in  interface  RealVector  cannot  be  applied  to  given  types;	21	None	replace
136	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]        MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
137	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	25	None	replace
138	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
139	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	10	None	replace
140	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	      if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
141	[BUG]  [BUGGY]  checkMultiply(v,  current.getDimension());  [CE]  cannot  find  symbol  current  [FE]          MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  checkMultiply(v,  current.getDimension());  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	checkMultiply(v,  current.getDimension());	  checkMultiply(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  current	22	None	replace
142	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
143	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]            MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
144	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
145	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    	compilable	  [FE]  MathRuntimeException$6  	23	1	replace
146	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	5	1	replace
147	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	compilable	  [FE]  MathRuntimeException$6  	5	1	replace
148	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  DEFAULT_TOLERANCE  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TOLERANCE	5	None	replace
149	[BUG]  [BUGGY]  res.setDimension(v.getDimension()  +  1);  [CE]  cannot  find  symbol  res  [FE]              MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  res.setDimension(v.getDimension()  +  1);  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	res.setDimension(v.getDimension()  +  1);	  res.setDimension(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	6	None	replace
150	[BUG]  [BUGGY]      int  dimension  =  v.getDimension();  int  dimension  =  V.getDimension();  [CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      int  dimension  =  v.getDimension();  int  dimension  =  V.getDimension();  [BUGGY]    checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        int    dimension    =    v.getDimension();    int  dimension  =  V.getDimension();	  	non-compiled	[CE]  variable  dimension  is  already  defined  in  method  ebeMultiply(RealVector)	17	None	add
151	[BUG]  [BUGGY]      Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  entries.iterator();  [CE]  >  expected  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]      Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  entries.iterator();  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	        Iterator  <  Map.Entry  <  String,  RealVector>  entry  =  entries.iterator();	  	non-compiled	[CE]  >  expected	7	None	add
152	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
153	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [FE]  MathRuntimeException$6  [FE]    MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  this;  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
154	[BUG]  [BUGGY]  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	add	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
155	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [FE]  MathRuntimeException$6  [FE]      MathRuntimeException$6    [CONTEXT]    public  OpenMapRealVector  ebeMultiply(RealVector  v)  {    [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]    OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  res.entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }  return  res;  }  [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math49/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java	0.7071067811865475	368	368	1	replace	if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  	compilable	  [FE]  MathRuntimeException$6  	4	1	add
