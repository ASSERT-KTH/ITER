bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);		non-compiled	[CE]  cannot  find  symbol  jTj	10	None	add
2	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWeight());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWeight());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWeight());		non-compiled	[CE]  cannot  find  symbol  jTj	10	None	add
3	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWidth());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWidth());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals,  getWidth());		non-compiled	[CE]  cannot  find  symbol  jTj	10	None	add
4	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);		non-compiled	[CE]  cannot  find  symbol  jTj	10	None	add
5	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  covar,  getWeight());  [CE]  cannot  find  symbol  covar  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    System.arraycopy(weightedResiduals,  0,  covar,  getWeight());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    System.arraycopy(weightedResiduals,  0,  covar,  getWeight());		non-compiled	[CE]  cannot  find  symbol  covar	10	None	add
11	[BUG]  [BUGGY]    int  cols  =  jF.getJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getJacobianEvaluations()  {  [BUGGY]    int  cols  =  jF.getJacobianEvaluations();  [BUGGY]  return  jacobianEvaluations;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getJacobianEvaluations  [RETURN_TYPE]  int  [VARIABLES]  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.0	141	141	1	replace	    int  cols  =  jF.getJacobianEvaluations();		non-compiled	[CE]  cannot  find  symbol	19	None	add
12	[BUG]  [BUGGY]    int  jacobianEvaluations  =  jF.getJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getJacobianEvaluations()  {  [BUGGY]    int  jacobianEvaluations  =  jF.getJacobianEvaluations();  [BUGGY]  return  jacobianEvaluations;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getJacobianEvaluations  [RETURN_TYPE]  int  [VARIABLES]  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.0	141	141	1	replace	    int  jacobianEvaluations  =  jF.getJacobianEvaluations();		non-compiled	[CE]  cannot  find  symbol	19	None	add
13	[BUG]  [BUGGY]    double[][]  rows  =  jF.getJacobianEvaluations();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getJacobianEvaluations()  {  [BUGGY]    double[][]  rows  =  jF.getJacobianEvaluations();  [BUGGY]  return  jacobianEvaluations;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getJacobianEvaluations  [RETURN_TYPE]  int  [VARIABLES]  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.0	141	141	1	replace	    double[][]  rows  =  jF.getJacobianEvaluations();		non-compiled	[CE]  cannot  find  symbol	19	None	add
14	[BUG]  [BUGGY]    int  jacobianEvaluations  =  this.weightedResidualJacobian.doubleValue();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getJacobianEvaluations()  {  [BUGGY]    int  jacobianEvaluations  =  this.weightedResidualJacobian.doubleValue();  [BUGGY]  return  jacobianEvaluations;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getJacobianEvaluations  [RETURN_TYPE]  int  [VARIABLES]  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.0	141	141	1	replace	    int  jacobianEvaluations  =  this.weightedResidualJacobian.doubleValue();		non-compiled	[CE]  cannot  find  symbol	19	None	add
15	[BUG]  [BUGGY]    int  jacobianEvaluations  =  this.weightedResidualJacobian.getCols();  [CE]  cannot  find  symbol  [CONTEXT]  public  int  getJacobianEvaluations()  {  [BUGGY]    int  jacobianEvaluations  =  this.weightedResidualJacobian.getCols();  [BUGGY]  return  jacobianEvaluations;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getJacobianEvaluations  [RETURN_TYPE]  int  [VARIABLES]  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.0	141	141	1	replace	    int  jacobianEvaluations  =  this.weightedResidualJacobian.getCols();		non-compiled	[CE]  cannot  find  symbol	19	None	add
21	[BUG]  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint);  [CE]  ';'  expected  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint);		non-compiled	[CE]  ';'  expected	6	None	add
22	[BUG]  [BUGGY]    final  PointVectorValuePair  optimize(f,  maxEval,  weights,  startPoint);  [CE]  ';'  expected  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    final  PointVectorValuePair  optimize(f,  maxEval,  weights,  startPoint);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    final  PointVectorValuePair  optimize(f,  maxEval,  weights,  startPoint);		non-compiled	[CE]  ';'  expected	6	None	add
23	[BUG]  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  false);  [CE]  ';'  expected  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  false);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  false);		non-compiled	[CE]  ';'  expected	6	None	add
24	[BUG]  [BUGGY]    final  int  colls  =  Math.min(maxEval,  weights,  startPoint);  [CE]  no  suitable  method  found  for  min(int,double[],double[])  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    final  int  colls  =  Math.min(maxEval,  weights,  startPoint);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    final  int  colls  =  Math.min(maxEval,  weights,  startPoint);		non-compiled	[CE]  no  suitable  method  found  for  min(int,double[],double[])	6	None	add
25	[BUG]  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  true);  [CE]  ';'  expected  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  true);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    final  PointVectorValuePair  optimize(maxEval,  f,  weights,  startPoint,  true);		non-compiled	[CE]  ';'  expected	6	None	add
31	[BUG]  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getLeastSuperlativeity());  }  [CE]  cannot  find  symbol  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getLeastSuperlativeity());  }  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getLeastSuperlativeity());  }		non-compiled	[CE]  cannot  find  symbol	4	None	add
32	[BUG]  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }  [CE]  cannot  find  symbol  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }		non-compiled	[CE]  cannot  find  symbol	4	None	add
33	[BUG]  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.get  [CE]  ';'  expected  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.get  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.get		non-compiled	[CE]  ';'  expected	4	None	add
34	[BUG]  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }  else  {  Preconditions.checkState(  [CE]  illegal  start  of  expression  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }  else  {  Preconditions.checkState(  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence());  }  else  {  Preconditions.checkState(		non-compiled	[CE]  illegal  start  of  expression	4	None	add
35	[BUG]  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.getOptional  [CE]  ';'  expected  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.getOptional  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	    if(checker.getStdDevValue()  ==  null)  {  double[][]  weightedResidualJacobian  =  getWorthMatrixSqrt().getIndexOf(jF.getConvergence()),  checker.getOptional		non-compiled	[CE]  ';'  expected	4	None	add
41	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  weightedResiduals);		non-compiled	[CE]  cannot  find  symbol  jTj	12	None	add
42	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  jacobianData.length);		non-compiled	[CE]  cannot  find  symbol  jTj	12	None	add
43	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  getWidth());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  getWidth());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  getWidth());		non-compiled	[CE]  cannot  find  symbol  jTj	12	None	add
44	[BUG]  [BUGGY]    weightedResiduals  =  getWidth();  [CE]  cannot  find  symbol  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedResiduals  =  getWidth();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedResiduals  =  getWidth();		non-compiled	[CE]  cannot  find  symbol	12	None	add
45	[BUG]  [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  covar,  getWeight());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    System.arraycopy(weightedResiduals,  0,  jTj,  0,  covar,  getWeight());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    System.arraycopy(weightedResiduals,  0,  jTj,  0,  covar,  getWeight());		non-compiled	[CE]  cannot  find  symbol  jTj	12	None	add
52	[BUG]  [BUGGY]  return  super.optimizeInternal(f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(maxEval),  optData);  [CE]  method  toDifferentiableMultivariateVectorFunction  in  class  FunctionUtils  cannot  be  applied  to  given  types;  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(maxEval),  optData);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(maxEval),  optData);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  method  toDifferentiableMultivariateVectorFunction  in  class  FunctionUtils  cannot  be  applied  to  given  types;	7	None	replace
53	[BUG]  [BUGGY]  return  super.optimizeOptimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [CE]  cannot  find  symbol  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeOptimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeOptimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
54	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData[optData]);  [CE]  incompatible  types  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData[optData]);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData[optData]);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  incompatible  types	7	None	replace
55	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	  	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  missing  return  statement	7	None	replace
61	[BUG]  [BUGGY]    jTj  =  squareRoot(getWeight());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  squareRoot(getWeight());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  squareRoot(getWeight());		non-compiled	[CE]  cannot  find  symbol  jTj	14	None	add
62	[BUG]  [BUGGY]    jTj  =  squareRoot(getWidth());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  squareRoot(getWidth());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  squareRoot(getWidth());		non-compiled	[CE]  cannot  find  symbol  jTj	14	None	add
63	[BUG]  [BUGGY]    jTj  =  squareRoot(getHeight());  [CE]  cannot  find  symbol  jTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  squareRoot(getHeight());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  squareRoot(getHeight());		non-compiled	[CE]  cannot  find  symbol  jTj	14	None	add
64	[BUG]  [BUGGY]    JTj  =  squareRoot(getWeight());  [CE]  cannot  find  symbol  JTj  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    JTj  =  squareRoot(getWeight());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    JTj  =  squareRoot(getWeight());		non-compiled	[CE]  cannot  find  symbol  JTj	14	None	add
65	[BUG]  [BUGGY]    weightedResiduals  =  squareRoot(getWeight());  [CE]  incompatible  types  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    weightedResiduals  =  squareRoot(getWeight());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    weightedResiduals  =  squareRoot(getWeight());		non-compiled	[CE]  incompatible  types	14	None	add
71	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  checker.getSize();  [CE]  illegal  start  of  expression  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]  this.weightMatrixSqrt  =  checker.getSize();  [BUGGY]    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  checker.getSize();	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  jF.getWorthMatrixSqrt();  [CE]  illegal  start  of  expression  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]  this.weightMatrixSqrt  =  jF.getWorthMatrixSqrt();  [BUGGY]    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  jF.getWorthMatrixSqrt();	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  jF.getSize();  [CE]  illegal  start  of  expression  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]  this.weightMatrixSqrt  =  jF.getSize();  [BUGGY]    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  jF.getSize();	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  jF.getWorthMatrix();  [CE]  illegal  start  of  expression  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);  [BUGGY]  this.weightMatrixSqrt  =  jF.getWorthMatrix();  [BUGGY]    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  jF.getWorthMatrix();	}  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedResiduals);  [CE]  no  suitable  constructor  found  for  EigenDecomposition(RealMatrix,double[])  [CONTEXT]  private  RealMatrix  squareRoot(RealMatrix  m)  {  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedResiduals);  [BUGGY]  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedResiduals);	final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  	non-compiled	[CE]  no  suitable  constructor  found  for  EigenDecomposition(RealMatrix,double[])	15	None	replace
83	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  i);  [CE]  cannot  find  symbol  i  [CONTEXT]  private  RealMatrix  squareRoot(RealMatrix  m)  {  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  i);  [BUGGY]  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  i);	final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  	non-compiled	[CE]  cannot  find  symbol  i	15	None	replace
84	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobianEvaluations);  [CE]  cannot  find  symbol  weightedJacobianEvaluations  [CONTEXT]  private  RealMatrix  squareRoot(RealMatrix  m)  {  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobianEvaluations);  [BUGGY]  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobianEvaluations);	final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  	non-compiled	[CE]  cannot  find  symbol  weightedJacobianEvaluations	15	None	replace
85	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  dec  [CONTEXT]  private  RealMatrix  squareRoot(RealMatrix  m)  {  [BUGGY]    [BUGGY]  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	  	final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  	non-compiled	[CE]  cannot  find  symbol  dec	15	None	replace
91	[BUG]  [BUGGY]    OptData[]  optData  =  f.getOptimizationData();  [CE]  cannot  find  symbol  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    OptData[]  optData  =  f.getOptimizationData();  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    OptData[]  optData  =  f.getOptimizationData();		non-compiled	[CE]  cannot  find  symbol	8	None	add
92	[BUG]  [BUGGY]    optData[opt]  =  f.getValue();  [CE]  cannot  find  symbol  opt  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    optData[opt]  =  f.getValue();  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    optData[opt]  =  f.getValue();		non-compiled	[CE]  cannot  find  symbol  opt	8	None	add
93	[BUG]  [BUGGY]    OptData[]  optData  =  f.getValue();  [CE]  cannot  find  symbol  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    OptData[]  optData  =  f.getValue();  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    OptData[]  optData  =  f.getValue();		non-compiled	[CE]  cannot  find  symbol	8	None	add
94	[BUG]  [BUGGY]    optData[]  =  f.getValue();  [CE]  not  a  statement  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    optData[]  =  f.getValue();  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    optData[]  =  f.getValue();		non-compiled	[CE]  not  a  statement	8	None	add
95	[BUG]  [BUGGY]    OptData[]  optData  =  f.getValues();  [CE]  cannot  find  symbol  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    OptData[]  optData  =  f.getValues();  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    OptData[]  optData  =  f.getValues();		non-compiled	[CE]  cannot  find  symbol	8	None	add
101	[BUG]  [BUGGY]    Preconditions.checkNotNull(checker);  [CE]  cannot  find  symbol  Preconditions  [CONTEXT]  protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  [BUGGY]    Preconditions.checkNotNull(checker);  [BUGGY]  super(checker);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	134	134	1	replace	    Preconditions.checkNotNull(checker);		non-compiled	[CE]  cannot  find  symbol  Preconditions	2	None	add
