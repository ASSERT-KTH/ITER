bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    weightedResidualJacobian  =  jTj.getMatrix();  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedResidualJacobian  =  jTj.getMatrix();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedResidualJacobian  =  jTj.getMatrix();		non-compiled	[CE]  '.class'  expected	12	None	add
2	[BUG]  [BUGGY]    weightedResidualJacobian  =  getMean();  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedResidualJacobian  =  getMean();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedResidualJacobian  =  getMean();		non-compiled	[CE]  '.class'  expected	12	None	add
3	[BUG]  [BUGGY]    weightedResidualJacobian  =  getFunctionMatrix();  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedResidualJacobian  =  getFunctionMatrix();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedResidualJacobian  =  getFunctionMatrix();		non-compiled	[CE]  '.class'  expected	12	None	add
4	[BUG]  [BUGGY]  jacobianEvaluations  =  1;  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]  jacobianEvaluations  =  1;  [BUGGY]    weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  1;	jacobianEvaluations  =  0;  	non-compiled	[CE]  '.class'  expected	11	None	replace
5	[BUG]  [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight());		non-compiled	[CE]  '.class'  expected	12	None	add
6	[BUG]  [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth());  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth());		non-compiled	[CE]  '.class'  expected	12	None	add
7	[BUG]  [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY());		non-compiled	[CE]  '.class'  expected	12	None	add
8	[BUG]  [BUGGY]    int  cols  =  getColumnCount();  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    int  cols  =  getColumnCount();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    int  cols  =  getColumnCount();		non-compiled	[CE]  '.class'  expected	12	None	add
9	[BUG]  [BUGGY]    int  cols  =  getColumnSize();  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    int  cols  =  getColumnSize();  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    int  cols  =  getColumnSize();		non-compiled	[CE]  '.class'  expected	12	None	add
10	[BUG]  [BUGGY]    jFrame.setMatrix(getMatrix());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();    [BUGGY]    jFrame.setMatrix(getMatrix());  [BUGGY]  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	    jFrame.setMatrix(getMatrix());		non-compiled	[CE]  '.class'  expected	12	None	add
