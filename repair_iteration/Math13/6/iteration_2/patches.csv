bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  weightedResidualJacobian  =  getWeight()  +  1;  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedResidualJacobian  =  getWeight()  +  1;  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getWeight()  +  1;	  weightedResidualJacobian    =    getWeight();    	non-compiled	[CE]  '.class'  expected	6	None	replace
2	[BUG]  [BUGGY]  weightedResidualJacobian  =  getMotionSquare();  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedResidualJacobian  =  getMotionSquare();  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getMotionSquare();	  weightedResidualJacobian    =    getMotionMatrix();    	non-compiled	[CE]  '.class'  expected	7	None	replace
3	[BUG]  [BUGGY]  weightedResidualJacobian  =  getMotionSqrt();  [CE]  '.class'  expected  [FE]                    OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedResidualJacobian  =  getMotionSqrt();  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getMotionSqrt();	  weightedResidualJacobian    =    getMotionMatrix();    	non-compiled	[CE]  '.class'  expected	7	None	replace
4	[BUG]  [BUGGY]  int  cols  =  getRowCount()  -  1;  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  int  cols  =  getRowCount()  -  1;  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getRowCount()  -  1;	  int    cols    =    getRowCount();    	non-compiled	[CE]  '.class'  expected	4	None	replace
5	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMinY());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMinY());  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMinY());	  weightedJacobianEvaluations    =    Math.min(weightedJacobianEvaluations,    getMaxY()    -    1);    	non-compiled	[CE]  '.class'  expected	9	None	replace
6	[BUG]  [BUGGY]  jacobianEvaluations  =  new  double[getHeight()  ];  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  jacobianEvaluations  =  new  double[getHeight()  ];  [BUGGY]        weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  new  double[getHeight()  ];	  jacobianEvaluations    =    new    double[getWidth()    ];    	non-compiled	[CE]  '.class'  expected	1	None	replace
7	[BUG]  [BUGGY]  jacobianEvaluations  =  new  double[getWidth()  +  1];  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  jacobianEvaluations  =  new  double[getWidth()  +  1];  [BUGGY]        weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  new  double[getWidth()  +  1];	  jacobianEvaluations    =    new    double[getWidth()    ];    	non-compiled	[CE]  '.class'  expected	1	None	replace
8	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  +  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  +  1);  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  +  1);	  weightedJacobianEvaluations    =    Math.min(weightedJacobianEvaluations,    getWeight());    	non-compiled	[CE]  '.class'  expected	17	None	replace
9	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getHeight());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getHeight());  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getHeight());	  weightedJacobianEvaluations    =    Math.min(weightedJacobianEvaluations,    getWidth());    	non-compiled	[CE]  '.class'  expected	13	None	replace
10	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth()  -  1);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth()  -  1);  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth()  -  1);	  weightedJacobianEvaluations    =    Math.min(weightedJacobianEvaluations,    getWidth());    	non-compiled	[CE]  '.class'  expected	13	None	replace
11	[BUG]  [BUGGY]  int  cols  =  getRowSize()  +  1;  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  int  cols  =  getRowSize()  +  1;  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getRowSize()  +  1;	  int    cols    =    getRowSize();    	non-compiled	[CE]  '.class'  expected	2	None	replace
12	[BUG]  [BUGGY]  jacobianEvaluations  =  new  double[getWeight()  ];  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  jacobianEvaluations  =  new  double[getWeight()  ];  [BUGGY]        weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  new  double[getWeight()  ];	  jacobianEvaluations    =    new    double[getWidth()    ];    	non-compiled	[CE]  '.class'  expected	1	None	replace
13	[BUG]  [BUGGY]  weightedResidualJacobian  =  getMotionSingularityThreshold();  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedResidualJacobian  =  getMotionSingularityThreshold();  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getMotionSingularityThreshold();	  weightedResidualJacobian    =    getMotionMatrix();    	non-compiled	[CE]  '.class'  expected	7	None	replace
14	[BUG]  [BUGGY]  weightedResidualJacobian  =  getWeight()  -  1;  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedResidualJacobian  =  getWeight()  -  1;  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getWeight()  -  1;	  weightedResidualJacobian    =    getWeight();    	non-compiled	[CE]  '.class'  expected	6	None	replace
15	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMinY());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {  super.setUp();        [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMinY());  [BUGGY]      jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMinY());	  weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getMaxY()    -    1);    	non-compiled	[CE]  '.class'  expected	18	None	replace
