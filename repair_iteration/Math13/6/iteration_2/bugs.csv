bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jacobianEvaluations  =  new  double[getWidth()  ];  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  jacobianEvaluations  =  new  double[getWidth()  ];  [BUGGY]      weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  new  double[getWidth()  ];	  jacobianEvaluations    =    1;    	non-compiled	[CE]  '.class'  expected	4	None	replace
2	[BUG]  [BUGGY]  int  cols  =  getRowSize();  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  int  cols  =  getRowSize();  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getRowSize();	      int    cols    =    getColumnSize();    	non-compiled	[CE]  '.class'  expected	9	None	replace
3	[BUG]  [BUGGY]  int  cols  =  getColumnSize()  +  1;  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  int  cols  =  getColumnSize()  +  1;  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getColumnSize()  +  1;	      int    cols    =    getColumnSize();    	non-compiled	[CE]  '.class'  expected	9	None	replace
4	[BUG]  [BUGGY]  int  cols  =  getRowCount();  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  int  cols  =  getRowCount();  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getRowCount();	      int    cols    =    getColumnCount();    	non-compiled	[CE]  '.class'  expected	8	None	replace
5	[BUG]  [BUGGY]  int  cols  =  getColumnCount()  -  1;  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  int  cols  =  getColumnCount()  -  1;  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	int  cols  =  getColumnCount()  -  1;	      int    cols    =    getColumnCount();    	non-compiled	[CE]  '.class'  expected	8	None	replace
6	[BUG]  [BUGGY]  weightedResidualJacobian  =  getWeight();  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedResidualJacobian  =  getWeight();  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getWeight();	      weightedResidualJacobian    =    getFunctionMatrix();    	non-compiled	[CE]  '.class'  expected	3	None	replace
7	[BUG]  [BUGGY]  weightedResidualJacobian  =  getMotionMatrix();  [CE]  '.class'  expected  [FE]              OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedResidualJacobian  =  getMotionMatrix();  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedResidualJacobian  =  getMotionMatrix();	      weightedResidualJacobian    =    getFunctionMatrix();    	non-compiled	[CE]  '.class'  expected	3	None	replace
8	[BUG]  [BUGGY]  jFrame.setMatrix(getMatrix()  +  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  jFrame.setMatrix(getMatrix()  +  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jFrame.setMatrix(getMatrix()  +  1);	      jFrame.setMatrix(getMatrix());    	non-compiled	[CE]  '.class'  expected	10	None	replace
9	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY()  -  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY()  -  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY()  -  1);	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getMaxY());    	non-compiled	[CE]  '.class'  expected	7	None	replace
10	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight()  -  1);  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight()  -  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWeight()  -  1);	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWeight());    	non-compiled	[CE]  '.class'  expected	5	None	replace
11	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  -  1);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  -  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight()  -  1);	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWeight());    	non-compiled	[CE]  '.class'  expected	5	None	replace
12	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getHeight());  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getHeight());  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getHeight());	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWidth());    	non-compiled	[CE]  '.class'  expected	6	None	replace
13	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth());  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth());  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWidth());	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWidth());    	non-compiled	[CE]  '.class'  expected	6	None	replace
14	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY());  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY());  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getMaxY());	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getMaxY());    	non-compiled	[CE]  '.class'  expected	7	None	replace
15	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth()  -  1);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth()  -  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getWidth()  -  1);	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWidth());    	non-compiled	[CE]  '.class'  expected	6	None	replace
16	[BUG]  [BUGGY]  jacobianEvaluations  =  2;  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  jacobianEvaluations  =  2;  [BUGGY]      weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	jacobianEvaluations  =  2;	  jacobianEvaluations    =    1;    	non-compiled	[CE]  '.class'  expected	4	None	replace
17	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight());  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight());  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.min(weightedJacobianEvaluations,  getWeight());	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getWeight());    	non-compiled	[CE]  '.class'  expected	5	None	replace
18	[BUG]  [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY()  -  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  void  setUp()  {  super.setUp();      [BUGGY]  weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY()  -  1);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());        [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	505	505	1	replace	weightedJacobianEvaluations  =  Math.max(weightedJacobianEvaluations,  getMaxY()  -  1);	      weightedJacobianEvaluations    =    Math.max(weightedJacobianEvaluations,    getMaxY());    	non-compiled	[CE]  '.class'  expected	7	None	replace
