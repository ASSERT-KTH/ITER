bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxX());  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxX());  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.getMaxX());	  int    maxEval    =    Math.min(maxEval,    f.getMaxY());    	non-compiled	[CE]  '.class'  expected	3	None	replace
2	[BUG]  [BUGGY]  return  optimizeInternal(f,  target,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  target,  new  Target(maxEval),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  target,  new  Target(maxEval),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	7	None	replace
3	[BUG]  [BUGGY]  double[][]  weights  =  f.getEvaluators();  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  double[][]  weights  =  f.getEvaluators();  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	double[][]  weights  =  f.getEvaluators();	  double[][]    weights    =    f.getMeanEvaluators();    	non-compiled	[CE]  '.class'  expected	17	None	replace
4	[BUG]  [BUGGY]  return  optimize(target,  f,  new  Target(startPoint),  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimize(target,  f,  new  Target(startPoint),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(target,  f,  new  Target(startPoint),	  return    optimize(target,    f,    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	9	None	replace
5	[BUG]  [BUGGY]  return  optimize(f,  target,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimize(f,  target,  new  Target(maxEval),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(f,  target,  new  Target(maxEval),	  return    optimize(target,    f,    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	9	None	replace
6	[BUG]  [BUGGY]  double[][]  weights  =  f.getMeanEvaluations()  +  1;  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  double[][]  weights  =  f.getMeanEvaluations()  +  1;  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	double[][]  weights  =  f.getMeanEvaluations()  +  1;	  double[][]    weights    =    f.getMeanEvaluations();    	non-compiled	[CE]  '.class'  expected	1	None	replace
7	[BUG]  [BUGGY]  return  optimize(target,  maxEval,  new  Target(f),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimize(target,  maxEval,  new  Target(f),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(target,  maxEval,  new  Target(f),	  return    optimize(maxEval,    target,    new    Target(f),    	non-compiled	[CE]  '.class'  expected	10	None	replace
8	[BUG]  [BUGGY]  return  optimizeInternal(f,  target,  new  Target(startPoint),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  target,  new  Target(startPoint),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  target,  new  Target(startPoint),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
9	[BUG]  [BUGGY]  return  optimizeInternal(f,  target,  new  Target(maxEval),  new  Target(target),  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  target,  new  Target(maxEval),  new  Target(target),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  target,  new  Target(maxEval),  new  Target(target),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
10	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.length  -  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.length  -  1);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.length  -  1);	  int    maxEval    =    Math.max(maxEval,    f.length);    	non-compiled	[CE]  '.class'  expected	13	None	replace
11	[BUG]  [BUGGY]  return  optimizeInternal(target,  f,  new  Target(startPoint),  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(target,  f,  new  Target(startPoint),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(target,  f,  new  Target(startPoint),	  return    optimizeInternal(target,    f,    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	8	None	replace
12	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxEval()  +  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxEval()  +  1);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxEval()  +  1);	  int    maxEval    =    Math.max(maxEval,    f.getMaxEval());    	non-compiled	[CE]  '.class'  expected	21	None	replace
13	[BUG]  [BUGGY]  [][]  weights  =  f.getMeanEvaluations();  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  [][]  weights  =  f.getMeanEvaluations();  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	[][]  weights  =  f.getMeanEvaluations();	  [][]    weights    =    f.getMean();    	non-compiled	[CE]  '.class'  expected	14	None	replace
14	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.length  -  2);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.length  -  2);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.length  -  2);	  int    maxEval    =    Math.min(maxEval,    f.length    -    1);    	non-compiled	[CE]  '.class'  expected	12	None	replace
15	[BUG]  [BUGGY]  return  optimizeInternal(target,  maxEval,  new  Target(f),  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(target,  maxEval,  new  Target(f),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(target,  maxEval,  new  Target(f),	  return    optimizeInternal(f,    maxEval,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	11	None	replace
16	[BUG]  [BUGGY]  [][]  weights  =  f.getMeanEvaluators();  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  [][]  weights  =  f.getMeanEvaluators();  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	[][]  weights  =  f.getMeanEvaluators();	  [][]    weights    =    f.getMean();    	non-compiled	[CE]  '.class'  expected	14	None	replace
17	[BUG]  [BUGGY]  return  optimizeInternal(f,  startPoint,  new  Target(target),  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  startPoint,  new  Target(target),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  startPoint,  new  Target(target),	  return    optimizeInternal(f,    maxEval,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	11	None	replace
18	[BUG]  [BUGGY]  return  optimizeInternal(f,  f,  new  Target(startPoint),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  f,  new  Target(startPoint),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  f,  new  Target(startPoint),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
19	[BUG]  [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(weights,  startPoint)  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(weights,  startPoint)  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(weights,  startPoint)	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
20	[BUG]  [BUGGY]  int  cols  =  Math.min(weights.length,  startPoint,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  cols  =  Math.min(weights.length,  startPoint,  maxEval);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.min(weights.length,  startPoint,  maxEval);	  int    cols    =    Math.min(weights.length,    startPoint);    	non-compiled	[CE]  '.class'  expected	15	None	replace
21	[BUG]  [BUGGY]  return  optimizeInternal(f,  f,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  f,  new  Target(maxEval),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  f,  new  Target(maxEval),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	7	None	replace
22	[BUG]  [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint)  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint)  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint)	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	7	None	replace
23	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxY()  -  startPoint);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxY()  -  startPoint);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.getMaxY()  -  startPoint);	  int    maxEval    =    Math.min(maxEval,    f.getMaxY());    	non-compiled	[CE]  '.class'  expected	3	None	replace
24	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  startPoint);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  startPoint);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  startPoint);	  int    maxEval    =    Math.max(maxEval,    f.getMaxX());    	non-compiled	[CE]  '.class'  expected	2	None	replace
25	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  1);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxX()  -  1);	  int    maxEval    =    Math.max(maxEval,    f.getMaxX());    	non-compiled	[CE]  '.class'  expected	2	None	replace
26	[BUG]  [BUGGY]  int  cols  =  Math.max(weights.length,  weights.length);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  cols  =  Math.max(weights.length,  weights.length);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.max(weights.length,  weights.length);	  int    cols    =    Math.max(weights.length,    startPoint);    	non-compiled	[CE]  '.class'  expected	16	None	replace
27	[BUG]  [BUGGY]  return  optimize(f,  f,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimize(f,  f,  new  Target(maxEval),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(f,  f,  new  Target(maxEval),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	7	None	replace
28	[BUG]  [BUGGY]  return  optimizeInternal(f,  target,  new  Target(target),  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  target,  new  Target(target),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  target,  new  Target(target),	  return    optimizeInternal(f,    maxEval,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	11	None	replace
29	[BUG]  [BUGGY]  double[][]  weights  =  f.getMeanEvaluations(maxEval);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  double[][]  weights  =  f.getMeanEvaluations(maxEval);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	double[][]  weights  =  f.getMeanEvaluations(maxEval);	  double[][]    weights    =    f.getMeanEvaluations();    	non-compiled	[CE]  '.class'  expected	1	None	replace
30	[BUG]  [BUGGY]  return  optimizeInternal(f,  f,  new  Target(startPoint),  new  Target(target),  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimizeInternal(f,  f,  new  Target(startPoint),  new  Target(target),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  f,  new  Target(startPoint),  new  Target(target),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
31	[BUG]  [BUGGY]  return  optimize(f,  f,  new  Target(startPoint),  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  return  optimize(f,  f,  new  Target(startPoint),  [BUGGY]      FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(f,  f,  new  Target(startPoint),	  return    optimizeInternal(f,    FunctionUtils.toMultivariateDifferentiableVectorFunction(target),    new    Target(startPoint),    	non-compiled	[CE]  '.class'  expected	18	None	replace
32	[BUG]  [BUGGY]  int  cols  =  Math.min(weights.length,  weights.length);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {      [BUGGY]  int  cols  =  Math.min(weights.length,  weights.length);  [BUGGY]      return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.min(weights.length,  weights.length);	  int    cols    =    Math.min(weights.length,    startPoint);    	non-compiled	[CE]  '.class'  expected	15	None	replace
