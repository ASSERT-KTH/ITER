bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double[][]  weights  =  f.getMatrixes();  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    double[][]  weights  =  f.getMatrixes();  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    double[][]  weights  =  f.getMatrixes();		non-compiled	[CE]  '.class'  expected	6	None	add
2	[BUG]  [BUGGY]    int  cols  =  Math.min(weights.length,  maxEval);  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    int  cols  =  Math.min(weights.length,  maxEval);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    int  cols  =  Math.min(weights.length,  maxEval);		non-compiled	[CE]  '.class'  expected	6	None	add
3	[BUG]  [BUGGY]    double[][]  weights  =  f.getMean();  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    double[][]  weights  =  f.getMean();  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    double[][]  weights  =  f.getMean();		non-compiled	[CE]  '.class'  expected	6	None	add
4	[BUG]  [BUGGY]  return  optimizeInternal(maxEval,  f,  new  Target(target),  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]  return  optimizeInternal(maxEval,  f,  new  Target(target),  [BUGGY]  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(maxEval,  f,  new  Target(target),	return  optimizeInternal(maxEval,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),        new  Target(target),  	non-compiled	[CE]  '.class'  expected	5	None	replace
5	[BUG]  [BUGGY]  return  optimizeInternal(target,  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(maxEval),  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]  return  optimizeInternal(target,  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(maxEval),  [BUGGY]  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(target,  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(maxEval),	return  optimizeInternal(maxEval,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),        new  Target(target),  	non-compiled	[CE]  '.class'  expected	5	None	replace
6	[BUG]  [BUGGY]    int  maxEval  =  Math.min(maxEval,  f.getMaxEval());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    int  maxEval  =  Math.min(maxEval,  f.getMaxEval());  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    int  maxEval  =  Math.min(maxEval,  f.getMaxEval());		non-compiled	[CE]  '.class'  expected	6	None	add
7	[BUG]  [BUGGY]    int  maxEval  =  Math.min(maxEval,  f.length);  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    int  maxEval  =  Math.min(maxEval,  f.length);  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    int  maxEval  =  Math.min(maxEval,  f.length);		non-compiled	[CE]  '.class'  expected	6	None	add
8	[BUG]  [BUGGY]    int  maxEval  =  Math.max(maxEval,  f.getMaxY());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    int  maxEval  =  Math.max(maxEval,  f.getMaxY());  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    int  maxEval  =  Math.max(maxEval,  f.getMaxY());		non-compiled	[CE]  '.class'  expected	6	None	add
9	[BUG]  [BUGGY]    double[][]  weights  =  f.getMeanValues();  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]    double[][]  weights  =  f.getMeanValues();  [BUGGY]  return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	    double[][]  weights  =  f.getMeanValues();		non-compiled	[CE]  '.class'  expected	6	None	add
10	[BUG]  [BUGGY]  return  optimize(maxEval,  f,  new  Target(target),  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {  [BUGGY]  return  optimize(maxEval,  f,  new  Target(target),  [BUGGY]  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(maxEval,  f,  new  Target(target),	return  optimizeInternal(maxEval,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),        new  Target(target),  	non-compiled	[CE]  '.class'  expected	5	None	replace
