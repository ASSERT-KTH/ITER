bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[][]  weights  =  f.getMeanEvaluations();  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  double[][]  weights  =  f.getMeanEvaluations();  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	double[][]  weights  =  f.getMeanEvaluations();	      double[][]    weights    =    f.getMeanValues();    	non-compiled	[CE]  '.class'  expected	9	None	replace
2	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX());  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxX());  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxX());	      int    maxEval    =    Math.max(maxEval,    f.getMaxY());    	non-compiled	[CE]  '.class'  expected	8	None	replace
3	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxY());  [CE]  '.class'  expected  [FE]              OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxY());  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.getMaxY());	      int    maxEval    =    Math.max(maxEval,    f.getMaxY());    	non-compiled	[CE]  '.class'  expected	8	None	replace
4	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  -  1);  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  -  1);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  -  1);	      int    maxEval    =    Math.min(maxEval,    f.getMaxEval());    	non-compiled	[CE]  '.class'  expected	6	None	replace
5	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  +  1);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  +  1);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.getMaxEval()  +  1);	      int    maxEval    =    Math.min(maxEval,    f.getMaxEval());    	non-compiled	[CE]  '.class'  expected	6	None	replace
6	[BUG]  [BUGGY]  [][]  weights  =  f.getMatrixes();  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  [][]  weights  =  f.getMatrixes();  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	[][]  weights  =  f.getMatrixes();	      double[][]    weights    =    f.getMatrixes();    	non-compiled	[CE]  '.class'  expected	1	None	replace
7	[BUG]  [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(maxEval),  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(maxEval),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(maxEval),	  return    optimizeInternal(target,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	5	None	replace
8	[BUG]  [BUGGY]  return  optimizeInternal(target,  f,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimizeInternal(target,  f,  new  Target(maxEval),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(target,  f,  new  Target(maxEval),	  return    optimizeInternal(target,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	5	None	replace
9	[BUG]  [BUGGY]  return  optimize(target,  f,  new  Target(maxEval),  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimize(target,  f,  new  Target(maxEval),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(target,  f,  new  Target(maxEval),	  return    optimize(maxEval,    f,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	10	None	replace
10	[BUG]  [BUGGY]  return  optimize(maxEval,  target,  new  Target(f),  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimize(maxEval,  target,  new  Target(f),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimize(maxEval,  target,  new  Target(f),	  return    optimize(maxEval,    f,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	10	None	replace
11	[BUG]  [BUGGY]  return  optimizeInternal(f,  maxEval,  new  Target(target),  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimizeInternal(f,  maxEval,  new  Target(target),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  maxEval,  new  Target(target),	  return    optimizeInternal(maxEval,    f,    new    Target(target),    	non-compiled	[CE]  '.class'  expected	4	None	replace
12	[BUG]  [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.length  -  1);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.min(maxEval,  f.length  -  1);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.min(maxEval,  f.length  -  1);	      int    maxEval    =    Math.min(maxEval,    f.length);    	non-compiled	[CE]  '.class'  expected	7	None	replace
13	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.length);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.length);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.length);	      int    maxEval    =    Math.min(maxEval,    f.length);    	non-compiled	[CE]  '.class'  expected	7	None	replace
14	[BUG]  [BUGGY]  [][]  weights  =  f.getMean();  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  [][]  weights  =  f.getMean();  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	[][]  weights  =  f.getMean();	      double[][]    weights    =    f.getMean();    	non-compiled	[CE]  '.class'  expected	3	None	replace
15	[BUG]  [BUGGY]  int  cols  =  Math.min(weights.length,  startPoint);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  cols  =  Math.min(weights.length,  startPoint);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.min(weights.length,  startPoint);	      int    cols    =    Math.min(weights.length,    maxEval);    	non-compiled	[CE]  '.class'  expected	2	None	replace
16	[BUG]  [BUGGY]  int  cols  =  Math.max(weights.length,  startPoint);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  cols  =  Math.max(weights.length,  startPoint);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.max(weights.length,  startPoint);	      int    cols    =    Math.min(weights.length,    maxEval);    	non-compiled	[CE]  '.class'  expected	2	None	replace
17	[BUG]  [BUGGY]  double[][]  weights  =  f.getMeanEvaluators();  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  double[][]  weights  =  f.getMeanEvaluators();  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	double[][]  weights  =  f.getMeanEvaluators();	      double[][]    weights    =    f.getMean();    	non-compiled	[CE]  '.class'  expected	3	None	replace
18	[BUG]  [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint),  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint),  [BUGGY]    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	return  optimizeInternal(f,  FunctionUtils.toMultivariateDifferentiableVectorFunction(target),  new  Target(startPoint),	  return    optimizeInternal(target,    FunctionUtils.toMultivariateDifferentiableVectorFunction(f),    new    Target(maxEval),    	non-compiled	[CE]  '.class'  expected	5	None	replace
19	[BUG]  [BUGGY]  int  cols  =  Math.max(weights.length,  maxEval);  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  cols  =  Math.max(weights.length,  maxEval);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  cols  =  Math.max(weights.length,  maxEval);	      int    cols    =    Math.min(weights.length,    maxEval);    	non-compiled	[CE]  '.class'  expected	2	None	replace
20	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxY()  -  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxY()  -  1);  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxY()  -  1);	      int    maxEval    =    Math.max(maxEval,    f.getMaxY());    	non-compiled	[CE]  '.class'  expected	8	None	replace
21	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxEval());  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    public  PointVectorValuePair  optimize(int  maxEval,  final  DifferentiableMultivariateVectorFunction  f,  final  double[]  target,  final  double[]  weights,  final  double[]  startPoint)  {    [BUGGY]  int  maxEval  =  Math.max(maxEval,  f.getMaxEval());  [BUGGY]    return  optimizeInternal(maxEval,        FunctionUtils.toMultivariateDifferentiableVectorFunction(f),                new  Target(target),  FunctionUtils.toMultivariateDifferentiableVectorFunction(f),  new  Target(target),  new  Weight(weights),  new  InitialGuess(startPoint));  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimize  [RETURN_TYPE]  PointVectorValuePair  int  maxEval  DifferentiableMultivariateVectorFunction  f  final  double[]  target  final  double[]  weights  final  double[]  startPoint  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  DifferentiableMultivariateVectorFunction  f  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	423	425	1	replace	int  maxEval  =  Math.max(maxEval,  f.getMaxEval());	      int    maxEval    =    Math.min(maxEval,    f.getMaxEval());    	non-compiled	[CE]  '.class'  expected	6	None	replace
