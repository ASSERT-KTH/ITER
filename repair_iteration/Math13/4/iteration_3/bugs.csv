bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData,  maxEval);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData,  maxEval);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableVectorFunction(optData),    f,    optData);    	non-compiled	[CE]  '.class'  expected	33	None	replace
2	[BUG]  [BUGGY]  final  int  maxEval  =  Math.max(maxEval,  optData.length  -  2);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  final  int  maxEval  =  Math.max(maxEval,  optData.length  -  2);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	final  int  maxEval  =  Math.max(maxEval,  optData.length  -  2);	  final    int    maxEval    =    Math.max(maxEval,    optData.length    -    1);    	non-compiled	[CE]  '.class'  expected	13	None	replace
3	[BUG]  [BUGGY]  optimizeInternal(optData,  f,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  optimizeInternal(optData,  f,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	optimizeInternal(optData,  f,  maxEval);	  optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	32	None	replace
4	[BUG]  [BUGGY]  optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);	  optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	32	None	replace
5	[BUG]  [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    ++i)    {    double[][]    weightedJacobianData    =    f.weightedJacobianData[i]    }    	non-compiled	[CE]  '.class'  expected	43	None	replace
6	[BUG]  [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    weightedResiduals    =    optData[i];    if(weightedResiduals[i]    	non-compiled	[CE]  '.class'  expected	7	None	replace
7	[BUG]  [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResi  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResi  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResi	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    weightedResiduals    =    optData[i];    if(weightedResiduals[i]    	non-compiled	[CE]  '.class'  expected	7	None	replace
8	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  optData.length  -  2);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  Math.max(maxEval,  optData.length  -  2);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  Math.max(maxEval,  optData.length  -  2);	  int    maxEval    =    Math.max(maxEval,    optData.length    -    1);    	non-compiled	[CE]  '.class'  expected	9	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);  }  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);  }	  for(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);    }    	non-compiled	[CE]  '.class'  expected	41	None	replace
10	[BUG]  [BUGGY]  int  maxEval  =  maxEval;  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  maxEval;  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  maxEval;	  int    maxEval    =    optData.length;    	non-compiled	[CE]  '.class'  expected	29	None	replace
11	[BUG]  [BUGGY]  int  maxEval  =  optData.length  -  1;  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  optData.length  -  1;  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  optData.length  -  1;	  int    maxEval    =    optData.length;    	non-compiled	[CE]  '.class'  expected	29	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);    }    	non-compiled	[CE]  '.class'  expected	15	None	replace
14	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData),  true);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData),  true);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData),  true);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f,    optData),    false);    	non-compiled	[CE]  '.class'  expected	30	None	replace
15	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  false);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  false);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  false);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f,    optData),    false);    	non-compiled	[CE]  '.class'  expected	30	None	replace
16	[BUG]  [BUGGY]  return  optimizeInternal(optData,  f,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  optimizeInternal(optData,  f,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  optimizeInternal(optData,  f,  maxEval);	  return    optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	6	None	replace
17	[BUG]  [BUGGY]  return  optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  optimizeInternal(maxEval,  f,  optData,  weightedResidualJacobian);	  return    optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	6	None	replace
18	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  f,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  f,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  f,  optData);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableVectorFunction(optData),    optData);    	non-compiled	[CE]  '.class'  expected	11	None	replace
19	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData,  maxEval);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData,  maxEval);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    maxEval);    	non-compiled	[CE]  '.class'  expected	5	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getValue();  }  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getValue();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getValue();  }	  for(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getValue();    }    	non-compiled	[CE]  '.class'  expected	36	None	replace
21	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  maxEval),  f);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  maxEval),  f);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  maxEval),  f);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f,    optData),    f);    	non-compiled	[CE]  '.class'  expected	40	None	replace
22	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  f),  optData);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f,    optData),    f);    	non-compiled	[CE]  '.class'  expected	40	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  f.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0,  cols  =  f.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0,  cols  =  f.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =	  for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    cov    =    f.getVarianceSingularityThreshold();    for(int    j    =    	non-compiled	[CE]  '.class'  expected	16	None	replace
24	[BUG]  [BUGGY]  Integer  maxEval  =  optData.getOptimizer().toDifferentiableMultivariateVectorFunction(f);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  Integer  maxEval  =  optData.getOptimizer().toDifferentiableMultivariateVectorFunction(f);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	Integer  maxEval  =  optData.getOptimizer().toDifferentiableMultivariateVectorFunction(f);	  Integer    maxEval    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(maxEval);    	non-compiled	[CE]  '.class'  expected	27	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }	  for(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.clone();    }    	non-compiled	[CE]  '.class'  expected	1	None	replace
26	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightedResidualJacobian);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightedResidualJacobian);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightedResidualJacobian);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    optData);    	non-compiled	[CE]  '.class'  expected	31	None	replace
27	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF,  jTj);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF,  jTj);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF,  jTj);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    jTj);    	non-compiled	[CE]  '.class'  expected	4	None	replace
28	[BUG]  [BUGGY]  safeOptimizer.optimizeInternal(f,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  safeOptimizer.optimizeInternal(f,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	safeOptimizer.optimizeInternal(f,  optData);	  if(optData!=    null)    {    return    new    PointVectorValuePair(maxEval,    maxEval);    }    	non-compiled	[CE]  '.class'  expected	39	None	replace
29	[BUG]  [BUGGY]  safeOptimizer.optimizeInternal(f,  maxEval,  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  safeOptimizer.optimizeInternal(f,  maxEval,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	safeOptimizer.optimizeInternal(f,  maxEval,  optData);	  if(optData!=    null)    {    return    new    PointVectorValuePair(maxEval,    maxEval);    }    	non-compiled	[CE]  '.class'  expected	39	None	replace
30	[BUG]  [BUGGY]  int  maxEval  =  Math.max(maxEval,  optData.length  +  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  Math.max(maxEval,  optData.length  +  1);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  Math.max(maxEval,  optData.length  +  1);	  int    maxEval    =    Math.max(maxEval,    optData.length);    	non-compiled	[CE]  '.class'  expected	8	None	replace
31	[BUG]  [BUGGY]  NutzenUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);	  NutzenUtils.optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	37	None	replace
32	[BUG]  [BUGGY]  NutzenUtils.optimizeInternal(optData,  f,  maxEval);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.optimizeInternal(optData,  f,  maxEval);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.optimizeInternal(optData,  f,  maxEval);	  NutzenUtils.optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	37	None	replace
33	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  optData);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),    optData);    	non-compiled	[CE]  '.class'  expected	10	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }	  for(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizedValue();    }    	non-compiled	[CE]  '.class'  expected	18	None	replace
35	[BUG]  [BUGGY]  Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  maxEval);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  maxEval);	  Integer    maxEval    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);    	non-compiled	[CE]  '.class'  expected	26	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    cov    =    f.getVarianceSingularityThreshold();    for(int    j    =    }    	non-compiled	[CE]  '.class'  expected	38	None	replace
37	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.getOptimizedValue();  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizedValue();    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
38	[BUG]  [BUGGY]  NutzenUtils.resetOptimizeInternal(optData,  maxEval,  f);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.resetOptimizeInternal(optData,  maxEval,  f);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.resetOptimizeInternal(optData,  maxEval,  f);	  NutzenUtils.resetOptimizeInternal(optData,    maxEval,    optData);    	non-compiled	[CE]  '.class'  expected	23	None	replace
39	[BUG]  [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  data.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  data.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData  ==  null)  {  for(int  i  =  0,  cols  =  data.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    data.length;    i    <    cols;    ++i)    {    double[][]    weightedJacobianData    =    f.weightedJacobian    	non-compiled	[CE]  '.class'  expected	42	None	replace
40	[BUG]  [BUGGY]  int  maxEval  =  optData.getOptimizedValue();  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  optData.getOptimizedValue();  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  optData.getOptimizedValue();	  int    maxEval    =    f.getOptimizedValue();    	non-compiled	[CE]  '.class'  expected	28	None	replace
41	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  weightedResidualJacobian);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  weightedResidualJacobian);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  weightedResidualJacobian);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableVectorFunction(f),    optData);    	non-compiled	[CE]  '.class'  expected	20	None	replace
42	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  optData));  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  optData));  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,  optData));	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,    f));    	non-compiled	[CE]  '.class'  expected	21	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	For(int  i  =  0;  i  <  optData.length;  i++)  {  optData[i]  =  f.clone();  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.clone();    }    	non-compiled	[CE]  '.class'  expected	2	None	replace
44	[BUG]  [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  optData);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.resetOptimizeInternal(maxEval,  optData);	  NutzenUtils.resetOptimizeInternal(optData,    maxEval);    	non-compiled	[CE]  '.class'  expected	24	None	replace
45	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  optData);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    optData);    	non-compiled	[CE]  '.class'  expected	31	None	replace
46	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  maxEval);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  maxEval);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    maxEval);    	non-compiled	[CE]  '.class'  expected	5	None	replace
47	[BUG]  [BUGGY]  NutzenUtils.resetOptimizeInternal(f,  maxEval,  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.resetOptimizeInternal(f,  maxEval,  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.resetOptimizeInternal(f,  maxEval,  optData);	  NutzenUtils.resetOptimizeInternal(optData,    maxEval,    optData);    	non-compiled	[CE]  '.class'  expected	23	None	replace
48	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightMatrixSqrt);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightMatrixSqrt);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  weightMatrixSqrt);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    jTj);    	non-compiled	[CE]  '.class'  expected	4	None	replace
49	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData));  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData));  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData));	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(optData,    f));    	non-compiled	[CE]  '.class'  expected	21	None	replace
50	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData),  true);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData),  true);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f,  optData),  true);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f,    optData),    false);    	non-compiled	[CE]  '.class'  expected	30	None	replace
51	[BUG]  [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    cov    =    f.getVarianceSingularityThreshold();    for(int    j    =    }    	non-compiled	[CE]  '.class'  expected	38	None	replace
52	[BUG]  [BUGGY]  optimizeInternal(f,  maxEval,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  optimizeInternal(f,  maxEval,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	optimizeInternal(f,  maxEval,  optData);	  optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	32	None	replace
53	[BUG]  [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData  ==  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  weightedResiduals  =  optData[i];  if(weightedResiduals[i]  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    weightedResiduals    =    optData[i];    if(weightedResiduals[i]    	non-compiled	[CE]  '.class'  expected	7	None	replace
54	[BUG]  [BUGGY]  return  optimizeInternal(f,  maxEval,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  optimizeInternal(f,  maxEval,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  optimizeInternal(f,  maxEval,  optData);	  return    optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	6	None	replace
55	[BUG]  [BUGGY]  NutzenUtils.checkInternal(optData,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.checkInternal(optData,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.checkInternal(optData,  maxEval);	  if(optData!=    null)    {    return    new    PointVectorValuePair(maxEval,    maxEval);    }    	non-compiled	[CE]  '.class'  expected	39	None	replace
56	[BUG]  [BUGGY]  safeAdd(optData,  maxEval,  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  safeAdd(optData,  maxEval,  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	safeAdd(optData,  maxEval,  optData);	  if(optData!=    null)    {    return    new    PointVectorValuePair(maxEval,    maxEval);    }    	non-compiled	[CE]  '.class'  expected	39	None	replace
57	[BUG]  [BUGGY]  int  maxEval  =  f.length;  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  f.length;  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  f.length;	  int    maxEval    =    optData.length;    	non-compiled	[CE]  '.class'  expected	29	None	replace
58	[BUG]  [BUGGY]  optimizeInternal(maxEval,  f,  optData,  false);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  optimizeInternal(maxEval,  f,  optData,  false);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	optimizeInternal(maxEval,  f,  optData,  false);	  optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	32	None	replace
59	[BUG]  [BUGGY]  for(int  cols  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  cols  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  cols  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =	  for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    cov    =    f.getVarianceSingularityThreshold();    for(int    j    =    	non-compiled	[CE]  '.class'  expected	16	None	replace
60	[BUG]  [BUGGY]  for(int  cols  =  0,  cols  =  cov.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  for(int  cols  =  0,  cols  =  cov.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	for(int  cols  =  0,  cols  =  cov.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =	  for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    i++)    {    double[][]    cov    =    f.getVarianceSingularityThreshold();    for(int    j    =    	non-compiled	[CE]  '.class'  expected	16	None	replace
61	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  maxEval  -  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  maxEval  -  1);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  maxEval  -  1);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableMultivariateVectorFunction(f),    optData,    maxEval);    	non-compiled	[CE]  '.class'  expected	5	None	replace
62	[BUG]  [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  f.optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  if(optData!=  null)  {  for(int  i  =  0,  cols  =  f.optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	if(optData!=  null)  {  for(int  i  =  0,  cols  =  f.optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  }	  if(optData!=    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    ++i)    {    double[][]    weightedJacobianData    =    f.weightedJacobianData[i]    }    	non-compiled	[CE]  '.class'  expected	43	None	replace
63	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  jF);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  jF);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(f),  optData,  jF);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableVectorFunction(f),    optData);    	non-compiled	[CE]  '.class'  expected	20	None	replace
64	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.clone();    }    	non-compiled	[CE]  '.class'  expected	2	None	replace
65	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	Integer  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }	  For(int    i    =    0;    i    <    maxEval;    i++)    {    optData[i]    =    f.getOptimizedValue();    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
66	[BUG]  [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  maxEval,  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  maxEval,  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.resetOptimizeInternal(maxEval,  maxEval,  optData);	  NutzenUtils.resetOptimizeInternal(optData,    maxEval,    optData);    	non-compiled	[CE]  '.class'  expected	23	None	replace
67	[BUG]  [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  f,  optData);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.resetOptimizeInternal(maxEval,  f,  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.resetOptimizeInternal(maxEval,  f,  optData);	  NutzenUtils.resetOptimizeInternal(optData,    maxEval,    optData);    	non-compiled	[CE]  '.class'  expected	23	None	replace
68	[BUG]  [BUGGY]  VorteilUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  VorteilUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	VorteilUtils.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);	  NutzenUtils.optimizeInternal(maxEval,    f,    optData);    	non-compiled	[CE]  '.class'  expected	37	None	replace
69	[BUG]  [BUGGY]  double[][]  weightedJacobianData  =  f.weightedJacobian  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  double[][]  weightedJacobianData  =  f.weightedJacobian  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	double[][]  weightedJacobianData  =  f.weightedJacobian	  if(optData    ==    null)    {    for(int    i    =    0,    cols    =    optData.length;    i    <    cols;    ++i)    {    double[][]    weightedJacobianData    =    f.weightedJacobian    	non-compiled	[CE]  '.class'  expected	3	None	replace
70	[BUG]  [BUGGY]  Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  optData);  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	Integer  maxEval  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData,  optData);	  Integer    maxEval    =    f.getOptimizer().toDifferentiableMultivariateVectorFunction(optData);    	non-compiled	[CE]  '.class'  expected	26	None	replace
71	[BUG]  [BUGGY]  NutzenUtils.checkInternalValue(optData,  maxEval);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  NutzenUtils.checkInternalValue(optData,  maxEval);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	NutzenUtils.checkInternalValue(optData,  maxEval);	  if(optData!=    null)    {    return    new    PointVectorValuePair(maxEval,    maxEval);    }    	non-compiled	[CE]  '.class'  expected	39	None	replace
72	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData);  [BUGGY]      }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  f,  FunctionUtils.toDifferentiableVectorFunction(optData),  optData);	  return    super.optimizeInternal(maxEval,    FunctionUtils.toDifferentiableVectorFunction(optData),    optData);    	non-compiled	[CE]  '.class'  expected	11	None	replace
73	[BUG]  [BUGGY]  int  maxEval  =  f.getMaximumValue();  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {        [BUGGY]  int  maxEval  =  f.getMaximumValue();  [BUGGY]      return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	int  maxEval  =  f.getMaximumValue();	  int    maxEval    =    f.getOptimizedValue();    	non-compiled	[CE]  '.class'  expected	28	None	replace
