bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  f);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  f);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(optData),  f);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  '.class'  expected	7	None	replace
2	[BUG]  [BUGGY]    [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	  	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  '.class'  expected	7	None	replace
3	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizedValue();  }		non-compiled	[CE]  '.class'  expected	8	None	add
4	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.getOptimizer().toDifferentiableMultivariateVectorFunction(i);  }		non-compiled	[CE]  '.class'  expected	8	None	add
5	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0;  i  <  maxEval;  i++)  {  optData[i]  =  f.clone();  }		non-compiled	[CE]  '.class'  expected	8	None	add
6	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  f);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  f);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableVectorFunction(optData),  f);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  '.class'  expected	7	None	replace
7	[BUG]  [BUGGY]    int  maxEval  =  Math.min(maxEval,  optData.length);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    int  maxEval  =  Math.min(maxEval,  optData.length);  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    int  maxEval  =  Math.min(maxEval,  optData.length);		non-compiled	[CE]  '.class'  expected	8	None	add
8	[BUG]  [BUGGY]    final  int  maxEval  =  Math.min(maxEval,  optData.length);  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    final  int  maxEval  =  Math.min(maxEval,  optData.length);  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    final  int  maxEval  =  Math.min(maxEval,  optData.length);		non-compiled	[CE]  '.class'  expected	8	None	add
9	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  i++)  {  double[][]  cov  =  f.getVarianceSingularityThreshold();  for(int  j  =		non-compiled	[CE]  '.class'  expected	8	None	add
10	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobian		non-compiled	[CE]  '.class'  expected	8	None	add
11	[BUG]  [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	    if(optData!=  null)  {  for(int  i  =  0,  cols  =  optData.length;  i  <  cols;  ++i)  {  double[][]  weightedJacobianData  =  f.weightedJacobianData[i]		non-compiled	[CE]  '.class'  expected	8	None	add
12	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData));  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData));  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f,  optData));	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  '.class'  expected	7	None	replace
13	[BUG]  [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF);  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  PointVectorValuePair  optimizeInternal(final  int  maxEval,  final  MultivariateDifferentiableVectorFunction  f,  OptimizationData...  optData)  {    [BUGGY]  return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF);  [BUGGY]  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  optimizeInternal  [RETURN_TYPE]  PointVectorValuePair  final  int  maxEval  MultivariateDifferentiableVectorFunction  f  optData  [VARIABLES]  OptimizationData[]  optData  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	496	496	1	replace	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData,  jF);	return  super.optimizeInternal(maxEval,  FunctionUtils.toDifferentiableMultivariateVectorFunction(f),  optData);  	non-compiled	[CE]  '.class'  expected	7	None	replace
