bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getWeight());  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getWeight());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getWeight());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    -    getWeight());    	non-compiled	[CE]  '.class'  expected	14	None	replace
2	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getWeight());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getWeight());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getWeight());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    -    getWeight());    	non-compiled	[CE]  '.class'  expected	14	None	replace
3	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  -  1);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  -  1);  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  -  1);	  this.weightMatrixSqrt    =    Math.min(this.weightMatrixSqrt,    getWeight());    	non-compiled	[CE]  '.class'  expected	16	None	replace
4	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  +  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  +  1);  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  Math.min(this.weightMatrixSqrt,  getWeight()  +  1);	  this.weightMatrixSqrt    =    Math.min(this.weightMatrixSqrt,    getWeight());    	non-compiled	[CE]  '.class'  expected	16	None	replace
5	[BUG]  [BUGGY]  this.weights  =  new  double[getWeight()  +  1][1];  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weights  =  new  double[getWeight()  +  1][1];  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weights  =  new  double[getWeight()  +  1][1];	  this.weights    =    new    double[getWeight()    ][1];    	non-compiled	[CE]  '.class'  expected	15	None	replace
6	[BUG]  [BUGGY]  super.setUp(this.weightMatrixSqrt  /  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  super.setUp(this.weightMatrixSqrt  /  1);  [BUGGY]        jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(this.weightMatrixSqrt  /  1);	  super.setUp(this.weightMatrixSqrt    -    1);    	non-compiled	[CE]  '.class'  expected	18	None	replace
7	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  /  getWidth());  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  /  getWidth());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWeight()  /  getWidth());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    *    getWidth());    	non-compiled	[CE]  '.class'  expected	5	None	replace
8	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getHeight());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getHeight());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWeight()  *  getHeight());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    *    getWidth());    	non-compiled	[CE]  '.class'  expected	5	None	replace
9	[BUG]  [BUGGY]  this.weights  =  new  double[getWeight()  /  1][0];  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weights  =  new  double[getWeight()  /  1][0];  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weights  =  new  double[getWeight()  /  1][0];	  this.weights    =    new    double[getWeight()    +    1][0];    	non-compiled	[CE]  '.class'  expected	8	None	replace
10	[BUG]  [BUGGY]  super.setUp(this.weightMatrixSqrt,  getWeight()  -  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  super.setUp(this.weightMatrixSqrt,  getWeight()  -  1);  [BUGGY]        jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(this.weightMatrixSqrt,  getWeight()  -  1);	  super.setUp(this.weightMatrixSqrt,    getWeight());    	non-compiled	[CE]  '.class'  expected	1	None	replace
11	[BUG]  [BUGGY]  super.setUp(this.weightMatrixSqrt,  getWeight()  +  1);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  super.setUp(this.weightMatrixSqrt,  getWeight()  +  1);  [BUGGY]        jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(this.weightMatrixSqrt,  getWeight()  +  1);	  super.setUp(this.weightMatrixSqrt,    getWeight());    	non-compiled	[CE]  '.class'  expected	1	None	replace
12	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getHeight());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getHeight());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWeight()  +  getHeight());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    +    getWidth());    	non-compiled	[CE]  '.class'  expected	6	None	replace
13	[BUG]  [BUGGY]  super.setUp(this.weightMatrixSqrt  +  1);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  super.setUp(this.weightMatrixSqrt  +  1);  [BUGGY]        jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(this.weightMatrixSqrt  +  1);	  super.setUp(this.weightMatrixSqrt    -    1);    	non-compiled	[CE]  '.class'  expected	18	None	replace
14	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWidth()  /  getWidth());  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      protected  void  setUp()  {      [BUGGY]  this.weightMatrixSqrt  =  squareRoot(getWidth()  /  getWidth());  [BUGGY]      super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	this.weightMatrixSqrt  =  squareRoot(getWidth()  /  getWidth());	  this.weightMatrixSqrt    =    squareRoot(getWeight()    *    getWidth());    	non-compiled	[CE]  '.class'  expected	5	None	replace
