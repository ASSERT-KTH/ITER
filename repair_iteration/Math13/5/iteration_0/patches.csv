bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super.setUp(this.weightMatrixSqrt);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]  super.setUp(this.weightMatrixSqrt);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(this.weightMatrixSqrt);	super.setUp();  	non-compiled	[CE]  '.class'  expected	9	None	replace
2	[BUG]  [BUGGY]    [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	  	super.setUp();  	non-compiled	[CE]  '.class'  expected	9	None	replace
3	[BUG]  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWeight());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWeight());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weightMatrixSqrt  =  squareRoot(getWeight());		non-compiled	[CE]  '.class'  expected	10	None	add
4	[BUG]  [BUGGY]    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWeight());  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWeight());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWeight());		non-compiled	[CE]  '.class'  expected	10	None	add
5	[BUG]  [BUGGY]    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWidth());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWidth());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weightMatrixSqrt  =  Math.max(this.weightMatrixSqrt,  getWidth());		non-compiled	[CE]  '.class'  expected	10	None	add
6	[BUG]  [BUGGY]    setUp(false);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    setUp(false);  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    setUp(false);		non-compiled	[CE]  '.class'  expected	10	None	add
7	[BUG]  [BUGGY]    this.weights  =  new  double[getWeight()  ][0];  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weights  =  new  double[getWeight()  ][0];  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weights  =  new  double[getWeight()  ][0];		non-compiled	[CE]  '.class'  expected	10	None	add
8	[BUG]  [BUGGY]    this.weights  =  new  double[getWeight()  ];  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weights  =  new  double[getWeight()  ];  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weights  =  new  double[getWeight()  ];		non-compiled	[CE]  '.class'  expected	10	None	add
9	[BUG]  [BUGGY]  super.setUp(false);  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]  super.setUp(false);  [BUGGY]    jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	super.setUp(false);	super.setUp();  	non-compiled	[CE]  '.class'  expected	9	None	replace
10	[BUG]  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWidth());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWidth());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weightMatrixSqrt  =  squareRoot(getWidth());		non-compiled	[CE]  '.class'  expected	10	None	add
11	[BUG]  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWeight()  -  getWidth());  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  [BUGGY]    this.weightMatrixSqrt  =  squareRoot(getWeight()  -  getWidth());  [BUGGY]  super.setUp();  jacobianEvaluations  =  0;  weightMatrixSqrt  =  squareRoot(getWeight());      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	502	502	1	replace	    this.weightMatrixSqrt  =  squareRoot(getWeight()  -  getWidth());		non-compiled	[CE]  '.class'  expected	10	None	add
