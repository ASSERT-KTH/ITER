bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RealMatrix  m  =  m.getMatrixSquare();  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  m.getMatrixSquare();  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  m.getMatrixSquare();	  RealMatrix    m    =    m.getMatrixSqrt();    	non-compiled	[CE]  '.class'  expected	6	None	replace
2	[BUG]  [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  weightMatrixSqrt);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  weightMatrixSqrt);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  m.getMatrix(this,  weightMatrixSqrt);	  RealMatrix    m    =    m.getMatrix(this);    	non-compiled	[CE]  '.class'  expected	12	None	replace
3	[BUG]  [BUGGY]  RealMatrix  m  =  getSquareMatrix(m,  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getSquareMatrix(m,  1);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getSquareMatrix(m,  1);	  RealMatrix    m    =    getSquareMatrix(m,    0);    	non-compiled	[CE]  '.class'  expected	15	None	replace
4	[BUG]  [BUGGY]  RealMatrix  m  =  getSquareMatrix(m,  2);  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getSquareMatrix(m,  2);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getSquareMatrix(m,  2);	  RealMatrix    m    =    getSquareMatrix(m,    0);    	non-compiled	[CE]  '.class'  expected	15	None	replace
5	[BUG]  [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getSquareRoot());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getSquareRoot());  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  new  RealMatrix(m.getSquareRoot());	  RealMatrix    m    =    new    RealMatrix(m.getSquare());    	non-compiled	[CE]  '.class'  expected	8	None	replace
6	[BUG]  [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getRow());  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  new  RealMatrix(m.getRow());  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  new  RealMatrix(m.getRow());	  RealMatrix    m    =    new    RealMatrix(m.getSquare());    	non-compiled	[CE]  '.class'  expected	8	None	replace
7	[BUG]  [BUGGY]  NeighborDecomposition  dec  =  m.getSquareDecomposition();  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  NeighborDecomposition  dec  =  m.getSquareDecomposition();  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	NeighborDecomposition  dec  =  m.getSquareDecomposition();	  NeighborDecomposition    dec    =    m.getDecomposition();    	non-compiled	[CE]  '.class'  expected	16	None	replace
8	[BUG]  [BUGGY]  RealMatrix  dec  =(RealMatrix)m.getDecomposition();  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  dec  =(RealMatrix)m.getDecomposition();  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  dec  =(RealMatrix)m.getDecomposition();	  RealMatrix    dec    =(RealMatrix)m.clone();    	non-compiled	[CE]  '.class'  expected	4	None	replace
9	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  weightedJacobian);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  weightedJacobian);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  weightedJacobian);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jTj,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	2	None	replace
10	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobian,  jF);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobian,  jF);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  weightedJacobian,  jF);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jF,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	11	None	replace
11	[BUG]  [BUGGY]  RealMatrix  m  =  getSquareMatrix(m.getValue()  +  1);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getSquareMatrix(m.getValue()  +  1);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getSquareMatrix(m.getValue()  +  1);	  RealMatrix    m    =    getSquareMatrix(m.getValue());    	non-compiled	[CE]  '.class'  expected	17	None	replace
12	[BUG]  [BUGGY]  RealMatrix  m  =  getSquareMatrix(m.getRow());  [CE]  '.class'  expected  [FE]                  OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getSquareMatrix(m.getRow());  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getSquareMatrix(m.getRow());	  RealMatrix    m    =    getSquareMatrix(m.getValue());    	non-compiled	[CE]  '.class'  expected	17	None	replace
13	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m.getMatrixSize());  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m.getMatrixSize());  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m.getMatrixSize());	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m.getMatrixSqrt());    	non-compiled	[CE]  '.class'  expected	9	None	replace
14	[BUG]  [BUGGY]  RealMatrix  m  =  getRootMatrix(m,  jTj);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getRootMatrix(m,  jTj);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getRootMatrix(m,  jTj);	  RealMatrix    m    =    getRootMatrix(m);    	non-compiled	[CE]  '.class'  expected	3	None	replace
15	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  weightedJacobian);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  weightedJacobian);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  weightedJacobian);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jF,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	11	None	replace
16	[BUG]  [BUGGY]  RealMatrix  m  =  getRootMatrix(m,  m);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getRootMatrix(m,  m);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getRootMatrix(m,  m);	  RealMatrix    m    =    getRootMatrix(m);    	non-compiled	[CE]  '.class'  expected	3	None	replace
17	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  m);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  m);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  m);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jTj,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	2	None	replace
18	[BUG]  [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  0);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  0);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  m.getMatrix(this,  0);	  RealMatrix    m    =    m.getMatrix(this);    	non-compiled	[CE]  '.class'  expected	12	None	replace
19	[BUG]  [BUGGY]  RealMatrix  m  =  getRootMatrix(m.getValue());  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  getRootMatrix(m.getValue());  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  getRootMatrix(m.getValue());	  RealMatrix    m    =    getRootMatrix(m);    	non-compiled	[CE]  '.class'  expected	3	None	replace
20	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  jTj);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  jTj);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jF,  jTj);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jTj,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	2	None	replace
21	[BUG]  [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  mMatrixSqrt);  [CE]  '.class'  expected  [FE]            OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  mMatrixSqrt);  [BUGGY]      return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	final  EigenDecomposition  dec  =  new  EigenDecomposition(m,  jTj,  mMatrixSqrt);	  final    EigenDecomposition    dec    =    new    EigenDecomposition(m,    jF,    weightMatrixSqrt);    	non-compiled	[CE]  '.class'  expected	11	None	replace
22	[BUG]  [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  jF);  [CE]  '.class'  expected  [FE]              OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  jF);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  m.getMatrix(this,  jF);	  RealMatrix    m    =    m.getMatrix(this);    	non-compiled	[CE]  '.class'  expected	12	None	replace
23	[BUG]  [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  cost);  [CE]  '.class'  expected  [FE]                OutOfMemoryError      [CONTEXT]      private  RealMatrix  squareRoot(RealMatrix  m)  {      [BUGGY]  RealMatrix  m  =  m.getMatrix(this,  cost);  [BUGGY]      final  EigenDecomposition  dec  =  new  EigenDecomposition(m);  return  dec.getSquareRoot();  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  squareRoot  [RETURN_TYPE]  RealMatrix  RealMatrix  m  [VARIABLES]  EigenDecomposition  dec  boolean  double[]  errors  objective  objectiveValue  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  m  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	562	562	1	replace	RealMatrix  m  =  m.getMatrix(this,  cost);	  RealMatrix    m    =    m.getMatrix(this);    	non-compiled	[CE]  '.class'  expected	12	None	replace
