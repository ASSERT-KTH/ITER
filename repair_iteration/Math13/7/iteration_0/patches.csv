bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
2	[BUG]  [BUGGY]    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrix)getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
3	[BUG]  [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction(getObjectiveFunction());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction(getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction(getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
4	[BUG]  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWidth());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]  weightMatrixSqrt  =  squareRoot(getWidth());  [BUGGY]          jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	weightMatrixSqrt  =  squareRoot(getWidth());	weightMatrixSqrt  =  squareRoot(getWeight());  	non-compiled	[CE]  '.class'  expected	13	None	replace
5	[BUG]  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight()  -  1);  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight()  -  1);  [BUGGY]          jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	weightMatrixSqrt  =  squareRoot(getWeight()  -  1);	weightMatrixSqrt  =  squareRoot(getWeight());  	non-compiled	[CE]  '.class'  expected	13	None	replace
6	[BUG]  [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
7	[BUG]  [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getObjectiveFunction());  [CE]  '.class'  expected  [FE]      OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
8	[BUG]  [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getRealMatrix());  [CE]  '.class'  expected  [FE]        OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getRealMatrix());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jTj  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  MultivariateDifferentiableVectorFunction)getRealMatrix());		non-compiled	[CE]  '.class'  expected	14	None	add
9	[BUG]  [BUGGY]    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());  [CE]  '.class'  expected  [FE]    OutOfMemoryError  [CONTEXT]  protected  void  setUp()  {  super.setUp();  jacobianEvaluations  =  0;    [BUGGY]    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());  [BUGGY]  weightMatrixSqrt  =  squareRoot(getWeight());        jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction)  getObjectiveFunction());    [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  setUp  [RETURN_TYPE]  void  [VARIABLES]  boolean  double[]  errors  objective  params  point  res  residuals  sig  startPoint  target  weightedResiduals  weights  MultivariateDifferentiableVectorFunction  f  jF  RealMatrix  j  jTj  weightMatrixSqrt  weightedJacobian  double  DEFAULT_SINGULARITY_THRESHOLD  c  cost  covarianceSingularityThreshold  threshold  double[][]  cov  covar  jacobianData  weightedResidualJacobian  int  cols  i  j  jacobianEvaluations  maxEval  nC  nR  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	508	508	1	replace	    jF  =  FunctionUtils.toMultivariateDifferentiableVectorFunction((  RealMatrixFunction)getObjectiveFunction());		non-compiled	[CE]  '.class'  expected	14	None	add
