bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  checker.getMatrixSqrt(this.weightMatrixSqrt);  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);    [BUGGY]  this.weightMatrixSqrt  =  checker.getMatrixSqrt(this.weightMatrixSqrt);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  checker.getMatrixSqrt(this.weightMatrixSqrt);	      this.weightMatrixSqrt    =    checker.getMatrixSqrt();    	non-compiled	[CE]  '.class'  expected	1	None	replace
2	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  checker.weightMatrixSqrt  +  1;  [CE]  '.class'  expected  [FE]            OutOfMemoryError    [CONTEXT]    protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);    [BUGGY]  this.weightMatrixSqrt  =  checker.weightMatrixSqrt  +  1;  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  checker.weightMatrixSqrt  +  1;	      this.weightMatrixSqrt    =    checker.weightMatrixSqrt;    	non-compiled	[CE]  '.class'  expected	3	None	replace
3	[BUG]  [BUGGY]  this.weightedResiduals  =  checker.getMatrixSquare();  [CE]  '.class'  expected  [FE]          OutOfMemoryError    [CONTEXT]    protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);    [BUGGY]  this.weightedResiduals  =  checker.getMatrixSquare();  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightedResiduals  =  checker.getMatrixSquare();	      this.weightedResiduals    =    checker.getMatrixSqrt();    	non-compiled	[CE]  '.class'  expected	2	None	replace
4	[BUG]  [BUGGY]  this.weightMatrixSqrt  =(double[][])this.weightedResiduals.toArray(new  double[this.weightedResiduals.size()  ]);  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);    [BUGGY]  this.weightMatrixSqrt  =(double[][])this.weightedResiduals.toArray(new  double[this.weightedResiduals.size()  ]);  [BUGGY]      [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =(double[][])this.weightedResiduals.toArray(new  double[this.weightedResiduals.size()  ]);	  this.weightMatrixSqrt    =(double[][])this.weightedResiduals.clone();    	non-compiled	[CE]  '.class'  expected	4	None	replace
5	[BUG]  [BUGGY]  this.weightMatrixSqrt  =  checker.getMatrixSqrt(this);  [CE]  '.class'  expected  [FE]        OutOfMemoryError    [CONTEXT]    protected  AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair>  checker)  {  super(checker);    [BUGGY]  this.weightMatrixSqrt  =  checker.getMatrixSqrt(this);  [BUGGY]    }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  <init>  [RETURN_TYPE]  ConvergenceChecker)  PointVectorValuePair>  checker  [VARIABLES]  ConvergenceChecker  checker  boolean  double[]  objective  point  weightedResiduals  MultivariateDifferentiableVectorFunction  jF  RealMatrix  weightMatrixSqrt  double  DEFAULT_SINGULARITY_THRESHOLD  cost  double[][]  weightedResidualJacobian  int  cols  jacobianEvaluations  rows  	projects/Math13/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java	0.3333333333333333	135	135	1	replace	this.weightMatrixSqrt  =  checker.getMatrixSqrt(this);	      this.weightMatrixSqrt    =    checker.getMatrixSqrt();    	non-compiled	[CE]  '.class'  expected	1	None	replace
