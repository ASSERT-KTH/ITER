bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] case '\0': sb.append("\\0"); break; [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { [BUGGY] case '\0': sb.append("\\0"); break; [BUGGY] case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { [BUGGY] [BUGGY] case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	add	
3	[BUG] [BUGGY] if (childCount != ((n.getParent() != null &&  n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { [FE] ComparisonFailure [CONTEXT]  Node next = first.getNext(); if (next != null) { add("("); addList(next); add(")"); } break; case Token.STRING: [BUGGY] if (childCount !=   ((n.getParent() != null &&       n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { [BUGGY] ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } addJsString(n.getString()); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  Node next = first.getNext(); if (next != null) { add("("); addList(next); add(")"); } break; case Token.STRING: [BUGGY] [BUGGY] if (childCount !=   ((n.getParent() != null &&       n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } addJsString(n.getString()); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	add	
5	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (childCount != ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	638	638	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (childCount != ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	638	638	1	add	
7	[BUG] [BUGGY] break; [FE] ComparisonFailure [CONTEXT] break; case Token.STRING: if (childCount != ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } addJsString(n.getString()); [BUGGY] break; [BUGGY]  case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; case Token.STRING: if (childCount != ((n.getParent() != null && n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) { throw new IllegalStateException( "Unexpected String children: " + n.getParent().toStringTree()); } addJsString(n.getString()); [BUGGY] [BUGGY] break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add("delete "); add(first); break; case Token.OBJECTLIT: { boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preserveBlock double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String key name o opstr regexp Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	add	
9	[BUG] [BUGGY] switch (s.charAt(i)) { [FE] ComparisonFailure [CONTEXT] String jsString(String s) { int singleq = 0, doubleq = 0;  for (int i = 0; i < s.length(); i++) { [BUGGY] switch (s.charAt(i)) { [BUGGY] case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; if (singleq < doubleq) {  quote = '\''; [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] String jsString(String s) { int singleq = 0, doubleq = 0;  for (int i = 0; i < s.length(); i++) { [BUGGY] [BUGGY] switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; if (singleq < doubleq) {  quote = '\''; [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	add	
11	[BUG] [BUGGY] char c = s.charAt(i); [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { [BUGGY] char c = s.charAt(i); [BUGGY] switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { [BUGGY] [BUGGY] char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	add	
13	[BUG] [BUGGY] switch (c) { [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); [BUGGY] switch (c) { [BUGGY] case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); [BUGGY] [BUGGY] switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	add	
15	[BUG] [BUGGY] String cached = ESCAPED_JS_STRINGS.get(s); [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { [BUGGY] String cached = ESCAPED_JS_STRINGS.get(s); [BUGGY] if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	948	948	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { [BUGGY] [BUGGY] String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	948	948	1	add	
17	[BUG] [BUGGY] if (cached == null) { [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); [BUGGY] if (cached == null) { [BUGGY] cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	949	949	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); [BUGGY] [BUGGY] if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	949	949	1	add	
19	[BUG] [BUGGY] cached = jsString(s); [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { [BUGGY] cached = jsString(s); [BUGGY] ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	950	950	1	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { [BUGGY] [BUGGY] cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	950	950	1	add	
21	[BUG] [BUGGY] ESCAPED_JS_STRINGS.put(s, cached); [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); [BUGGY] ESCAPED_JS_STRINGS.put(s, cached); [BUGGY] } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	951	951	1	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); [BUGGY] [BUGGY] ESCAPED_JS_STRINGS.put(s, cached); } add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	951	951	1	add	
23	[BUG] [BUGGY] add(cached); [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } [BUGGY] add(cached); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } [BUGGY] [BUGGY] add(cached); } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	add	
25	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); [BUGGY] } [BUGGY]  [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	954	954	1	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addJsString(String s) { String cached = ESCAPED_JS_STRINGS.get(s); if (cached == null) { cached = jsString(s); ESCAPED_JS_STRINGS.put(s, cached); } add(cached); [BUGGY] [BUGGY] } [CLASS] CodeGenerator Context [METHOD] addJsString [RETURN_TYPE] void  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean CodeConsumer cc consumer String cached s Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	954	954	1	add	
27	[BUG] [BUGGY] int singleq = 0, doubleq = 0; [FE] ComparisonFailure [CONTEXT] String jsString(String s) { [BUGGY] int singleq = 0, doubleq = 0; [BUGGY]   for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	957	957	1	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] String jsString(String s) { [BUGGY] [BUGGY] int singleq = 0, doubleq = 0;  for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	957	957	1	add	
29	[BUG] [BUGGY] for (int i = 0; i < s.length(); i++) { [FE] ComparisonFailure [CONTEXT] String jsString(String s) { int singleq = 0, doubleq = 0;  [BUGGY] for (int i = 0; i < s.length(); i++) { [BUGGY] switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; if (singleq < doubleq) {  [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] String jsString(String s) { int singleq = 0, doubleq = 0;  [BUGGY] [BUGGY] for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; if (singleq < doubleq) {  [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	add	
31	[BUG] [BUGGY] if (singleq < doubleq) { [FE] ComparisonFailure [CONTEXT]  for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; [BUGGY] if (singleq < doubleq) { [BUGGY]  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '"': doubleq++; break; case '\'': singleq++; break; } } String doublequote, singlequote; char quote; [BUGGY] [BUGGY] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	add	
33	[BUG] [BUGGY] quote = '\"'; [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  [BUGGY] quote = '\"'; [BUGGY] doublequote = "\\\""; singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	976	976	1	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  [BUGGY] [BUGGY] quote = '\"'; doublequote = "\\\""; singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	976	976	1	add	
35	[BUG] [BUGGY] doublequote = "\\\""; [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; [BUGGY] doublequote = "\\\""; [BUGGY] singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	977	977	1	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; [BUGGY] [BUGGY] doublequote = "\\\""; singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	977	977	1	add	
37	[BUG] [BUGGY] singlequote = "\'"; [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; [BUGGY] singlequote = "\'"; [BUGGY] } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	978	978	1	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (singleq < doubleq) {  quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; [BUGGY] [BUGGY] singlequote = "\'"; } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	978	978	1	add	
39	[BUG] [BUGGY] return strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder); [FE] ComparisonFailure [CONTEXT] quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; singlequote = "\'"; } [BUGGY] return strEscape(s, quote, doublequote, singlequote, "\\\\",  outputCharsetEncoder); [BUGGY] outputCharsetEncoder); } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	981	982	1	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] quote = '\''; doublequote = "\""; singlequote = "\\\'"; } else {  quote = '\"'; doublequote = "\\\""; singlequote = "\'"; } [BUGGY] [BUGGY] return strEscape(s, quote, doublequote, singlequote, "\\\\",  outputCharsetEncoder); outputCharsetEncoder); } [CLASS] CodeGenerator Context [METHOD] jsString [RETURN_TYPE] String  String s [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean char quote CodeConsumer cc consumer String doublequote s singlequote Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int doubleq i singleq char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	981	982	1	add	
41	[BUG] [BUGGY] StringBuilder sb = new StringBuilder(s.length() + 2); [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { [BUGGY] StringBuilder sb = new StringBuilder(s.length() + 2); [BUGGY] sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1010	1010	1	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { [BUGGY] [BUGGY] StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1010	1010	1	add	
43	[BUG] [BUGGY] sb.append(quote); [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); [BUGGY] sb.append(quote); [BUGGY] for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); [BUGGY] [BUGGY] sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	add	
45	[BUG] [BUGGY] for (int i = 0; i < s.length(); i++) { [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); [BUGGY] for (int i = 0; i < s.length(); i++) { [BUGGY] char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1012	1012	1	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); [BUGGY] [BUGGY] for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': sb.append("\\0"); break; case '\n': sb.append("\\n"); break; case '\r': sb.append("\\r"); break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\> or ]]> into ]]\> [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1012	1012	1	add	
47	[BUG] [BUGGY] sb.append(quote); [FE] ComparisonFailure [CONTEXT] sb.append(c); } else {    appendHexJavaScriptRepresentation(sb, c); } } } } [BUGGY] sb.append(quote); [BUGGY] return sb.toString(); } [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1073	1073	1	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] sb.append(c); } else {    appendHexJavaScriptRepresentation(sb, c); } } } } [BUGGY] [BUGGY] sb.append(quote); return sb.toString(); } [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1073	1073	1	add	
49	[BUG] [BUGGY] return sb.toString(); [FE] ComparisonFailure [CONTEXT] } else {    appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); [BUGGY] return sb.toString(); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1074	1074	1	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else {    appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); [BUGGY] [BUGGY] return sb.toString(); } [CLASS] CodeGenerator Context [METHOD] strEscape [RETURN_TYPE] String  String s char quote String doublequoteEscape String singlequoteEscape String backslashEscape CharsetEncoder outputCharsetEncoder [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext boolean StringBuilder sb char c quote CodeConsumer cc consumer String END_SCRIPT START_COMMENT backslashEscape doublequoteEscape s singlequoteEscape Map ESCAPED_JS_STRINGS CharsetEncoder outputCharsetEncoder int i char[] HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1074	1074	1	add	
