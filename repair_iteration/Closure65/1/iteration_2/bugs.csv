bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context  case  '0':  sb.append(c);  break;  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append(c);  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	24	None	replace
2	[BUG]  [BUGGY]  Context  case  '0':  sb.append( ".0 ");  break;  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( ".0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( ".0 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
3	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "0 ".equals(c));  break;  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "0 ".equals(c));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "0 ".equals(c));  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
4	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "0. ");  break;  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "0. ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "0. ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
5	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "0 ".getMessage());  break;  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "0 ".getMessage());  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "0 ".getMessage());  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
6	[BUG]  [BUGGY]  Context  case  '0':  sb.append( ",0 ");  break;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( ",0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( ",0 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
7	[BUG]  [BUGGY]  Context  case  'n':  sb.append(c);  break;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append(c);  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	44	None	replace
8	[BUG]  [BUGGY]  Context  case  'N':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'N':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'N':  sb.append( "n ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	44	None	replace
9	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ".getMessage());  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ".getMessage());  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ".getMessage());  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	44	None	replace
10	[BUG]  [BUGGY]  Context  case  '[':  sb.append( "] ");  break;  [CE]  not  a  statement  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '[':  sb.append( "] ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '[':  sb.append( "] ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	44	None	replace
11	[BUG]  [BUGGY]  Context  case  'i':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'i':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'i':  sb.append( "n ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	44	None	replace
12	[BUG]  [BUGGY]  case  '0':  sb.append(c);  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
13	[BUG]  [BUGGY]  Case  '0':  sb.append(c);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
14	[BUG]  [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(c));  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(c));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append(Character.toLowerCase(c));	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
15	[BUG]  [BUGGY]  cases  '0':  sb.append(c);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
16	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(c);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  ';'  expected	58	None	replace
17	[BUG]  [BUGGY]  cas  '0':  sb.append(c);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
18	[BUG]  [BUGGY]  case  '0':  sb.append(c).append(Character.toUpperCase(c));  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append(Character.toUpperCase(c));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append(Character.toUpperCase(c));	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
19	[BUG]  [BUGGY]  caz  '0':  sb.append(c);  [CE]  not  a  statement  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
20	[BUG]  [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(char));  [CE]  not  a  statement  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(char));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append(Character.toLowerCase(char));	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
21	[BUG]  [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(c),  false);  [CE]  not  a  statement  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(c),  false);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append(Character.toLowerCase(c),  false);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
22	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( "0 ");  [CE]  not  a  statement  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
23	[BUG]  [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(i));  [CE]  not  a  statement  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append(Character.toLowerCase(i));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append(Character.toLowerCase(i));	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
24	[BUG]  [BUGGY]  case  '0':  sb.append(c).append( "0 ");  [CE]  not  a  statement  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c).append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c).append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  not  a  statement	58	None	replace
25	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;	  	non-compiled	[CE]  not  a  statement	16	None	add
26	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    Case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o   ");  break;	  	non-compiled	[CE]  not  a  statement	16	None	add
27	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".);  break;  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".);  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	2	None	replace
28	[BUG]  [BUGGY]  case  '0':  sb.append( "-0 ");  break;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "-0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "-0 ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	2	None	replace
29	[BUG]  [BUGGY]  case  '0':  sb.append( "   ");  break;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "   ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	2	None	replace
30	[BUG]  [BUGGY]  case  'N':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'N':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'N':  sb.append( "n ");  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
31	[BUG]  [BUGGY]  case  'n':  sb.append(c);  break;  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append(c);  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
32	[BUG]  [BUGGY]  case  '[':  sb.append( "] ");  break;  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '[':  sb.append( "] ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '[':  sb.append( "] ");  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
33	[BUG]  [BUGGY]  case  '.':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '.':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '.':  sb.append( "n ");  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
34	[BUG]  [BUGGY]  case  'i':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "n ");  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
35	[BUG]  [BUGGY]  case  '?':  sb.append( "n ");  break;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '?':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '?':  sb.append( "n ");  break;	      case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  not  a  statement	39	None	replace
36	[BUG]  [BUGGY]  sb.append('0');  break;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append('0');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append('0');  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	23	None	replace
37	[BUG]  [BUGGY]  sb.append('[');  break;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append('[');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append('[');  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	23	None	replace
38	[BUG]  [BUGGY]  sb.append(c);  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append(c);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append(c);	      sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	23	None	replace
39	[BUG]  [BUGGY]  sb.append( ".0 ");  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( ".0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( ".0 ");  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	23	None	replace
40	[BUG]  [BUGGY]  sb.append( "0 ");  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "0 ");  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "0 ");	      sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	23	None	replace
41	[BUG]  [BUGGY]  sb.append( "[0] ");  break;  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "[0] ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "[0] ");  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	23	None	replace
42	[BUG]  [BUGGY]  sb.append(']');  break;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append(']');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append(']');  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	23	None	replace
43	[BUG]  [BUGGY]  Case  '0':  sb.append(c);  break;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append(c);  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	9	None	replace
44	[BUG]  [BUGGY]  Case  '0':  sb.append( ".0 ");  break;  [CE]  case,  default,  or  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( ".0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( ".0 ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
45	[BUG]  [BUGGY]  Case  '0':  sb.append( "n ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "n ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
46	[BUG]  [BUGGY]  Case  '0':  sb.append( ",0 ");  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( ",0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( ",0 ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
47	[BUG]  [BUGGY]  Case  '0':  sb.append( "'0 ");  break;  [CE]  case,  default,  or  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "'0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "'0 ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	9	None	replace
48	[BUG]  [BUGGY]  case  'n':  sb.append( "0 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	13	None	replace
49	[BUG]  [BUGGY]  case  'n':  sb.append( ".0 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	13	None	replace
50	[BUG]  [BUGGY]  Case  'n':  sb.append( "0 ");  break;  [CE]  case,  default,  or  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
51	[BUG]  [BUGGY]  case  'n':  sb.append( ",0 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	13	None	replace
52	[BUG]  [BUGGY]  case  'n':  sb.append( "0 ".);  break;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0 ".);  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
53	[BUG]  [BUGGY]  case  'n':  sb.append( "0. ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0. ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	13	None	replace
54	[BUG]  [BUGGY]  cas  'n':  sb.append( "0 ");  break;  [CE]  case,  default,  or  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
55	[BUG]  [BUGGY]  cases  'n':  sb.append( "0 ");  break;  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'n':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'n':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
56	[BUG]  [BUGGY]  caz  'n':  sb.append( "0 ");  break;  [CE]  case,  default,  or  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  'n':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  'n':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  case,  default,  or  	13	None	replace
57	[BUG]  [BUGGY]  sb.append( "t ");  break;  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "t ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "t ");  break;	      sb.append(c);    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
58	[BUG]  [BUGGY]  sb.append( "   ");  break;  [CE]  case,  default,  or  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "   ");  break;	      sb.append(c);    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
59	[BUG]  [BUGGY]  sb.append('n');  break;  [CE]  case,  default,  or  '}'  expected  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append('n');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append('n');  break;	      sb.append(c);    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	56	None	replace
60	[BUG]  [BUGGY]  sb.append( "1 ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "1 ");  break;	      sb.append(c);    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
61	[BUG]  [BUGGY]  sb.append('  }  ');  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append('  }  ');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append('  }  ');  break;	      sb.append(c);    break;    	non-compiled	[CE]  case,  default,  or  	56	None	replace
62	[BUG]  [BUGGY]  case  '0':  sb.append( "-1 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "-1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "-1 ");  break;	  case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	4	None	replace
63	[BUG]  [BUGGY]  case  '0':  sb.append( ".1 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".1 ");  break;	  case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	4	None	replace
64	[BUG]  [BUGGY]  case  '0':  sb.append( "t ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "t ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "t ");  break;	  case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	4	None	replace
65	[BUG]  [BUGGY]  case  '0':  sb.append( ",1 ");  break;  [CE]  cannot  find  symbol  parent  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",1 ");  break;	  case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
66	[BUG]  [BUGGY]  case  '0':  sb.append( "[0] ");  break;  [CE]  cannot  find  symbol  parent  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "[0] ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "[0] ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  cannot  find  symbol  parent	19	None	replace
67	[BUG]  [BUGGY]  case  '0':  sb.append( "0. ");  break;  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0. ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
68	[BUG]  [BUGGY]  case  '0':  sb.append( "_0 ");  break;  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "_0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "_0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
69	[BUG]  [BUGGY]  Case  'n':  sb.append( "n   ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "n   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	31	None	replace
70	[BUG]  [BUGGY]  case  'n':  sb.append( ".n   ");  break;  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".n   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
71	[BUG]  [BUGGY]  case  'n':  sb.append( "ne   ");  break;  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "ne   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "ne   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
72	[BUG]  [BUGGY]  case  'n':  sb.append( "no   ");  break;  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "no   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "no   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
73	[BUG]  [BUGGY]  case  'n':  sb.append( ",n   ");  break;  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",n   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
74	[BUG]  [BUGGY]  case  'n':  sb.append( "negative ");  break;  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "negative ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "negative ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
75	[BUG]  [BUGGY]  case  'n':  sb.append( "navigation ");  break;  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "navigation ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "navigation ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
76	[BUG]  [BUGGY]  case  'n':  sb.append( "n ".);  break;  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ".);  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
77	[BUG]  [BUGGY]  case  'n':  sb.append( "nel ");  break;  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "nel ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "nel ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
78	[BUG]  [BUGGY]  Case  'n':  sb.append( "t   ");  break;  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
79	[BUG]  [BUGGY]  case  'n':  sb.append( ".t   ");  break;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
80	[BUG]  [BUGGY]  case  'n':  sb.append( ",t   ");  break;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
81	[BUG]  [BUGGY]  caz  'n':  sb.append( "t   ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  'n':  sb.append( "t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  'n':  sb.append( "t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
82	[BUG]  [BUGGY]  cas  'n':  sb.append( "t   ");  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
83	[BUG]  [BUGGY]  case  'n':  sb.append( "t ".);  break;  [CE]  <identifier>  expected  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "t ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "t ".);  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
84	[BUG]  [BUGGY]  cases  'n':  sb.append( "t   ");  break;  [CE]  case,  default,  or  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'n':  sb.append( "t   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'n':  sb.append( "t   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  case,  default,  or  	28	None	replace
85	[BUG]  [BUGGY]  case  '0':  sb.append( ".0 ");  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
86	[BUG]  [BUGGY]  Case  '0':  sb.append( "0 ");  [CE]  case,  default,  or  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  case,  default,  or  	6	None	replace
87	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
88	[BUG]  [BUGGY]  case  '0':  sb.append( ",0 ");  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
89	[BUG]  [BUGGY]  case  '0':  sb.append( "0. ");  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0. ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0. ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
90	[BUG]  [BUGGY]  cases  '0':  sb.append( "0 ");  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '0':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '0':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  case,  default,  or  	6	None	replace
91	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ",  c);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ",  c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ",  c);	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
92	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".toString());  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".toString());	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
93	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".charAt(i));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".charAt(i));	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
94	[BUG]  [BUGGY]  case  'n':  sb.append( "t... ");  break;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "t... ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "t... ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
95	[BUG]  [BUGGY]  sb.append( "n ".charAt(i));  break;  [CE]  case,  default,  or  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "n ".charAt(i));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "n ".charAt(i));  break;	      sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
96	[BUG]  [BUGGY]  sb.append( "n ",  c);  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "n ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "n ",  c);  break;	      sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
97	[BUG]  [BUGGY]  sb.append( "n ");  [CE]  case,  default,  or  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "n ");  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "n ");	      sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
98	[BUG]  [BUGGY]  sb.append( ",n ");  break;  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( ",n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( ",n ");  break;	      sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
99	[BUG]  [BUGGY]  sb.append( ".n ");  break;  [CE]  case,  default,  or  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( ".n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( ".n ");  break;	      sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	25	None	replace
100	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;  [CE]  case,  default,  or  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
101	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  [CE]  case,  default,  or  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
102	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");  break;  [CE]  case,  default,  or  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");  break;	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
103	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  [CE]  case,  default,  or  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
104	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;  [CE]  case,  default,  or  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
105	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
106	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "r ");  break;  [CE]  case,  default,  or  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "r ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "r ");  break;	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
107	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "t ");	      	non-compiled	[CE]  case,  default,  or  	22	None	replace
108	[BUG]  [BUGGY]  case  '0':  sb.append( ",0 "  +  i);  break;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0 "  +  i);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0 "  +  i);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
109	[BUG]  [BUGGY]  case  '0':  sb.append( ".0 "  +  i);  break;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".0 "  +  i);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".0 "  +  i);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
110	[BUG]  [BUGGY]  case  '0':  sb.append( "0 "  +  i,  c);  break;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 "  +  i,  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 "  +  i,  c);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
111	[BUG]  [BUGGY]  case  '0':  sb.append( ",0 "  +  c);  break;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0 "  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0 "  +  c);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
112	[BUG]  [BUGGY]  Case  '0':  sb.append( "0 "  +  c);  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "0 "  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "0 "  +  c);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  case,  default,  or  	49	None	replace
113	[BUG]  [BUGGY]  Case  'n':  sb.append( "r   ");  break;  [CE]  case,  default,  or  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
114	[BUG]  [BUGGY]  case  'n':  sb.append( ".r   ");  break;  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
115	[BUG]  [BUGGY]  case  'n':  sb.append( ",r   ");  break;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
116	[BUG]  [BUGGY]  case  'n':  sb.append( "r ",  c);  break;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "r ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "r ",  c);  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
117	[BUG]  [BUGGY]  case  'n':  sb.append( "r... ");  break;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "r... ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "r... ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
118	[BUG]  [BUGGY]  cases  'n':  sb.append( "r   ");  break;  [CE]  case,  default,  or  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'n':  sb.append( "r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'n':  sb.append( "r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
119	[BUG]  [BUGGY]  cas  'n':  sb.append( "r   ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
120	[BUG]  [BUGGY]  caz  'n':  sb.append( "r   ");  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  'n':  sb.append( "r   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  'n':  sb.append( "r   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  case,  default,  or  	53	None	replace
121	[BUG]  [BUGGY]  case  'o':  sb.append( "o ");  break;  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( "o ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( "o ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
122	[BUG]  [BUGGY]  case  'o':  sb.append( ".o ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( ".o ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( ".o ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	17	None	replace
123	[BUG]  [BUGGY]  Case  'o':  sb.append( "o ");  break;  [CE]  case,  default,  or  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'o':  sb.append( "o ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'o':  sb.append( "o ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
124	[BUG]  [BUGGY]  case  'o':  sb.append( ",o ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( ",o ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( ",o ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	17	None	replace
125	[BUG]  [BUGGY]  case  'o':  sb.append( "o ".);  break;  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( "o ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( "o ".);  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
126	[BUG]  [BUGGY]  cases  'o':  sb.append( "o ");  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'o':  sb.append( "o ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'o':  sb.append( "o ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  case,  default,  or  	17	None	replace
127	[BUG]  [BUGGY]  case  'o':  sb.append( "o ",  break;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( "o ",  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( "o ",  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
128	[BUG]  [BUGGY]  case  'n':  sb.append( "u   ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u   ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	32	None	replace
129	[BUG]  [BUGGY]  Case  'n':  sb.append( "u   ");  break;  [CE]  case,  default,  or  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "u   ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	32	None	replace
130	[BUG]  [BUGGY]  case  'n':  sb.append( ".u   ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".u   ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	32	None	replace
131	[BUG]  [BUGGY]  case  'n':  sb.append( "u ".);  break;  [CE]  <identifier>  expected  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u ".);  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
132	[BUG]  [BUGGY]  case  'n':  sb.append( ",u   ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",u   ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  cannot  find  symbol  rhsContext	32	None	replace
133	[BUG]  [BUGGY]  caz  'n':  sb.append( "u   ");  break;  [CE]  case,  default,  or  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  'n':  sb.append( "u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  'n':  sb.append( "u   ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	32	None	replace
134	[BUG]  [BUGGY]  case  'n':  sb.append( "0 ");  [CE]  cannot  find  symbol  rhsContext  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol  rhsContext	60	None	replace
135	[BUG]  [BUGGY]  Case  'n':  sb.append( "0 ");  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  case,  default,  or  	60	None	replace
136	[BUG]  [BUGGY]  case  'n':  sb.append( ".0 ");  [CE]  cannot  find  symbol  rhsContext  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol  rhsContext	60	None	replace
137	[BUG]  [BUGGY]  case  'n':  sb.append( ",0 ");  [CE]  cannot  find  symbol  rhsContext  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol  rhsContext	60	None	replace
138	[BUG]  [BUGGY]  case  'n':  sb.append( "0 ".);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0 ".);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0 ".);	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  <identifier>  expected	60	None	replace
139	[BUG]  [BUGGY]  case  'n':  sb.append( "0. ");  [CE]  cannot  find  symbol  rhsContext  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0. ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0. ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  cannot  find  symbol  rhsContext	60	None	replace
140	[BUG]  [BUGGY]  cases  'n':  sb.append( "0 ");  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'n':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'n':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  case,  default,  or  	60	None	replace
141	[BUG]  [BUGGY]  cas  'n':  sb.append( "0 ");  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  case,  default,  or  	60	None	replace
142	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	10	None	add
143	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    Case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  break;	  	non-compiled	[CE]  not  a  statement	10	None	add
144	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  [CE]  cannot  find  symbol  rhsContext  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ");	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	10	None	add
145	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append( ".0   ");  break;case  '1':  sb.append(   "1 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append( ".0   ");  break;case  '1':  sb.append(   "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append( ".0   ");  break;case  '1':  sb.append(   "1 ");  break;	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	10	None	add
146	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append( ",0   ");  break;case  '1':  sb.append(   "1 ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append( ",0   ");  break;case  '1':  sb.append(   "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append( ",0   ");  break;case  '1':  sb.append(   "1 ");  break;	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	10	None	add
147	[BUG]  [BUGGY]  cases  'n':  sb.append( "u   ");  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'n':  sb.append( "u   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'n':  sb.append( "u   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	54	None	replace
148	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "-1 ");  break;  [CE]  case,  default,  or  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "-1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "-1 ");  break;	      Context    case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
149	[BUG]  [BUGGY]  Context  case  '0':  sb.append( ".1 ");  break;  [CE]  case,  default,  or  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( ".1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( ".1 ");  break;	      Context    case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
150	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "1 ".equals(c));  break;  [CE]  case,  default,  or  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "1 ".equals(c));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "1 ".equals(c));  break;	      Context    case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
151	[BUG]  [BUGGY]  Context  case  '0':  sb.append( ",1 ");  break;  [CE]  case,  default,  or  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( ",1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( ",1 ");  break;	      Context    case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
152	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "1e ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "1e ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "1e ");  break;	      Context    case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  case,  default,  or  	27	None	replace
153	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "u00 ");  break;  [CE]  case,  default,  or  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "u00 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "u00 ");  break;	      Context    case    '0':    sb.append(   "n   ");    break;    	non-compiled	[CE]  case,  default,  or  	26	None	replace
154	[BUG]  [BUGGY]  sb.append( "u00 ");  break;  [CE]  case,  default,  or  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "u00 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "u00 ");  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	29	None	replace
155	[BUG]  [BUGGY]  sb.append( "u000 ");  break;  [CE]  case,  default,  or  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "u000 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "u000 ");  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	29	None	replace
156	[BUG]  [BUGGY]  sb.append( "u0 ");  break;  [CE]  case,  default,  or  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "u0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "u0 ");  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	29	None	replace
157	[BUG]  [BUGGY]  sb.append( "u ".charAt(i));  break;  [CE]  case,  default,  or  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "u ".charAt(i));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "u ".charAt(i));  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	29	None	replace
158	[BUG]  [BUGGY]  sb.append( ".u ");  break;  [CE]  case,  default,  or  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( ".u ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( ".u ");  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  case,  default,  or  	29	None	replace
159	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1   ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "1   ");  break;	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	3	None	add
160	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  Case  '0':  sb.append(   "1   ");  break;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  Case  '0':  sb.append(   "1   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    Case  '0':  sb.append(   "1   ");  break;	  	non-compiled	[CE]  not  a  statement	3	None	add
161	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ".);  break;  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "1 ".);  break;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
162	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append( ",1   ");  break;  [CE]  cannot  find  symbol  rhsContext  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append( ",1   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append( ",1   ");  break;	  	non-compiled	[CE]  cannot  find  symbol  rhsContext	3	None	add
163	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append( ".1 ");  break;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append( ".1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append( ".1 ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
164	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ",  break;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ",  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "1 ",  break;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
165	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
166	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    Case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
167	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'f':  sb.append(   "f   ");	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
168	[BUG]  [BUGGY]      CodeConsumer  cc  =  getCodeConsumer();  break;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]      CodeConsumer  cc  =  getCodeConsumer();  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	        CodeConsumer  cc  =  getCodeConsumer();  break;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
169	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0   ");  break;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(   ".0   ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
170	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  Case  '0':  sb.append(   ".0   ");  break;  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  Case  '0':  sb.append(   ".0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    Case  '0':  sb.append(   ".0   ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
171	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0 ".);  break;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(   ".0 ".);  break;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
172	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append( ",.0   ");  break;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append( ",.0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append( ",.0   ");  break;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
173	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0 ",  break;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0 ",  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(   ".0 ",  break;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
174	[BUG]  [BUGGY]  case  '1':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append(c);  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
175	[BUG]  [BUGGY]  case  '1':  sb.append( ".0 ");  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ".0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ".0 ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
176	[BUG]  [BUGGY]  case  '1':  sb.append( ",0 ");  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ",0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ",0 ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
177	[BUG]  [BUGGY]  case  '1':  sb.append( "0 ".);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0 ".);  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
178	[BUG]  [BUGGY]  Case  '1':  sb.append( "0 ");  break;  [CE]  not  a  statement  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '1':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '1':  sb.append( "0 ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  not  a  statement	50	None	replace
179	[BUG]  [BUGGY]  case  '1':  sb.append( "0 ",  c);  break;  [CE]  no  suitable  method  found  for  append(String,char)  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0 ",  c);  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  no  suitable  method  found  for  append(String,char)	50	None	replace
180	[BUG]  [BUGGY]  case  '1':  sb.append( "0 ");  break;case  '':  sb.append(c);  [CE]  empty  character  literal  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0 ");  break;case  '':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0 ");  break;case  '':  sb.append(c);	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  empty  character  literal	50	None	replace
181	[BUG]  [BUGGY]  case  '1':  sb.append( "0. ");  break;  [CE]  incompatible  types  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0. ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  incompatible  types	50	None	replace
182	[BUG]  [BUGGY]  case  'n':  sb.append( "1 ");  break;  [CE]  incompatible  types  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  incompatible  types	35	None	replace
183	[BUG]  [BUGGY]  Case  'n':  sb.append( "1 ");  break;  [CE]  not  a  statement  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'n':  sb.append( "1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'n':  sb.append( "1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  not  a  statement	35	None	replace
184	[BUG]  [BUGGY]  case  'n':  sb.append( ".1 ");  break;  [CE]  variable  c  is  already  defined  in  method  strEscape(String,char,String,String,String,CharsetEncoder)  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ".1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ".1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  strEscape(String,char,String,String,String,CharsetEncoder)	35	None	replace
185	[BUG]  [BUGGY]  case  'n':  sb.append( "1 ".);  break;  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1 ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1 ".);  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
186	[BUG]  [BUGGY]  case  'n':  sb.append( ",1 ");  break;  [CE]  incompatible  types  [FE]                                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  incompatible  types	35	None	replace
187	[BUG]  [BUGGY]  case  'n':  sb.append( "1 ",  c);  break;  [CE]  no  suitable  method  found  for  append(String,char)  [FE]                                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1 ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1 ",  c);  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  no  suitable  method  found  for  append(String,char)	35	None	replace
188	[BUG]  [BUGGY]  caz  'n':  sb.append( "1 ");  break;  [CE]  not  a  statement  [FE]                                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  'n':  sb.append( "1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  'n':  sb.append( "1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  not  a  statement	35	None	replace
189	[BUG]  [BUGGY]  case  'n':  sb.append( "1. ");  break;  [CE]  illegal  start  of  type  [FE]                                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1. ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1. ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
190	[BUG]  [BUGGY]  cas  'n':  sb.append( "1 ");  break;  [CE]  illegal  start  of  type  [FE]                                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "1 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "1 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
191	[BUG]  [BUGGY]  case  '0':  sb.append( ".0 "  +  c);  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".0 "  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".0 "  +  c);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
192	[BUG]  [BUGGY]  case  '0':  sb.append( "0 "  +  quote);  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 "  +  quote);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 "  +  quote);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
193	[BUG]  [BUGGY]  case  '0':  sb.append( "0. "  +  c);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0. "  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0. "  +  c);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
194	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ",  c);  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ",  c);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
195	[BUG]  [BUGGY]  cases  '0':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '0':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '0':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "n   ");    break;case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
196	[BUG]  [BUGGY]  cas  '0':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  '0':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  '0':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "n   ");    break;case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
197	[BUG]  [BUGGY]  case  '0':  sb.append( ".f ");  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".f ");  break;	  case    '0':    sb.append(   "f   ");    break;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
198	[BUG]  [BUGGY]  case  '0':  sb.append( "u00 ");  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "u00 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "u00 ");  break;	  case    '0':    sb.append(   "f   ");    break;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
199	[BUG]  [BUGGY]  case  '0':  sb.append( ",false ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",false ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",false ");  break;	  case    '0':    sb.append(   "f   ");    break;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
200	[BUG]  [BUGGY]  case  '0':  sb.append( ",0 ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0 ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0 ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
201	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".append(c);  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
202	[BUG]  [BUGGY]  case  '0':  sb.append( "0. ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0. ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0. ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
203	[BUG]  [BUGGY]  case  '0':  sb.append( ".append(c);  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
204	[BUG]  [BUGGY]  Case  '0':  sb.append( "0 ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "0 ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "0 ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
205	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ").append(c  +  1);  break;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ").append(c  +  1);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ").append(c  +  1);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
206	[BUG]  [BUGGY]  case  '0':  sb.append( "-0 ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "-0 ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "-0 ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
207	[BUG]  [BUGGY]  case  '0':  sb.append( "_0 ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "_0 ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "_0 ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
208	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ",  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ",  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ",  break;	  case    '0':    sb.append(   "1   ");    break;case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
209	[BUG]  [BUGGY]  case  'n':  sb.append( "n ",  c);  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ",  c);  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
210	[BUG]  [BUGGY]  case  '0':  sb.append( "n ");  break;case  '0':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "n ");  break;case  '0':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "n ");  break;case  '0':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
211	[BUG]  [BUGGY]  case  '0':  sb.append(quote);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(quote);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(quote);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
212	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'A':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'A':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ");  break;case  'A':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
213	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'i':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'i':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ");  break;case  'i':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
214	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'h':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'h':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ");  break;case  'h':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
215	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'a':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'a':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ");  break;case  'a':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
216	[BUG]  [BUGGY]  case  'n':  sb.append( "u. ");  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u. ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u. ");  break;	      case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
217	[BUG]  [BUGGY]  case  'n':  sb.append( "u ",  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u ",  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u ",  break;	      case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
218	[BUG]  [BUGGY]  case  'r':  sb.append( "n   ");  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "n   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
219	[BUG]  [BUGGY]  Case  'r':  sb.append( "n   ");  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'r':  sb.append( "n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'r':  sb.append( "n   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  case  'r':  sb.append( ".n   ");  break;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( ".n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( ".n   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  case  'r':  sb.append( "ne   ");  break;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "ne   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "ne   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
222	[BUG]  [BUGGY]  case  'r':  sb.append( "no   ");  break;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "no   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "no   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
223	[BUG]  [BUGGY]  case  'r':  sb.append( "negative ");  break;  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "negative ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "negative ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
224	[BUG]  [BUGGY]  case  'r':  sb.append( ",n   ");  break;  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( ",n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( ",n   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
225	[BUG]  [BUGGY]  case  'r':  sb.append( "navigation ");  break;  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "navigation ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "navigation ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
226	[BUG]  [BUGGY]  case  'r':  sb.append( "nel ");  break;  [CE]  orphaned  case  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "nel ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "nel ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
227	[BUG]  [BUGGY]  cases  'r':  sb.append( "n   ");  break;  [CE]  orphaned  case  [FE]                                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  'r':  sb.append( "n   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  'r':  sb.append( "n   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  orphaned  case	57	None	replace
228	[BUG]  [BUGGY]  case  '0':  sb.append( ".u ");  break;  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ".u ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ".u ");  break;	      case    '0':    sb.append(   "u   ");    break;    	non-compiled	[CE]  orphaned  case	41	None	replace
229	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;	  	non-compiled	[CE]  orphaned  case	12	None	add
230	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  break;	  	non-compiled	[CE]  orphaned  case	12	None	add
231	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");	  	non-compiled	[CE]  orphaned  case	12	None	add
232	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    Case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ");	  	non-compiled	[CE]  orphaned  case	12	None	add
233	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append( ".0 ");  break;case  'n':  sb.append(   "0 ");  break;  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append( ".0 ");  break;case  'n':  sb.append(   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    case  '0':  sb.append( ".0 ");  break;case  'n':  sb.append(   "0 ");  break;	  	non-compiled	[CE]  orphaned  case	12	None	add
234	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0   ");  break;  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  Case  '0':  sb.append(   "0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    Case  '0':  sb.append(   "0   ");  break;	  	non-compiled	[CE]  orphaned  case	1	None	add
235	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ".);  break;  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ".);  break;	  	non-compiled	[CE]  orphaned  case	1	None	add
236	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append( ".0   ");  break;  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append( ".0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append( ".0   ");  break;	  	non-compiled	[CE]  orphaned  case	1	None	add
237	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append( ",0   ");  break;  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append( ",0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append( ",0   ");  break;	  	non-compiled	[CE]  orphaned  case	1	None	add
238	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",  break;  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ",  break;	  	non-compiled	[CE]  orphaned  case	1	None	add
239	[BUG]  [BUGGY]  case  'r':  sb.append( "r ");  break;  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "r ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "r ");  break;	      case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
240	[BUG]  [BUGGY]  Case  '0':  sb.append( "1 ");  break;  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
241	[BUG]  [BUGGY]  case  '0':  sb.append( "1 ".);  break;  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "1 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "1 ".);  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
242	[BUG]  [BUGGY]  case  '0':  sb.append( "1 ",  c);  break;  [CE]  orphaned  case  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "1 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "1 ",  c);  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
243	[BUG]  [BUGGY]  case  '0':  sb.append( "1e ");  break;  [CE]  orphaned  case  [FE]                                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "1e ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "1e ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
244	[BUG]  [BUGGY]  case  '0':  sb.append( "1. ");  break;  [CE]  orphaned  case  [FE]                                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "1. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "1. ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
245	[BUG]  [BUGGY]  case  '0':  sb.append( "1a ");  break;  [CE]  orphaned  case  [FE]                                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "1a ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "1a ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  orphaned  case	20	None	replace
246	[BUG]  [BUGGY]  case  '0':  sb.append( "  0,0 ");  break;  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "  0,0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "  0,0 ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
247	[BUG]  [BUGGY]  case  '0':  sb.append(c, "0 ");  break;  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c, "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c, "0 ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
248	[BUG]  [BUGGY]  case  '0':  sb.append(c,0 ");  break;  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c,0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c,0 ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
249	[BUG]  [BUGGY]  case  '0':  sb.append(c, ",0 ");  break;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c, ",0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c, ",0 ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
250	[BUG]  [BUGGY]  case  '0':  sb.append( ",0. ");  break;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0. ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
251	[BUG]  [BUGGY]  case  '0':  sb.append( ",0 ",  c);  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",0 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",0 ",  c);  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
252	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ");  break;  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
253	[BUG]  [BUGGY]  case  '1':  sb.append( ".1 ");  break;  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ".1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ".1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
254	[BUG]  [BUGGY]  Case  '1':  sb.append( "1 ");  break;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '1':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '1':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  not  a  statement	11	None	replace
255	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ".);  break;  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ".);  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
256	[BUG]  [BUGGY]  case  '1':  sb.append( ",1 ");  break;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ",1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ",1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
257	[BUG]  [BUGGY]  cases  '1':  sb.append( "1 ");  break;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '1':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '1':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  	11	None	replace
258	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ",  c);  break;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ",  c);  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
259	[BUG]  [BUGGY]  case  '1':  sb.append( "1a ");  break;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1a ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1a ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  ';'  expected	11	None	replace
260	[BUG]  [BUGGY]  cas  '1':  sb.append( "1 ");  break;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  '1':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  '1':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  	11	None	replace
261	[BUG]  [BUGGY]  caz  '1':  sb.append( "1 ");  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  caz  '1':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	caz  '1':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  	11	None	replace
262	[BUG]  [BUGGY]  Context  case  '0':  sb.append( ".u ");  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( ".u ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( ".u ");  break;	      Context    case    '0':    sb.append(   "u   ");    break;    	non-compiled	[CE]  	30	None	replace
263	[BUG]  [BUGGY]  case  'i':  sb.append( "i ");  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "i ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "i ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  ';'  expected	61	None	replace
264	[BUG]  [BUGGY]  case  'i':  sb.append( ".i ");  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( ".i ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( ".i ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  ';'  expected	61	None	replace
265	[BUG]  [BUGGY]  Case  'i':  sb.append( "i ");  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'i':  sb.append( "i ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'i':  sb.append( "i ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  	61	None	replace
266	[BUG]  [BUGGY]  case  'i':  sb.append( ",i ");  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( ",i ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( ",i ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  ';'  expected	61	None	replace
267	[BUG]  [BUGGY]  case  'i':  sb.append( "i ",  c);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "i ",  c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "i ",  c);	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  ';'  expected	61	None	replace
268	[BUG]  [BUGGY]  case  'i':  sb.append( "i ".);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "i ".);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "i ".);	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  	61	None	replace
269	[BUG]  [BUGGY]  case  'f':  sb.append( "f ");  break;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( "f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( "f ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  ';'  expected	15	None	replace
270	[BUG]  [BUGGY]  case  'f':  sb.append( ".f ");  break;  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( ".f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( ".f ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  ';'  expected	15	None	replace
271	[BUG]  [BUGGY]  Case  'f':  sb.append( "f ");  break;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  'f':  sb.append( "f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  'f':  sb.append( "f ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  	15	None	replace
272	[BUG]  [BUGGY]  case  'f':  sb.append( ",f ");  break;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( ",f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( ",f ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  ';'  expected	15	None	replace
273	[BUG]  [BUGGY]  case  'f':  sb.append( "f ".);  break;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( "f ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( "f ".);  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  	15	None	replace
274	[BUG]  [BUGGY]  case  'f':  sb.append( "fe   ");  break;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( "fe   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( "fe   ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  ';'  expected	15	None	replace
275	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ");  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  ';'  expected	63	None	replace
276	[BUG]  [BUGGY]  Case  '1':  sb.append( "1 ");  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '1':  sb.append( "1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '1':  sb.append( "1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  	63	None	replace
277	[BUG]  [BUGGY]  case  '1':  sb.append( ".1 ");  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ".1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ".1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  ';'  expected	63	None	replace
278	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ".);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ".);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ".);	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  	63	None	replace
279	[BUG]  [BUGGY]  case  '1':  sb.append( ",1 ");  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( ",1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( ",1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  ';'  expected	63	None	replace
280	[BUG]  [BUGGY]  cases  '1':  sb.append( "1 ");  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '1':  sb.append( "1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '1':  sb.append( "1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  	63	None	replace
281	[BUG]  [BUGGY]  cas  '1':  sb.append( "1 ");  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  '1':  sb.append( "1 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  '1':  sb.append( "1 ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  	63	None	replace
282	[BUG]  [BUGGY]  case  '1':  sb.append( "1. ");  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1. ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1. ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  ';'  expected	63	None	replace
283	[BUG]  [BUGGY]  cas  'n':  sb.append( "u ");  break;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cas  'n':  sb.append( "u ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cas  'n':  sb.append( "u ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  	54	None	replace
284	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o ".);  break;  [CE]  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'o':  sb.append(   "o ".);  break;	  	non-compiled	[CE]  	16	None	add
285	[BUG]  [BUGGY]  Context  case  't':  sb.append( "t ");  break;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  't':  sb.append( "t ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  't':  sb.append( "t ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  	44	None	replace
286	[BUG]  [BUGGY]  Context  case  't':  sb.append( "n ");  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  't':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  't':  sb.append( "n ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  	44	None	replace
287	[BUG]  [BUGGY]  Context  case  'u':  sb.append( "n ");  break;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'u':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'u':  sb.append( "n ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  	44	None	replace
288	[BUG]  [BUGGY]  case  '0':  sb.append( "0x "  +  c);  break;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0x "  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0x "  +  c);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  ';'  expected	45	None	replace
289	[BUG]  [BUGGY]  case  '0':  sb.append( "0n ");  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0n ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0n ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  ';'  expected	47	None	replace
290	[BUG]  [BUGGY]  case  '0':  sb.append( "-0 ");  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "-0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "-0 ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  ';'  expected	47	None	replace
291	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "0 ".concat(c));  break;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "0 ".concat(c));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "0 ".concat(c));  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	24	None	replace
292	[BUG]  [BUGGY]  case  'n':  sb.append( "1e ");  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1e ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1e ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  ';'  expected	35	None	replace
293	[BUG]  [BUGGY]  case  'n':  sb.append( "1a ");  break;  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "1a ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "1a ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "1   ");    break;    	non-compiled	[CE]  ';'  expected	35	None	replace
294	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0. ");  break;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(   ".0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(   ".0. ");  break;	  	non-compiled	[CE]  ';'  expected	18	None	add
295	[BUG]  [BUGGY]  Case  '0':  sb.append( "0 ".);  break;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "0 ".);  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	9	None	replace
296	[BUG]  [BUGGY]  Case  '0':  sb.append( "'0' ");  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "'0' ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "'0' ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	9	None	replace
297	[BUG]  [BUGGY]  Case  '0':  sb.append( "0. ");  break;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Case  '0':  sb.append( "0. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Case  '0':  sb.append( "0. ");  break;	  Case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	9	None	replace
298	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append( ".0   ");  break;case  'f':  sb.append(   "f   ");  break;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append( ".0   ");  break;case  'f':  sb.append(   "f   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    case  '0':  sb.append( ".0   ");  break;case  'f':  sb.append(   "f   ");  break;	  	non-compiled	[CE]  ';'  expected	14	None	add
299	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'f':  sb.append(   "f   ");  break;  [CE]  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'f':  sb.append(   "f   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    case  '0':  sb.append(   "0 ",);  break;case  'f':  sb.append(   "f   ");  break;	  	non-compiled	[CE]  	14	None	add
300	[BUG]  [BUGGY]  cases  '0':  sb.append( "1 ");  break;  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cases  '0':  sb.append( "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cases  '0':  sb.append( "1 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "1   ");    break;    	non-compiled	[CE]  	20	None	replace
301	[BUG]  [BUGGY]  case  '0':  sb.append(c0 ");  break;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c0 ");  break;	  case    '0':    sb.append(   "1   ");    break;case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	8	None	replace
302	[BUG]  [BUGGY]  Context  case  '0':  sb.append( "0 ".);  break;  [CE]  [FE]                                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append( "0 ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append( "0 ".);  break;	      Context    case    '0':    sb.append(   "t   ");    break;    	non-compiled	[CE]  	37	None	replace
303	[BUG]  [BUGGY]  case  'n':  sb.append( "ue ");  break;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "ue ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "ue ");  break;	      case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  ';'  expected	55	None	replace
304	[BUG]  [BUGGY]      CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);  break;  [CE]  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]      CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	        CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);  break;	  	non-compiled	[CE]  	21	None	add
305	[BUG]  [BUGGY]      CharsetEncoder  c  =  outputCharsetEncoder.encode(c);  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]      CharsetEncoder  c  =  outputCharsetEncoder.encode(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	        CharsetEncoder  c  =  outputCharsetEncoder.encode(c);  break;	  	non-compiled	[CE]  illegal  start  of  type	21	None	add
306	[BUG]  [BUGGY]  case  'r':  sb.append( "neg ");  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "neg ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "neg ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
307	[BUG]  [BUGGY]  case  'r':  sb.append( "narray ");  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "narray ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "narray ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
308	[BUG]  [BUGGY]  case  'n':  sb.append( "r ".);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "r ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "r ".);  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
309	[BUG]  [BUGGY]  case  '1':  sb.append( "1e ");  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1e ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1e ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
310	[BUG]  [BUGGY]  case  '1':  sb.append( "1a ");  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1a ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1a ");	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
311	[BUG]  [BUGGY]  Context  case  'n':  sb.append( ",null ");  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( ",null ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( ",null ");  break;	      Context    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
312	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ".);  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ".);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ".);  break;	      Context    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
313	[BUG]  [BUGGY]  case  'n':  sb.append( "narray ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "narray ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "narray ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
314	[BUG]  [BUGGY]  case  '':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '':  sb.append( "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
315	[BUG]  [BUGGY]  case  'n':  sb.append( "t ",  c);  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "t ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "t ",  c);  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
316	[BUG]  [BUGGY]  case  'n':  sb.append( "te ");  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "te ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "te ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
317	[BUG]  [BUGGY]  case  '1':  sb.append( "0n ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0n ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
318	[BUG]  [BUGGY]  case  '1':  sb.append( "0x ");  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "0x ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "0x ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
319	[BUG]  [BUGGY]  case  '1':  sb.append(c   "0 ");  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append(c   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append(c   "0 ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
320	[BUG]  [BUGGY]  case  '0':  sb.append(c0 ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
321	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(outputCharsetEncoder);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append(outputCharsetEncoder);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
322	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(escapeCharSetEncoder);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(escapeCharSetEncoder);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append(escapeCharSetEncoder);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
323	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( ".0 ");  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( ".0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append( ".0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
324	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(null);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(null);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append(null);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
325	[BUG]  [BUGGY]  case  '0':  sb.append(C);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(C);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(C);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
326	[BUG]  [BUGGY]  case  'n':  sb.append( "null ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "null ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "null ");  break;	      case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
327	[BUG]  [BUGGY]  case  'n':  sb.append( ",null ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( ",null ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( ",null ");  break;	      case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
328	[BUG]  [BUGGY]  sb.append('u');  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append('u');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append('u');  break;	      sb.append(   "u   ");    break;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
329	[BUG]  [BUGGY]  sb.append( ",0 ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( ",0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( ",0 ");  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
330	[BUG]  [BUGGY]  case  '0':  sb.append( "0f ");  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0f ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0f ");  break;	  case    '0':    sb.append(   "f   ");    break;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
331	[BUG]  [BUGGY]  case  '-':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '-':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '-':  sb.append( "0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
332	[BUG]  [BUGGY]  case  'i':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
333	[BUG]  [BUGGY]  case  '1':  sb.append( "1e ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1e ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1e ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
334	[BUG]  [BUGGY]  case  '1':  sb.append( "1. ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1. ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1. ");  break;	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
335	[BUG]  [BUGGY]  case  '0':  sb.append(c   ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c   ");  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
336	[BUG]  [BUGGY]  case  'o':  sb.append( "o ",  c);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append( "o ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append( "o ",  c);  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
337	[BUG]  [BUGGY]  case  'i':  sb.append( "ie ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append( "ie ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append( "ie ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
338	[BUG]  [BUGGY]  case  '0':  sb.append( "0x ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0x ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0x ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
339	[BUG]  [BUGGY]  case  '0':  sb.append( "0n ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0n ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0n ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
340	[BUG]  [BUGGY]  case  '0':  sb.append( "0x "  +  i);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0x "  +  i);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0x "  +  i);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
341	[BUG]  [BUGGY]  case  '0':  sb.append( "0   "  +  i  +  1);  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0   "  +  i  +  1);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0   "  +  i  +  1);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
342	[BUG]  [BUGGY]  case  'f':  sb.append( "f ",  c);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'f':  sb.append( "f ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'f':  sb.append( "f ",  c);  break;	  case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
343	[BUG]  [BUGGY]  case  '0':  sb.append( ";0 ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ";0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ";0 ");  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
344	[BUG]  [BUGGY]  case  'n':  sb.append( "none ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "none ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "none ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
345	[BUG]  [BUGGY]  case  'n':  sb.append( "node ");  break;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "node ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "node ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
346	[BUG]  [BUGGY]  case  'n':  sb.append(c0 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append(c0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append(c0 ");  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
347	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ",);  break;	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
348	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append( ",0   ");  break;case  'f':  sb.append(   "f   ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'f':  sb.append(   "f   ");  break;  case  '0':  sb.append( ",0   ");  break;case  'f':  sb.append(   "f   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'f':    sb.append(   "f   ");    break;    case  '0':  sb.append( ",0   ");  break;case  'f':  sb.append(   "f   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
349	[BUG]  [BUGGY]  case  'n':  sb.append( "na   ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "na   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "na   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
350	[BUG]  [BUGGY]  case  'n':  sb.append( "t. ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "t. ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "t. ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
351	[BUG]  [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "n ");  break;	      	non-compiled	[CE]  illegal  start  of  type	22	None	replace
352	[BUG]  [BUGGY]  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ");  break;case  'r':  sb.append( "n ");  break;	      	non-compiled	[CE]  illegal  start  of  type	22	None	replace
353	[BUG]  [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ");  break;case  'n':  sb.append( "t ");  break;	      	non-compiled	[CE]  illegal  start  of  type	22	None	replace
354	[BUG]  [BUGGY]  case  '[':  sb.append(c);  break;case  ']':  sb.append( "n ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '[':  sb.append(c);  break;case  ']':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '[':  sb.append(c);  break;case  ']':  sb.append( "n ");  break;	      	non-compiled	[CE]  illegal  start  of  type	22	None	replace
355	[BUG]  [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "n ");  break;case  'n':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "n ");  break;case  'n':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  type	22	None	replace
356	[BUG]  [BUGGY]  case  '0':  sb.append(c, "0 ");  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c, "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c, "0 ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
357	[BUG]  [BUGGY]  case  '0':  sb.append( "n ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "n ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "n ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
358	[BUG]  [BUGGY]  case  '0':  sb.append( "u00 ");  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "u00 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "u00 ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
359	[BUG]  [BUGGY]  case  '0':  sb.append(c   "0 ");  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c   "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c   "0 ");	  case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
360	[BUG]  [BUGGY]  case  'n':  sb.append( "0 ",  c);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "0 ",  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "0 ",  c);  break;	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
361	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c));  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append(Character.toLowerCase(c));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append(Character.toLowerCase(c));  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
362	[BUG]  [BUGGY]  if(i  >  0)  {  sb.append( "0 ");  break;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  if(i  >  0)  {  sb.append( "0 ");  break;  }  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	if(i  >  0)  {  sb.append( "0 ");  break;  }	      sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
363	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c));  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append(Character.toUpperCase(c));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append(Character.toUpperCase(c));  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
364	[BUG]  [BUGGY]  sb.append( "0 ".charAt(i));  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  sb.append( "0 ".charAt(i));  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	sb.append( "0 ".charAt(i));  break;	      sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
365	[BUG]  [BUGGY]  case  'n':  sb.append( "u ",  c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u ",  c);  break;	      case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
366	[BUG]  [BUGGY]  case  'n':  sb.append( "u$ ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "u$ ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "u$ ");  break;	      case    '0':    sb.append(   "u   ");    break;case    'n':    sb.append(   "u   ");    break;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
367	[BUG]  [BUGGY]  Context  case  '0':  sb.append(c, "0 ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  '0':  sb.append(c, "0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  '0':  sb.append(c, "0 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
368	[BUG]  [BUGGY]  Context  case  'i':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'i':  sb.append( "0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'i':  sb.append( "0 ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
369	[BUG]  [BUGGY]  case  '0':  sb.append(. "0 ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(. "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(. "0 ");  break;	  case    '0':    sb.append(   "1   ");    break;case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
370	[BUG]  [BUGGY]  case  ':  '0':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  ':  '0':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  ':  '0':  sb.append( "0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
371	[BUG]  [BUGGY]  case  '.':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '.':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '.':  sb.append( "0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
372	[BUG]  [BUGGY]  case  '0.0':  sb.append( "0 ");  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0.0':  sb.append( "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0.0':  sb.append( "0 ");  break;	  case    '0':    sb.append(   ".0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
373	[BUG]  [BUGGY]  case  '0':  sb.append(c,0);  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c,0);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c,0);  break;	  case    '0':    sb.append(   ",0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
374	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(. ".0   ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(. ".0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(. ".0   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
375	[BUG]  [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(... ".0   ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   ".0   ");  break;  case  '0':  sb.append(... ".0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   ".0   ");    break;    case  '0':  sb.append(... ".0   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	18	None	add
376	[BUG]  [BUGGY]  case  '0':  sb.append( ",  c ");  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( ",  c ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( ",  c ");  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
377	[BUG]  [BUGGY]  case  '0':  sb.append(c]);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c]);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c]);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
378	[BUG]  [BUGGY]  case  '0':  sb.append(c;  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c;  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c;  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
379	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'o':  sb.append(   "o   ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'o':  sb.append(   "o   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    case  '0':  sb.append(   "0 ",);  break;case  'o':  sb.append(   "o   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
380	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append( ".0   ");  break;case  'o':  sb.append(   "o   ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'o':  sb.append(   "o   ");  break;  case  '0':  sb.append( ".0   ");  break;case  'o':  sb.append(   "o   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    case  '0':  sb.append( ".0   ");  break;case  'o':  sb.append(   "o   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	16	None	add
381	[BUG]  [BUGGY]  case  'i':  sb.append(c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
382	[BUG]  [BUGGY]  case  'i':  sb.append(c, "i ");  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'i':  sb.append(c, "i ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'i':  sb.append(c, "i ");	  case    '0':    sb.append(   "0   ");    break;case    'i':    sb.append(   "i   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
383	[BUG]  [BUGGY]      case  ']':  sb.append( "n ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]      case  ']':  sb.append( "n ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	        case  ']':  sb.append( "n ");  break;	  	non-compiled	[CE]  illegal  start  of  type	21	None	add
384	[BUG]  [BUGGY]  cascade  '0':  sb.append(c);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  cascade  '0':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	cascade  '0':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
385	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( "0 ".equals(c));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append( "0 ".equals(c));  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append( "0 ".equals(c));	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
386	[BUG]  [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(escapeCharacter);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c);case  '0':  sb.append(escapeCharacter);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c);case  '0':  sb.append(escapeCharacter);	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
387	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ".);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ");  break;case  'n':  sb.append(   "0 ".);  break;	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
388	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'n':  sb.append(   "0 ");  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  'n':  sb.append(   "0   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  'n':  sb.append(   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    break;    case  '0':  sb.append(   "0 ",);  break;case  'n':  sb.append(   "0 ");  break;	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
389	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  '1':  sb.append(   "1 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ",);  break;case  '1':  sb.append(   "1 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "0 ",);  break;case  '1':  sb.append(   "1 ");  break;	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
390	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ".);  break;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;case  '1':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ".);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "0 ");  break;case  '1':  sb.append(   "1 ".);  break;	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
391	[BUG]  [BUGGY]  case  '0':  sb.append(c   "0 ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c   "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c   "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
392	[BUG]  [BUGGY]  case  'o':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'o':  sb.append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'o':  sb.append(c);  break;	  case    '0':    sb.append(   "0   ");    break;case    'o':    sb.append(   "o   ");    break;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
393	[BUG]  [BUGGY]  case  '1':  sb.append( "1 ",  c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1 ",  c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1 ",  c);	  case    '0':    sb.append(   "0   ");    break;case    '1':    sb.append(   "1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
394	[BUG]  [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ",);  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "1   ");  break;  case  '0':  sb.append(   "1 ",);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "1   ");    break;    case  '0':  sb.append(   "1 ",);  break;	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
395	[BUG]  [BUGGY]  case  '1':  sb.append(c, "0 ");  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append(c, "0 ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append(c, "0 ");  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
396	[BUG]  [BUGGY]  case  '1':  sb.append( "1);  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '1':  sb.append( "1);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '1':  sb.append( "1);  break;	  case    '1':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
397	[BUG]  [BUGGY]  case  'n':  sb.append(c);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append(c);  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append(c);	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
398	[BUG]  [BUGGY]  case  'n':  sb.append(. "0 ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append(. "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append(. "0 ");	  case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
399	[BUG]  [BUGGY]  Context  case  'n':  sb.append( ".n ");  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( ".n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( ".n ");  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
400	[BUG]  [BUGGY]  Context  case  't':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  't':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  't':  sb.append(c);  break;	      Context    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
401	[BUG]  [BUGGY]  case  'n':  sb.append( "non   ");  break;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'n':  sb.append( "non   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'n':  sb.append( "non   ");  break;	      Context    case    '0':    sb.append(   "0   ");    break;case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
402	[BUG]  [BUGGY]  if(i  >  0)  {  sb.append( "n ");  break;  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  if(i  >  0)  {  sb.append( "n ");  break;  }  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	if(i  >  0)  {  sb.append( "n ");  break;  }	      sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
403	[BUG]  [BUGGY]  if(i  >  0)  {  sb.append( "null ");  break;  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  if(i  >  0)  {  sb.append( "null ");  break;  }  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	if(i  >  0)  {  sb.append( "null ");  break;  }	      sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
404	[BUG]  [BUGGY]  case  '0':  sb.append(. "0 ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(. "0 ");  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(. "0 ");	  case    '0':    sb.append(   "0   ");    break;case    '0':    sb.append(   "0   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
405	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ".  +  c);  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "0 ".  +  c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "0 ".  +  c);  break;	  case    '0':    sb.append(   "0   "    +    c);    break;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
406	[BUG]  [BUGGY]  Context  case  'n':  sb.append( "n ",  c);  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  Context  case  'n':  sb.append( "n ",  c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	Context  case  'n':  sb.append( "n ",  c);  break;	      Context    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
407	[BUG]  [BUGGY]  case  '[':  sb.append(c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '[':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '[':  sb.append(c);  break;	      case    'n':    sb.append(   "r   ");    break;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
408	[BUG]  [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(. "0   ");  break;  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(   "0   ");  break;  case  '0':  sb.append(. "0   ");  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case    '0':    sb.append(   "0   ");    break;    case  '0':  sb.append(. "0   ");  break;	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
409	[BUG]  [BUGGY]  case  'r':  sb.append( ".no   ");  break;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( ".no   ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( ".no   ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
410	[BUG]  [BUGGY]  case  'r':  sb.append( "negated ");  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "negated ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "negated ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
411	[BUG]  [BUGGY]  case  'r':  sb.append( "native ");  break;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  'r':  sb.append( "native ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  'r':  sb.append( "native ");  break;	      case    '0':    sb.append(   "0   ");    break;case    'r':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
412	[BUG]  [BUGGY]  case  '0':  sb.append(c  +  1);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c  +  1);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c  +  1);  break;	  case    '0':    sb.append(   "0   "    +    i);    break;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
413	[BUG]  [BUGGY]  case  '0':  sb.append( "n ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append( "n ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append( "n ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
414	[BUG]  [BUGGY]  case  '0':  sb.append(c   "0 ").append(c);  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {    [BUGGY]  case  '0':  sb.append(c   "0 ").append(c);  break;  [BUGGY]    case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  (s.charAt(i  -  1)  ==  ']'  &&  s.charAt(i  -  2)  ==  ']')))  {  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	1.0	1015	1015	1	replace	case  '0':  sb.append(c   "0 ").append(c);  break;	  case    '0':    sb.append(   "0   ").append(c);    break;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
