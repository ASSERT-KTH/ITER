bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	101	None	add
2	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	101	None	add
3	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount  >=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount  >=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount  >=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	101	None	add
4	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	101	None	add
5	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	101	None	add
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  n.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
8	[BUG]  [BUGGY]  if(n.getString().equals( "string ")&&  n.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")&&  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")&&  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
9	[BUG]  [BUGGY]  if(n.getName().equals( "string ")||  n.getString().equals( "string "))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getName().equals( "string ")||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getName().equals( "string ")||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  'else'  without  'if'	56	None	replace
10	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	56	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(first))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  orphaned  case	130	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  orphaned  case	130	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
17	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
18	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
19	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
21	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
22	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
23	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "STRING "))  {  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  n.getString().equals( "STRING "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  'else'  without  'if'	174	None	replace
24	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  first.getString().equals( "STRING "))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  first.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  first.getString().equals( "STRING "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
25	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "string "))  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  'else'  without  'if'	174	None	replace
26	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "STRING "))  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "STRING "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
27	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "OBJECTLIT "))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "OBJECTLIT "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  n.getString().equals( "OBJECTLIT "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  'else'  without  'if'	174	None	replace
28	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "BLOCK "))  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  n.getString().equals( "BLOCK "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  n.getString().equals( "BLOCK "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  'else'  without  'if'	174	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
31	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
32	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
33	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
34	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
35	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
37	[BUG]  [BUGGY]  if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
38	[BUG]  [BUGGY]  if(first!=  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
39	[BUG]  [BUGGY]  if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	53	None	replace
40	[BUG]  [BUGGY]  if(first  ==  null  ||  second.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  second.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
41	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
42	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	97	None	replace
43	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	97	None	replace
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
47	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
48	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
49	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
50	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
51	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
52	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
53	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
54	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  'else'  without  'if'  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
55	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  type	149	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
61	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
62	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
63	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
64	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	153	None	replace
65	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
66	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
67	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
68	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
69	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
70	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
71	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
72	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
73	[BUG]  [BUGGY]  Context  n  =  first.getCurrentContext();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getCurrentContext();	  Context    n    =    first.getContext();    	non-compiled	[CE]  orphaned  case	168	None	replace
74	[BUG]  [BUGGY]  Context  n  =  next.getContext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  next.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  next.getContext();	  Context    n    =    first.getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
75	[BUG]  [BUGGY]  Context  n  =  first.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getFirstChild();	  Context    n    =    first.getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
76	[BUG]  [BUGGY]  Context  n  =  first.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getNext();	  Context    n    =    first.getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
77	[BUG]  [BUGGY]  Context  n  =  first.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getParent();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getParent();	  Context    n    =    first.getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
78	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
79	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
80	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
81	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	21	None	replace
82	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	43	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
85	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
86	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getType()!=  Token.STRING)  {  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
87	[BUG]  [BUGGY]  if(n!=  null  ||  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n!=  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	52	None	replace
88	[BUG]  [BUGGY]  Context  n  =  next.getCurrentContext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  next.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  next.getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	166	None	replace
89	[BUG]  [BUGGY]  Context  n  =  context.getCurrentStatementContext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentStatementContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getCurrentStatementContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	166	None	replace
90	[BUG]  [BUGGY]  Context  n  =  this.context.getCurrentContext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  this.context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  this.context.getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	166	None	replace
91	[BUG]  [BUGGY]  Context  n  =  getCurrentContext();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  orphaned  case	166	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  'else'  without  'if'  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  	83	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  orphaned  case	83	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  1  -  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  orphaned  case	83	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  3);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  3);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  	83	None	replace
99	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	157	None	replace
100	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	157	None	replace
101	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	157	None	replace
102	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	157	None	replace
103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	127	None	replace
104	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	127	None	replace
105	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	127	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
109	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	13	None	replace
110	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
112	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
114	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	37	None	replace
115	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
116	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
117	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
118	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
119	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
120	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	3	None	replace
121	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  next.getString().equals( "string "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  next.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  	58	None	replace
122	[BUG]  [BUGGY]  if(n.getString().equals( "string ")&&  next.getString().equals( "string "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")&&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")&&  next.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  	58	None	replace
123	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  next.getString().equals( "string "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string ")||  next.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  	58	None	replace
124	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  second.getString().equals( "string "))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  second.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  	58	None	replace
125	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
126	[BUG]  [BUGGY]  if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	106	None	replace
127	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	141	None	replace
128	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	141	None	replace
129	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	141	None	replace
130	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	141	None	replace
131	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	105	None	add
132	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	105	None	add
133	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()!=  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()!=  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()!=  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	105	None	add
134	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirst()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]          NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirst()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirst()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	105	None	add
135	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]            NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	105	None	add
136	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]              NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	105	None	add
137	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	151	None	replace
138	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	151	None	replace
139	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	151	None	replace
140	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	146	None	replace
141	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	146	None	replace
142	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	146	None	replace
143	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	146	None	replace
144	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	146	None	replace
145	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
146	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
147	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
148	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
149	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
150	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
151	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
152	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
153	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	142	None	replace
154	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
155	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
156	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
157	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
158	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
159	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	180	None	replace
160	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	90	None	replace
161	[BUG]  [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	90	None	replace
162	[BUG]  [BUGGY]  if(first!=  null)  {  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null)  {  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null)  {  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	90	None	replace
163	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
164	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
165	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
166	[BUG]  [BUGGY]  if(first.getNext()!=  null)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getNext()!=  null)  {	  if(n.getParent()!=    null)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	61	None	replace
167	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	182	None	replace
168	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	182	None	replace
169	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	182	None	replace
170	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	182	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
172	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
175	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  context.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  context.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  context.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	129	None	replace
176	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(first))  {  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	28	None	replace
179	[BUG]  [BUGGY]  if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
180	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
181	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
182	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
183	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
184	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
185	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
186	[BUG]  [BUGGY]  Context  n  =  context.getStatementContext();  [CE]  class,  interface,  or  enum  expected  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getStatementContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getStatementContext();	  Context    n    =    context.getContext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
187	[BUG]  [BUGGY]  Context  n  =  context.getContextCurrentStatement();  [CE]  class,  interface,  or  enum  expected  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getContextCurrentStatement();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getContextCurrentStatement();	  Context    n    =    context.getContext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
188	[BUG]  [BUGGY]  Context  n  =  context.getContext(true);  [CE]  class,  interface,  or  enum  expected  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getContext(true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getContext(true);	  Context    n    =    context.getContext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
189	[BUG]  [BUGGY]  Context  n  =  context.getContextCurrentState();  [CE]  class,  interface,  or  enum  expected  [FE]                                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getContextCurrentState();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getContextCurrentState();	  Context    n    =    context.getContext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
190	[BUG]  [BUGGY]  Node  first  =  first.getNext();  addJsString(first.getString());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  first.getNext();  addJsString(first.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  first  =  first.getNext();  addJsString(first.getString());	  Node    n    =    first.getNext();    addJsString(first.getString());    	non-compiled	[CE]  	86	None	replace
191	[BUG]  [BUGGY]  Node  n  =  first.getFirstChild();  addJsString(first.getString());  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getFirstChild();  addJsString(first.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getFirstChild();  addJsString(first.getString());	  Node    n    =    first.getNext();    addJsString(first.getString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
192	[BUG]  [BUGGY]  n  =  first.getNext();  addJsString(first.getString());  [CE]  <identifier>  expected  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  n  =  first.getNext();  addJsString(first.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	n  =  first.getNext();  addJsString(first.getString());	  Node    n    =    first.getNext();    addJsString(first.getString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
193	[BUG]  [BUGGY]  Node  n  =  first.getNext();  addJsString(last.getString());  [CE]  <identifier>  expected  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getNext();  addJsString(last.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getNext();  addJsString(last.getString());	  Node    n    =    first.getNext();    addJsString(first.getString());    	non-compiled	[CE]  <identifier>  expected	86	None	replace
194	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	add
195	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount!=  1  &&  NodeUtil.isExpressionNode(first))  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount!=  1  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    if(childCount!=  1  &&  NodeUtil.isExpressionNode(first))  {	  	non-compiled	[CE]  	115	None	add
196	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  >=  1  &&  NodeUtil.isExpressionNode(first))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  >=  1  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    if(childCount  >=  1  &&  NodeUtil.isExpressionNode(first))  {	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	add
197	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	add
198	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(second))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(second))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    if(childCount  ==  1  &&  NodeUtil.isExpressionNode(second))  {	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	115	None	add
199	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	135	None	replace
200	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	76	None	replace
201	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	76	None	replace
202	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
203	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
204	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount!=  1  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount!=  1  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount!=  1  &&  first.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ')'  expected	117	None	add
205	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  >=  1  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  >=  1  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount  >=  1  &&  first.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
206	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
207	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  if(childCount  ==  1  &&  first.getType()  >=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    if(childCount  ==  1  &&  first.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  	117	None	add
208	[BUG]  [BUGGY]  Node  n  =  first.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getLastChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getLastChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
209	[BUG]  [BUGGY]  Node  n  =  context.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  context.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
210	[BUG]  [BUGGY]  Node  n  =  next.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  next.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  next.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
211	[BUG]  [BUGGY]  Node  n  =  second.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  second.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  second.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
212	[BUG]  [BUGGY]  Node  n  =  last.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  last.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  last.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
213	[BUG]  [BUGGY]  if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {	  if(n    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	51	None	replace
214	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	118	None	replace
215	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	118	None	replace
216	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	118	None	replace
217	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	118	None	replace
218	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  orphaned  case	109	None	add
219	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  orphaned  case	109	None	add
220	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  orphaned  case	109	None	add
221	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(first  ==  null  ||  first  >=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  orphaned  case	109	None	add
222	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  If(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  If(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    If(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  	109	None	add
223	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]              IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  orphaned  case	109	None	add
224	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  	74	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	150	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	150	None	replace
227	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
228	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
229	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
230	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING)  {  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
231	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  :  expected  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  :  expected	72	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
234	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
235	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
236	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
237	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
238	[BUG]  [BUGGY]  Node  n  =  first.getFirstChild();  addJsString(n.getString());  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getFirstChild();  addJsString(n.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getFirstChild();  addJsString(n.getString());	  Node    n    =    first.getNext();    addJsString(n.getString());    	non-compiled	[CE]  orphaned  case	85	None	replace
239	[BUG]  [BUGGY]  Node  n  =  last.getNext();  addJsString(n.getString());  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  last.getNext();  addJsString(n.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  last.getNext();  addJsString(n.getString());	  Node    n    =    first.getNext();    addJsString(n.getString());    	non-compiled	[CE]  orphaned  case	85	None	replace
240	[BUG]  [BUGGY]  Node  n  =  first.getNext();  addList(n.getString());  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getNext();  addList(n.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getNext();  addList(n.getString());	  Node    n    =    first.getNext();    addJsString(n.getString());    	non-compiled	[CE]  not  a  statement	85	None	replace
241	[BUG]  [BUGGY]  n  =  first.getNext();  addJsString(n.getString());  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  n  =  first.getNext();  addJsString(n.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	n  =  first.getNext();  addJsString(n.getString());	  Node    n    =    first.getNext();    addJsString(n.getString());    	non-compiled	[CE]  not  a  statement	85	None	replace
242	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	19	None	replace
243	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
244	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
245	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
246	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
247	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
248	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
249	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	69	None	replace
250	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	69	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount!=  0);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount!=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  orphaned  case	125	None	replace
252	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  not  a  statement	57	None	replace
253	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().startsWith( "string "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().startsWith( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().startsWith( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	57	None	replace
254	[BUG]  [BUGGY]  if(n.getString().equals( "string ")&&  n.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")&&  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")&&  n.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	60	None	replace
255	[BUG]  [BUGGY]  if(n.getString().equals( "string ")||  n.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")||  n.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")||  n.getType()!=  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	60	None	replace
256	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	60	None	replace
257	[BUG]  [BUGGY]  if(n.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")||  first.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	60	None	replace
258	[BUG]  [BUGGY]  if(n.getString().equals( "string ")||  next.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")||  next.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	60	None	replace
259	[BUG]  [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  NodeUtil.isExpressionNode(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	120	None	replace
260	[BUG]  [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  not  a  statement	120	None	replace
261	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  not  a  statement	120	None	replace
262	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  not  a  statement	120	None	replace
263	[BUG]  [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	120	None	replace
264	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  parent.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  not  a  statement	120	None	replace
265	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	175	None	replace
266	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	175	None	replace
267	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	82	None	replace
268	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  orphaned  case	82	None	replace
269	[BUG]  [BUGGY]  Context  cc  =  next.getCurrentContext();  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  next.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  next.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	82	None	replace
270	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  orphaned  case	82	None	replace
271	[BUG]  [BUGGY]  Context  cc  =  first.getCurrentContext();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  first.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  first.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  orphaned  case	82	None	replace
272	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	147	None	replace
273	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	147	None	replace
274	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	147	None	replace
275	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	147	None	replace
276	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	44	None	replace
277	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	44	None	replace
278	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	44	None	replace
279	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	164	None	replace
280	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	164	None	replace
281	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	164	None	replace
282	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	164	None	replace
283	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	164	None	replace
284	[BUG]  [BUGGY]  if(second.getString().equals( "string ")||  second.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(second.getString().equals( "string ")||  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(second.getString().equals( "string ")||  second.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    second.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	140	None	replace
285	[BUG]  [BUGGY]  if(n.getString().equals( "string ")&&  second.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")&&  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")&&  second.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    second.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	140	None	replace
286	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  second.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  second.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    second.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	140	None	replace
287	[BUG]  [BUGGY]  if(n.getLastChild()!=  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getLastChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
288	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getFirstChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
289	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
290	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  case	63	None	replace
291	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
292	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
293	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
294	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
295	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
296	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
297	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
298	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
299	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
300	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
301	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
302	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	36	None	replace
303	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
304	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
305	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
306	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	111	None	add
308	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	111	None	add
309	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  >>  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount  >>  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount  >>  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	111	None	add
310	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()!=  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()!=  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()!=  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	111	None	add
311	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	111	None	add
312	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
313	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
314	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
315	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
316	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	40	None	replace
317	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
318	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	35	None	replace
319	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	98	None	replace
320	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
321	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
322	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
323	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
324	[BUG]  [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	137	None	replace
325	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	137	None	replace
326	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
327	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
328	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
329	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
330	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
331	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	178	None	replace
332	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	145	None	replace
333	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	145	None	replace
334	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	145	None	replace
335	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	145	None	replace
336	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first!=  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
337	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
338	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  >=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  >=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first  >=  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
339	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  second.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first!=  null  &&  second.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
340	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  If(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  ';'  expected  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  If(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    If(first!=  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	107	None	add
341	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  first.getType()  >=  Token.STRING)  {  [CE]  ';'  expected  [FE]              IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first!=  null  &&  first.getType()  >=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first!=  null  &&  first.getType()  >=  Token.STRING)  {	  	non-compiled	[CE]  ';'  expected	107	None	add
342	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  >>  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(first  >>  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(first  >>  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	107	None	add
343	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
344	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
345	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount!=  1  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount!=  1  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount!=  1  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
346	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  >=  1  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  >=  1  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount  >=  1  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
347	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  second.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  1  &&  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount  ==  1  &&  second.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
348	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]              IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  ')'  expected	113	None	add
349	[BUG]  [BUGGY]  if(n.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getNext().getType()  ==  Token.STRING)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
350	[BUG]  [BUGGY]  if(n.getParent().getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent().getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent().getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
351	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
352	[BUG]  [BUGGY]  if(first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getNext().getType()  ==  Token.STRING)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	70	None	replace
353	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  orphaned  case	66	None	replace
354	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  orphaned  case	66	None	replace
355	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  orphaned  case	66	None	replace
356	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
357	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
358	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
359	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	78	None	replace
360	[BUG]  [BUGGY]  if(n.getNext()  ==  null)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getNext()  ==  null)  {	  if(n.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	65	None	replace
361	[BUG]  [BUGGY]  if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	173	None	replace
362	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	173	None	replace
363	[BUG]  [BUGGY]  if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	173	None	replace
364	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	173	None	replace
365	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	173	None	replace
366	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	154	None	replace
367	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	154	None	replace
368	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	154	None	replace
369	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	183	None	replace
370	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	183	None	replace
371	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	183	None	replace
372	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	183	None	replace
373	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	183	None	replace
374	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
375	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
376	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
377	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
378	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	49	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	167	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	167	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	167	None	replace
382	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	148	None	replace
383	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	148	None	replace
384	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	148	None	replace
385	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	148	None	replace
386	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	148	None	replace
387	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  1)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  1)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  1)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  orphaned  case	177	None	replace
388	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
389	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
390	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n))  {  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
391	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
392	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
393	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
394	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
395	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
396	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	25	None	replace
397	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
398	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
399	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
400	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
401	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getLastChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	80	None	replace
402	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getLastChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	80	None	replace
403	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	134	None	replace
404	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	134	None	replace
405	[BUG]  [BUGGY]  if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
406	[BUG]  [BUGGY]  if(first!=  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
407	[BUG]  [BUGGY]  if(n  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
408	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first!=  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
409	[BUG]  [BUGGY]  if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  second!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
410	[BUG]  [BUGGY]  if(n!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]              IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n!=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	110	None	replace
411	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    first.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	156	None	replace
412	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	131	None	replace
413	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	131	None	replace
414	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	131	None	replace
415	[BUG]  [BUGGY]  if(n.getString().equals( "string ")&&  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")&&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")&&  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
416	[BUG]  [BUGGY]  if(string.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(string.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(string.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	59	None	replace
417	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
418	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
419	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	41	None	replace
420	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	170	None	replace
421	[BUG]  [BUGGY]  if(first!=  null  ||  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	170	None	replace
422	[BUG]  [BUGGY]  if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	170	None	replace
423	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	170	None	replace
424	[BUG]  [BUGGY]  if(first!=  null  &&  first.getNext()  ==  null)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getNext()  ==  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	170	None	replace
425	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getLastChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getLastChild()  ==  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  case	171	None	replace
426	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
427	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
428	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	24	None	replace
429	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	94	None	add
430	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	94	None	add
431	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	94	None	add
432	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	94	None	add
433	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  case	116	None	replace
434	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  case	116	None	replace
435	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  case	116	None	replace
436	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isSimpleNode(first))  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isSimpleNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isSimpleNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  case	116	None	replace
437	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.OBJECTLIT)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  case	116	None	replace
438	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
439	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	46	None	replace
440	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  orphaned  case	99	None	add
441	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	99	None	add
442	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");  }  [CE]  unclosed  string  literal  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unclosed  string  literal	99	None	add
443	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get  [CE]  [FE]          NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get	  	non-compiled	[CE]  	99	None	add
444	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]            NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  	99	None	add
445	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
446	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
447	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
448	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
449	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
450	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	29	None	replace
451	[BUG]  [BUGGY]  if(n!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
452	[BUG]  [BUGGY]  if(first!=  null  ||  next.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  next.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
453	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	165	None	replace
454	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	165	None	replace
455	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	165	None	replace
456	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	165	None	replace
457	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	165	None	replace
458	[BUG]  [BUGGY]  if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
459	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
460	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
461	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
462	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
463	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	172	None	replace
464	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
465	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
466	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
467	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
468	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
469	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionAnonymous(n))  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
470	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
471	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionAnonymous(first))  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionAnonymous(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionAnonymous(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
472	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(first))  {  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
473	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  not  a  statement  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
474	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(second))  {  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(second))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionAnonymous(second))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
475	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  not  a  statement	132	None	replace
476	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
477	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount!=  1  &&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount!=  1  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    if(childCount!=  1  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
478	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  >=  1  &&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  >=  1  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    if(childCount  >=  1  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
479	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    if(childCount  ==  2  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
480	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  If(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  If(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    If(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
481	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  1  &&  nodeUtil.isExpressionNode(n))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  if(childCount  ==  1  &&  nodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    if(childCount  ==  1  &&  nodeUtil.isExpressionNode(n))  {	  	non-compiled	[CE]  	119	None	add
482	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
483	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
484	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  parent.getFirstChild()!=  null  &&  parent.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
485	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
486	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	14	None	replace
487	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
488	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
489	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
490	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
491	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
492	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	67	None	replace
493	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
494	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
495	[BUG]  [BUGGY]  if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
496	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	26	None	replace
497	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	26	None	replace
498	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	161	None	replace
499	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	161	None	replace
500	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	161	None	replace
501	[BUG]  [BUGGY]  if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	161	None	replace
502	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	161	None	replace
503	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
504	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
505	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
506	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	4	None	replace
507	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	112	None	replace
508	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	112	None	replace
509	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	112	None	replace
510	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	133	None	replace
511	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	133	None	replace
512	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	133	None	replace
513	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	133	None	replace
514	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	133	None	replace
515	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  default  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	133	None	replace
516	[BUG]  [BUGGY]  if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  default	5	None	replace
517	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	17	None	replace
518	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
519	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
520	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
521	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
522	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
523	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	179	None	replace
524	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  default  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	104	None	replace
525	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  default  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	104	None	replace
526	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  default  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	104	None	replace
527	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  default  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	104	None	replace
528	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	96	None	replace
529	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
530	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	159	None	replace
531	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	159	None	replace
532	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	136	None	replace
533	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
534	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
535	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
536	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
537	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
538	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
539	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
540	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
541	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
542	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
543	[BUG]  [BUGGY]  Node  n  =  first.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getNext()  +  1;  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getNext()  +  1;	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
544	[BUG]  [BUGGY]  Node  n  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  context.getCurrentNode();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
545	[BUG]  [BUGGY]  Node  n  =  last.getNext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  last.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  last.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
546	[BUG]  [BUGGY]  Node  n  =  context.getNativeObject();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getNativeObject();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  context.getNativeObject();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
547	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
548	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
549	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
550	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	181	None	replace
551	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
552	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
553	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
554	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
555	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
556	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
557	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1)  :  0))  {  [CE]  :  expected  [FE]            IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	103	None	add
558	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
559	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
560	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
561	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
562	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
563	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
564	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
565	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
566	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
567	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
568	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
569	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
570	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
571	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	102	None	replace
572	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	102	None	replace
573	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	102	None	replace
574	[BUG]  [BUGGY]  if(first.getString().equals( "string ")&&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")&&  first.getType()  ==  Token.STRING)  {	  if(first.getString().equals(   "string   "))    {    	non-compiled	[CE]  	139	None	replace
575	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	34	None	replace
576	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
577	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	34	None	replace
578	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
579	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
580	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
581	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
582	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
583	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	1	None	replace
584	[BUG]  [BUGGY]  if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	54	None	replace
585	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	54	None	replace
586	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
587	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
588	[BUG]  [BUGGY]  Context  cc  =  this.context.getContext();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  this.context.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  this.context.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
589	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNode(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContextForNode(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  	84	None	replace
590	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
591	[BUG]  [BUGGY]  Context  cc  =  next.getContext();  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  next.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  next.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
592	[BUG]  [BUGGY]  Context  cc  =  first.getContext();  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  first.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  first.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
593	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	162	None	replace
594	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	162	None	replace
595	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  null)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  first!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	162	None	replace
596	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	162	None	replace
597	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	45	None	replace
598	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	122	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	122	None	replace
600	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context.checkState(childCount  ==  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	122	None	replace
601	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	176	None	replace
602	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	176	None	replace
603	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	176	None	replace
604	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
605	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
606	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
607	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
608	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getLastChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
609	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()!=  Token.STRING)  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	32	None	replace
610	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	95	None	replace
611	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	95	None	replace
612	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	95	None	replace
613	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	95	None	replace
614	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	95	None	replace
615	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n!=  null)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  n!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	169	None	replace
616	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	169	None	replace
617	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  first!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  &&  first!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
618	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(n);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
619	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(first);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(first);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(first);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
620	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  first);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
621	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  STATEMENT);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
622	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(n,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
623	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(first,  context);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(first,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(first,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
624	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
625	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
626	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
627	[BUG]  [BUGGY]  if(n.getFirstChild().equals( "string ")||  n.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild().equals( "string ")||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild().equals( "string ")||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
628	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
629	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
630	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
631	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
632	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
633	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
634	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
635	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
636	[BUG]  [BUGGY]  if(first  ==  null  ||  second!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  second!=  null)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
637	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
638	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
639	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
640	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
641	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
642	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  second.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  second.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
643	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
644	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
645	[BUG]  [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
646	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
647	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
648	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
649	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
650	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
651	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
652	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
653	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
654	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
655	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
656	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
657	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
658	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >>  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >>  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >>  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
659	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
660	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  [Delete]  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  [Delete]  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  [Delete]  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  ')'  expected	137	None	replace
661	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
662	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
663	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
664	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
665	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
666	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
667	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
668	[BUG]  [BUGGY]  if(first!=  null  &&  first.getParent()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getParent()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getParent()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
669	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
670	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
671	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
672	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
673	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
674	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	143	None	replace
675	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	143	None	replace
676	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	143	None	replace
677	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	143	None	replace
678	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
679	[BUG]  [BUGGY]  if(first.getString().equals( ".string ")||  first.getString().equals( "string "))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( ".string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( ".string ")||  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
680	[BUG]  [BUGGY]  if(first.getString().equals( "string ")&&  first.getString().equals( "string "))  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")&&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")&&  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  not  a  statement	59	None	replace
681	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
682	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
683	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
684	[BUG]  [BUGGY]  if(NodeUtil.isForIn(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isForIn(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isForIn(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
685	[BUG]  [BUGGY]  Context  n  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getCurrentNode();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
686	[BUG]  [BUGGY]  Context  n  =  context.getCurrentStatement();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentStatement();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getCurrentStatement();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
687	[BUG]  [BUGGY]  Context  n  =  context.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentScope();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getCurrentScope();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
688	[BUG]  [BUGGY]  if(first!=  null  ||  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getFirstChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
689	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getFirstChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
690	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  next.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
691	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
692	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
693	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
694	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
695	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
696	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
697	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  If(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  If(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    If(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {	  	non-compiled	[CE]  ';'  expected	115	None	add
698	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
699	[BUG]  [BUGGY]  if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
700	[BUG]  [BUGGY]  if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
701	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [CE]  :  expected  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	111	None	add
702	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
703	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(n))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isStringNode(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
704	[BUG]  [BUGGY]  if(n  ==  first)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  first)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  first)  {	  if(n    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
705	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
706	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVar(first))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVar(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVar(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
707	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
708	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
709	[BUG]  [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
710	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
711	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
712	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
713	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(First  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  if(First  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    if(First  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
714	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
715	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
716	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  false);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
717	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
718	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
719	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
720	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
721	[BUG]  [BUGGY]  if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {	  if(n    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
722	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
723	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [CE]  :  expected  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	101	None	add
724	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
725	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
726	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
727	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
728	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
729	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [CE]  :  expected  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	99	None	add
730	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
731	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(last)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(last)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(last)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
732	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
733	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
734	[BUG]  [BUGGY]  if(NodeUtil.isName(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
735	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
736	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
737	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [CE]  :  expected  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	94	None	add
738	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
739	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
740	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
741	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
742	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getString().equals( "string "))  {	  if(first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
743	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
744	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
745	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
746	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
747	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
748	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	144	None	replace
749	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
750	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
751	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [CE]  :  expected  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1)  :  0))  {	  	non-compiled	[CE]  :  expected	105	None	add
752	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(First.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(First.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(First.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	105	None	add
753	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
754	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	149	None	replace
755	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	44	None	replace
756	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	175	None	replace
757	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	45	None	replace
758	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	90	None	replace
759	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  If(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  If(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    If(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	117	None	add
760	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
761	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  parent!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
762	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
763	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	98	None	replace
764	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()!=  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	98	None	replace
765	[BUG]  [BUGGY]  Node  n  =  first.getParent();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getParent();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.getParent();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	81	None	replace
766	[BUG]  [BUGGY]  Node  n  =  second.getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  second.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  second.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
767	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
768	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
769	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
770	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
771	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
772	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
773	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
774	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
775	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  ==  Token.OBJECTLIT)?  1  :  0))  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  ==  Token.OBJECTLIT)?  1  :  0))  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  ==  Token.OBJECTLIT)?  1  :  0))	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
776	[BUG]  [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
777	[BUG]  [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
778	[BUG]  [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
779	[BUG]  [BUGGY]  if(first.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getParent().getType()  ==  Token.STRING)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
780	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
781	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
782	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
783	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
784	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
785	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
786	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
787	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
788	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
789	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
790	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
791	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	135	None	replace
792	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringAnonymous(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
793	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAnonymous(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
794	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
795	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
796	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
797	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getNext()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	97	None	replace
798	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
799	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
800	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	76	None	replace
801	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
802	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
803	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
804	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
805	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
806	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentStatementContext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentStatementContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  context.getCurrentStatementContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  	84	None	replace
807	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentStatement();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentStatement();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  context.getCurrentStatement();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  	84	None	replace
808	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  	84	None	replace
809	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	152	None	replace
810	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	151	None	replace
811	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
812	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
813	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
814	[BUG]  [BUGGY]  Context  n  =  context.getContextForNoInOperator();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getContextForNoInOperator();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getContextForNoInOperator();	  Context    n    =    context.getContext();    	non-compiled	[CE]  	87	None	replace
815	[BUG]  [BUGGY]  Context  n  =  context.getScope();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getScope();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  context.getScope();	  Context    n    =    context.getContext();    	non-compiled	[CE]  	87	None	replace
816	[BUG]  [BUGGY]  if(first  ==  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
817	[BUG]  [BUGGY]  if(first  >=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  >=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  >=  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
818	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
819	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
820	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
821	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
822	[BUG]  [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
823	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
824	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
825	[BUG]  [BUGGY]  if(n.getString()!=  null)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString()!=  null)  {	  if(n.getParent()!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
826	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	136	None	replace
827	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
828	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
829	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getLastChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
830	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
831	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
832	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
833	[BUG]  [BUGGY]  if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
834	[BUG]  [BUGGY]  if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
835	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
836	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
837	[BUG]  [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  this.context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
838	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  context.getCurrentContext(n);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
839	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  context.getCurrentContext(true);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
840	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	71	None	replace
841	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()!=  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	71	None	replace
842	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  :  expected	88	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  type	167	None	replace
844	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
845	[BUG]  [BUGGY]  if(n.getString().equals( "STRING ")||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "STRING ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "STRING ")||  first.getString().equals( "string "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
846	[BUG]  [BUGGY]  if(first.getString().equals( "STRING "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "STRING "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
847	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "STRING "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "STRING "))  {	  if(n.getString().equals(   "STRING   "))    {    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
848	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
849	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
850	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
851	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
852	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	133	None	replace
853	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
854	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
855	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
856	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(n))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
857	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
858	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
859	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	183	None	replace
860	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	138	None	replace
861	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
862	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
863	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isName(n.getFirstChild()))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)&&  NodeUtil.isName(n.getFirstChild()))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
864	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
865	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
866	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
867	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
868	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(first))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isObjectLitKey(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
869	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
870	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  <identifier>  expected	72	None	replace
871	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  <identifier>  expected	72	None	replace
872	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
873	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	72	None	replace
874	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
875	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getLastChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getLastChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getLastChild().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
876	[BUG]  [BUGGY]  Context  n  =  first.getCurrentNode();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getCurrentNode();	  Context    n    =    first.getContext();    	non-compiled	[CE]  	168	None	replace
877	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  [Delete]  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  [Delete]  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getString()  [Delete]  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  	94	None	add
878	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
879	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
880	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
881	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get  [CE]  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.get	  	non-compiled	[CE]  	105	None	add
882	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(last.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  <identifier>  expected  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(last.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(last.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  <identifier>  expected	105	None	add
883	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
884	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
885	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
886	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
887	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
888	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	135	None	replace
889	[BUG]  [BUGGY]  Context  n  =  first.getContext();  addJsString(n.getString());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getContext();  addJsString(n.getString());  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  first.getContext();  addJsString(n.getString());	  Node    n    =    first.getNext();    addJsString(n.getString());    	non-compiled	[CE]  	85	None	replace
890	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()  >>  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
891	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.  [CE]  <identifier>  expected  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.	  	non-compiled	[CE]  <identifier>  expected	99	None	add
892	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n  [CE]  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n	  	non-compiled	[CE]  	99	None	add
893	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  keys: "  +  n.get  [CE]  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  keys: "  +  n.get  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  throw  new  IllegalStateException( "Unexpected  String  keys: "  +  n.get	  	non-compiled	[CE]  	99	None	add
894	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1):  0))  {  [CE]  :  expected  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1):  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1):  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  :  expected	36	None	replace
895	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
896	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVar(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVar(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVar(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
897	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  <identifier>  expected	137	None	replace
898	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
899	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
900	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
901	[BUG]  [BUGGY]  Node  n  =  context.getNumberOfStrings();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getNumberOfStrings();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  context.getNumberOfStrings();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	81	None	replace
902	[BUG]  [BUGGY]  Node  n  =  context.getNumberOfLinks();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getNumberOfLinks();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  context.getNumberOfLinks();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	81	None	replace
903	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
904	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
905	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	134	None	replace
906	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	134	None	replace
907	[BUG]  [BUGGY]  if(first!=  null  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getString().equals( "string "))  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
908	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	143	None	replace
909	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
910	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
911	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(parent.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(parent.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
912	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getName()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
913	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
914	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContextForNoInOperator(context);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
915	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContextForNoInOperator();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  context.getCurrentContextForNoInOperator();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
916	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
917	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(next)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(next)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(next)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
918	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
919	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
920	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
921	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
922	[BUG]  [BUGGY]  if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
923	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	180	None	replace
924	[BUG]  [BUGGY]  if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
925	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
926	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
927	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()  >=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
928	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getLastChild()!=  null)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    first.getFirstChild()!=    null)||    childCount    ==    ((    n.getParent()!=    null    &&    first.getNext().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	90	None	replace
929	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
930	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
931	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
932	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
933	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
934	[BUG]  [BUGGY]  if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
935	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string ")||  n.getType()  ==  Token.STRING)  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
936	[BUG]  [BUGGY]  if(n.getString().equals( "string ")||  n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string ")||  n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string ")||  n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
937	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
938	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
939	[BUG]  [BUGGY]  if(n  ==  first  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  first  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n  ==  first  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
940	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
941	[BUG]  [BUGGY]  if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
942	[BUG]  [BUGGY]  if(n.getString()  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString()  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString()  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
943	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
944	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
945	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
946	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
947	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
948	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
949	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
950	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
951	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
952	[BUG]  [BUGGY]  if(first  ==  null  ||  second!=  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second!=  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  second!=  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
953	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
954	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(n.getParent().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
955	[BUG]  [BUGGY]  Node  n  =  first.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.removeFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Node  n  =  first.removeFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
956	[BUG]  [BUGGY]  if(first!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null  &&  first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
957	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
958	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
959	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
960	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
961	[BUG]  [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
962	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
963	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
964	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()  ==  null  ||  first.getNext()!=  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
965	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getFirstChild()  ==  null  ||  first.getFirstChild()!=  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
966	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContextForNoDeclaration(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
967	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  cc  =  getContextForNoDeclaration(n);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
968	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
969	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
970	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
971	[BUG]  [BUGGY]  Context  n  =  getContextForNoInOperator(context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  getContextForNoInOperator(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  n  =  getContextForNoInOperator(context);	  Context    n    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
972	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
973	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
974	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
975	[BUG]  [BUGGY]  if(next.getString().equals( "string ")||  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(next.getString().equals( "string ")||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(next.getString().equals( "string ")||  next.getString().equals( "string "))  {	  if(n.getString().equals(   "string   ")||    next.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
976	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
977	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
978	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
979	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
980	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
981	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  true);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  true);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
982	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Context  rhsContext  =  Context.createContext(context,  this);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
983	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
984	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
985	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
986	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
987	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  1  &&((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  1  &&((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  1  &&((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
988	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  <identifier>  expected	144	None	replace
989	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  <identifier>  expected	144	None	replace
990	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  <identifier>  expected	144	None	replace
991	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
992	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
993	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
994	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
995	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
996	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionAnonymous(n))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
997	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
998	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isObjectLitKey(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
999	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
1000	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().endsWith( "string "))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().endsWith( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().endsWith( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    n.getString().equals(   "string   "))    {    	non-compiled	[CE]  	57	None	replace
1001	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
1002	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1003	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1004	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(First!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  if(First!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    if(First!=  null  &&  first.getType()  ==  Token.STRING)  {	  	non-compiled	[CE]  illegal  start  of  expression	107	None	add
1005	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
1006	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
1007	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1008	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	Preconditions.checkState(childCount  ==  4);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  	83	None	replace
1009	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
1010	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
1011	[BUG]  [BUGGY]  if(first.getString().equals( "string ")||  first.getString().equals( "else "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getString().equals( "string ")||  first.getString().equals( "else "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getString().equals( "string ")||  first.getString().equals( "else "))  {	  if(first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
