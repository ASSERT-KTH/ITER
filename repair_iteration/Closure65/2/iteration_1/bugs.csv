bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	  	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  if(first!=  null)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first!=  null)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first!=  null)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  if(childCount  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  1)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  1)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(n.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getString().equals( "string "))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getString().equals( "string "))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex();  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getIndex();		non-compiled	[CE]  orphaned  case	4	None	add
21	[BUG]  [BUGGY]    Node  n  =  first.getNext();  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    Node  n  =  first.getNext();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    Node  n  =  first.getNext();		non-compiled	[CE]  orphaned  case	4	None	add
22	[BUG]  [BUGGY]    int  childCount  =  n.getChildCount();  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getChildCount();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getChildCount();		non-compiled	[CE]  orphaned  case	4	None	add
23	[BUG]  [BUGGY]    Preconditions.checkState(childCount  ==  1);  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    Preconditions.checkState(childCount  ==  1);  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    Preconditions.checkState(childCount  ==  1);		non-compiled	[CE]  orphaned  case	4	None	add
24	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex(first.getLastChild());  [CE]  orphaned  case  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex(first.getLastChild());  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getIndex(first.getLastChild());		non-compiled	[CE]  orphaned  case	4	None	add
25	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getType();  [CE]  orphaned  case  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getType();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getType();		non-compiled	[CE]  orphaned  case	4	None	add
26	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getLastChild().getString();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getLastChild().getString();		non-compiled	[CE]  orphaned  case	4	None	add
27	[BUG]  [BUGGY]    int  childCount  =  n.getLastChild().getIndex(first.getLastChild());  [CE]  orphaned  case  [FE]                  ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getLastChild().getIndex(first.getLastChild());  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getLastChild().getIndex(first.getLastChild());		non-compiled	[CE]  orphaned  case	4	None	add
28	[BUG]  [BUGGY]    int  childCount  =  n.getLastChild().getIndex();  [CE]  orphaned  case  [FE]                    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getLastChild().getIndex();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getLastChild().getIndex();		non-compiled	[CE]  orphaned  case	4	None	add
29	[BUG]  [BUGGY]    Integer  n  =  first.getFirstChild();  [CE]  orphaned  case  [FE]                      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    Integer  n  =  first.getFirstChild();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    Integer  n  =  first.getFirstChild();		non-compiled	[CE]  orphaned  case	4	None	add
30	[BUG]  [BUGGY]    Integer  n  =  first.getNext();  [CE]  orphaned  case  [FE]                        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    Integer  n  =  first.getNext();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    Integer  n  =  first.getNext();		non-compiled	[CE]  orphaned  case	4	None	add
31	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex();  addJsString(first.getString());  [CE]  orphaned  case  [FE]                          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getIndex();  addJsString(first.getString());  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getIndex();  addJsString(first.getString());		non-compiled	[CE]  orphaned  case	4	None	add
32	[BUG]  [BUGGY]    int  childCount  =  first.getFirstChild().getIndex();  [CE]  orphaned  case  [FE]                            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  first.getFirstChild().getIndex();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  first.getFirstChild().getIndex();		non-compiled	[CE]  orphaned  case	4	None	add
33	[BUG]  [BUGGY]    int  childCount  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]                              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getLastChild().getString();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getLastChild().getString();		non-compiled	[CE]  orphaned  case	4	None	add
34	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getLength();  [CE]  orphaned  case  [FE]                                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getLength();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getLength();		non-compiled	[CE]  orphaned  case	4	None	add
35	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
39	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
40	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
42	[BUG]  [BUGGY]    Preconditions.checkState(childCount  ==  0);  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    Preconditions.checkState(childCount  ==  0);  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    Preconditions.checkState(childCount  ==  0);		non-compiled	[CE]  orphaned  case	4	None	add
43	[BUG]  [BUGGY]    int  childCount  =  n.getParent().getChildCount();  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getParent().getChildCount();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getParent().getChildCount();		non-compiled	[CE]  orphaned  case	4	None	add
44	[BUG]  [BUGGY]    int  childCount  =  getChildCount();  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  getChildCount();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  getChildCount();		non-compiled	[CE]  orphaned  case	4	None	add
45	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getInitialValue();  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getInitialValue();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getInitialValue();		non-compiled	[CE]  orphaned  case	4	None	add
46	[BUG]  [BUGGY]    int  childCount  =  first.getFirstChild().getType();  [CE]  orphaned  case  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  first.getFirstChild().getType();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  first.getFirstChild().getType();		non-compiled	[CE]  orphaned  case	4	None	add
47	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
48	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
49	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
50	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
51	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  orphaned  case  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
52	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getFirstChild()!=  null)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
53	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
54	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
55	[BUG]  [BUGGY]    int  childCount  =  n.getFirstChild().getLastChild().getIndex();  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getFirstChild().getLastChild().getIndex();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getFirstChild().getLastChild().getIndex();		non-compiled	[CE]  orphaned  case	4	None	add
56	[BUG]  [BUGGY]    int  childCount  =  n.getLastChild().getIndexedChildCount();  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    int  childCount  =  n.getLastChild().getIndexedChildCount();  [BUGGY]  if  (childCount  !=    ((n.getParent()  !=  null  &&        n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	    int  childCount  =  n.getLastChild().getIndexedChildCount();		non-compiled	[CE]  orphaned  case	4	None	add
57	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
61	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.BLOCK)?  1  :  0))  {  [CE]  orphaned  case  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.BLOCK)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	632	634	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.BLOCK)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	3	None	replace
