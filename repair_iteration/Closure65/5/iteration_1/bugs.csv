bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  char[]  singleq  =  s.toCharArray();  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  switch(s.substring(i))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.substring(i))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(i))  {  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.charAt(i),  s.charAt(i))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i),  s.charAt(i))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]              ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]    [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	  	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  char  singleq  =  s.charAt(i);  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i);	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  char  quote  =  s.charAt(i);  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  char  quote  =  s.charAt(i);  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i);	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.charAt(i)||  s.charAt(i))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)||  s.charAt(i))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  switch(s.substring(i,  i))  {  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.substring(i,  i))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  i))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  switch(s.substring(i  +  1))  {  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.substring(i  +  1))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i  +  1))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  switch(s.charAt(0))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {  [BUGGY]  switch(s.charAt(0))  {  [BUGGY]  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(0))  {	switch  (s.charAt(i))  {  	non-compiled	[CE]  <identifier>  expected	9	None	replace
