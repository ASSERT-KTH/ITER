bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(s.substring(i),  s.length())  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i),  s.length())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i),  s.length())  {	  switch(s.substring(i))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  switch(s.substring(0,  i))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(0,  i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(0,  i))  {	  switch(s.substring(i))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  switch(s.substring(i).trim())  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i).trim())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i).trim())  {	  switch(s.substring(i))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  switch(s.substring(i,  singleq))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  singleq))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  singleq))  {	  switch(s.substring(i))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.charAt(i));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.charAt(i));  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.charAt(i));	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.charAt(i));  switch(consumer.toCharArray())  {  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.charAt(i));  switch(consumer.toCharArray())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.charAt(i));  switch(consumer.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer.charAt(i))  {  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s);  switch(consumer.toCharArray())  {  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s);  switch(consumer.toCharArray())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s);  switch(consumer.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
12	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s,  i);  switch(consumer.toCharArray())  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s,  i);  switch(consumer.toCharArray())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s,  i);  switch(consumer.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(user,  i))  {  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(user,  i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(user,  i))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer)  {  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consumer)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(delim,  i))  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(delim,  i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(delim,  i))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(i))  {  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.toCharArray());  switch(consume(i))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  switch(s.substring(i,  i  +  1))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  i  +  1))  {	  switch(s.substring(i,    i))    {    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  switch(s.substring(i,  0))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  0))  {	  switch(s.substring(i,    i))    {    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  switch(s.substring(i,  1))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  1))  {	  switch(s.substring(i,    i))    {    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  switch(s.substring(i,  doubleq))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  doubleq))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  doubleq))  {	  switch(s.substring(i,    i))    {    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  String  quote  =  jsString(s[i]);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  jsString(s[i]);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  jsString(s[i]);	      	non-compiled	[CE]  	6	None	replace
22	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {	      	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  case  ''':  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  case  ''':  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  case  ''':	      	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  break;  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  break;  }  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  break;  }	      	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  s.substring(i  +  1,  s.length());	      	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  }  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  }  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  for(int  i  =  0,  doubleq  =  0;  i  <  s.length();  i++)  {  }	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray(i);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray(i);	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  String  singleq  =  s.toCharArray();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  singleq  =  s.toCharArray();  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  singleq  =  s.toCharArray();	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length());  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length());	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
30	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  +  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray()  +  1;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray()  +  1;	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i  +  1);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.charAt(i  +  1);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i  +  1);	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i)+  1;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.charAt(i)+  1;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i)+  1;	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  String  singleq  =  s.charAt(i);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  singleq  =  s.charAt(i);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  singleq  =  s.charAt(i);	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i];  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.charAt(i];  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i];	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i++);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.charAt(i++);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i++);	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  char  singleq  =  s.charAt(i).trim();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.charAt(i).trim();  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.charAt(i).trim();	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  switch(s.charAt(i)&&  s.charAt(i))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)&&  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)&&  s.charAt(i))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(0))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)||  s.charAt(0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)||  s.charAt(0))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i  +  1))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)||  s.charAt(i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)||  s.charAt(i  +  1))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  switch(s.charAt(i)/  2  ||  s.charAt(i))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)/  2  ||  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)/  2  ||  s.charAt(i))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  switch(s.charAt(i)]  &&  s.charAt(i))  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)]  &&  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)]  &&  s.charAt(i))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  switch(s.charAt(i)+  s.charAt(i))  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)+  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)+  s.charAt(i))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i  +  1);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i  +  1);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  1;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i)+  1;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i)+  1;	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  String  quote  =  s.charAt(i);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  s.charAt(i);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  s.charAt(i);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).toLowerCase();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i).toLowerCase();  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i).toLowerCase();	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  char  quote  =  s.charAt(i];  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i];  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i];	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i++);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i++);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  s.length()))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  s.length()))  {	  switch(s.charAt(0))    {    	non-compiled	[CE]  	12	None	replace
50	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()  -  1))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i,  s.length()  -  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i,  s.length()  -  1))  {	  switch(s.charAt(0))    {    	non-compiled	[CE]  	12	None	replace
51	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(0))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i),  s.charAt(0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i),  s.charAt(0))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(i  +  1))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i),  s.charAt(i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i),  s.charAt(i  +  1))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  s.length())  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i  +  1),  s.length())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i  +  1),  s.length())  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  singleq)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i  +  1),  singleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i  +  1),  singleq)  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(0,  i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(0,  i  +  1))  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  switch(s.charAt(i  +  1))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i  +  1))  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  doubleq)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i  +  1),  doubleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i  +  1),  doubleq)  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  switch(s.substring(i),  s.charAt(i))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i),  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i),  s.charAt(i))  {	  switch(s.charAt(0))    {    	non-compiled	[CE]  	12	None	replace
60	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(i++))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i),  s.charAt(i++))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i),  s.charAt(i++))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).trim();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i).trim();  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i).trim();	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  char  singleq  =  s.substring(i  +  1,  s.length());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  singleq  =  s.substring(i  +  1,  s.length());  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  singleq  =  s.substring(i  +  1,  s.length());	  char    singleq    =    s.charAt(i);    	non-compiled	[CE]  	7	None	replace
63	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  CharTypes.assertEquals(s.toCharArray(),  singleq);  switch(s.charAt(i))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharTypes.assertEquals(s.toCharArray(),  singleq);  switch(s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharTypes.assertEquals(s.toCharArray(),  singleq);  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  char  quote  =  s.charAt(i);  break;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i);  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i);  break;	      	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  break;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  Context  cc  =  Context.getCurrentContext();  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	Context  cc  =  Context.getCurrentContext();  break;	      	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  String  singleq  =  s.substring(i  +  1,  doubleq);  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  singleq  =  s.substring(i  +  1,  doubleq);  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  singleq  =  s.substring(i  +  1,  doubleq);  break;	      	non-compiled	[CE]  	6	None	replace
70	[BUG]  [BUGGY]  doubleq  =  s.charAt(i);  break;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  doubleq  =  s.charAt(i);  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	doubleq  =  s.charAt(i);  break;	      	non-compiled	[CE]  	6	None	replace
71	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  break;  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  s.substring(i  +  1,  s.length());  break;	      	non-compiled	[CE]  	6	None	replace
72	[BUG]  [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  singleq  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;	      	non-compiled	[CE]  	6	None	replace
73	[BUG]  [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  break;  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  singleq  =  s.substring(i  +  1,  s.length());  break;	      	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i])  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
75	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
76	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  context.getCharset(i);  switch(consume(s))  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  context.getCharset(i);  switch(consume(s))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  context.getCharset(i);  switch(consume(s))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
77	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i].trim())  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(singleq[i].trim())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray();  switch(singleq[i].trim())  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
78	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consume)  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consume)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consume)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
79	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consumer)  {  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consumer)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  consumer  =  jsString(s.substring(i),  s.length());  switch(consumer)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
80	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  +  i;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.toCharArray()  +  i;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.toCharArray()  +  i;	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
81	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i,  s.length()  -  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.substring(i,  s.length()  -  1);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.substring(i,  s.length()  -  1);	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
82	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.substring(i);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.substring(i);	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
83	[BUG]  [BUGGY]  switch(s.substring(i),  singleq)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i),  singleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i),  singleq)  {	  switch(s.substring(i))    {    	non-compiled	[CE]  	3	None	replace
84	[BUG]  [BUGGY]  switch(s.substring(i),  doubleq)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i),  doubleq)  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i),  doubleq)  {	  switch(s.substring(i))    {    	non-compiled	[CE]  	3	None	replace
85	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  s.substring(i  +  1,  s.length());  case  ''':  doubleq++;  break;	      	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i);  break;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  String  quote  =  s.substring(0,  i);  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	String  quote  =  s.substring(0,  i);  break;	      	non-compiled	[CE]  	6	None	replace
87	[BUG]  [BUGGY]  char  quote  =  s.charAt(i);  case  ''':  doubleq++;  break;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i);  case  ''':  doubleq++;  break;  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i);  case  ''':  doubleq++;  break;	      	non-compiled	[CE]  	6	None	replace
88	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)];  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char  quote  =  s.charAt(i)];  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char  quote  =  s.charAt(i)];	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.charAt(i);	  switch(s.charAt(0))    {    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray())  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
91	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i]))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i]))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i]))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
92	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray(singleq[i]))  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray(singleq[i]))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.charAt(i);  switch(cc.toCharArray(singleq[i]))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
93	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  jsString(s);  switch(outputCharsetEncoder.charAt(i))  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  jsString(s);  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  outputCharsetEncoder  =  jsString(s);  switch(outputCharsetEncoder.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
94	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i])  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i])  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.toCharArray(singleq[i])  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
95	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  jsString(s.substring(i),  s.substring(0,  i));  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  jsString(s.substring(i),  s.substring(0,  i));  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  outputCharsetEncoder  =  jsString(s.substring(i),  s.substring(0,  i));	  char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  	5	None	replace
96	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.substring(i  +  1,  s.length()))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.substring(i  +  1,  s.length()))  {	  switch(s.substring(i    +    1))    {    	non-compiled	[CE]  	11	None	replace
97	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.getCurrentCharset();  switch(cc.charAt(i))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.getCurrentCharset();  switch(cc.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.getCurrentCharset();  switch(cc.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
98	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.getCurrentToken())  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.getCurrentToken())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.getCharset(i);  switch(cc.getCurrentToken())  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
99	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.getString())  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  switch(cc.getString())  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	CharsetEncoder  cc  =  s.charAt(i);  switch(cc.getString())  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  	1	None	replace
100	[BUG]  [BUGGY]  char[]  singleq  =  s.trim();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.trim();  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.trim();	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i,  s.length());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  char[]  singleq  =  s.substring(i,  s.length());  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	char[]  singleq  =  s.substring(i,  s.length());	  char[]    singleq    =    s.toCharArray();    	non-compiled	[CE]  	2	None	replace
102	[BUG]  [BUGGY]  switch(s.charAt(0),  s.charAt(0))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(0),  s.charAt(0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(0),  s.charAt(0))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  s.charAt(i  +  1))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i  +  1),  s.charAt(i  +  1))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i  +  1),  s.charAt(i  +  1))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  	4	None	replace
104	[BUG]  [BUGGY]  switch(s.charAt(0)||  s.charAt(0))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(0)||  s.charAt(0))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(0)||  s.charAt(0))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
105	[BUG]  [BUGGY]  switch(s.charAt(i)]  ||  s.charAt(i))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {    [BUGGY]  switch(s.charAt(i)]  ||  s.charAt(i))  {  [BUGGY]    case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	961	961	1	replace	switch(s.charAt(i)]  ||  s.charAt(i))  {	  switch(s.charAt(i)||    s.charAt(i))    {    	non-compiled	[CE]  	9	None	replace
