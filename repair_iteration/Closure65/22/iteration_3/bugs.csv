bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sb.append( "t ").append(0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t ").append(0);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t ").append(0);	  sb.append(   "t   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2	[BUG]  [BUGGY]  sb.append( "t ").append(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t ").append(s.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t ").append(s.charAt(0));	  sb.append(   "t   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
3	[BUG]  [BUGGY]  sb.append( "t "  +  s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t "  +  s.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t "  +  s.charAt(0));	  sb.append(   "t   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
4	[BUG]  [BUGGY]  sb.append( "u00E8 ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "u00E8 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "u00E8 ");	  sb.append(   "u00e8   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
5	[BUG]  [BUGGY]  sb.append( "00 ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "00 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "00 ");	  sb.append(   "u00e8   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
6	[BUG]  [BUGGY]  sb  =  new  StringBuilder(s.length()  +  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb  =  new  StringBuilder(s.length()  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb  =  new  StringBuilder(s.length()  +  2);	  StringBuilder    sb    =    new    StringBuilder(s.length());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  4);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()  +  4);	  StringBuilder    sb    =    new    StringBuilder(s.length());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  5);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  5);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()  +  5);	  StringBuilder    sb    =    new    StringBuilder(s.length());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length();  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length();	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append('n');  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append('n');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()).append('n');	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append( "n ");  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append( "n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()).append( "n ");	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  sb.append( "00 "  +  quote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "00 "  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "00 "  +  quote);	  sb.append(   "u00   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
13	[BUG]  [BUGGY]  sb.append( "0 "  +  quote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "0 "  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "0 "  +  quote);	  sb.append(   "u00   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  sb.append( "t "  +  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t "  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t "  +  quote);	  sb.append(   "       "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
15	[BUG]  [BUGGY]  sb.append( ";t ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";t ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";t ");	  sb.append(   ".t   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
16	[BUG]  [BUGGY]  sb.append( "000 "  +  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "000 "  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "000 "  +  quote);	  sb.append(   "u000   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  sb.append(c  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c  +  1);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
18	[BUG]  [BUGGY]  sb.append(c  +  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c  +  2);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  sb.append(c  +  quote,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c  +  quote,  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c  +  quote,  outputCharsetEncoder);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
20	[BUG]  [BUGGY]  sb.append(quote  +  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(quote  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(quote  +  c);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
21	[BUG]  [BUGGY]  sb.append(c  +  3);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c  +  3);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
22	[BUG]  [BUGGY]  sb.append(c  +  4);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c  +  4);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
23	[BUG]  [BUGGY]  sb.append( "n ".getBytes());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ".getBytes());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ".getBytes());	  sb.append(   ".n   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
24	[BUG]  [BUGGY]  sb.append( "backslash ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "backslash ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "backslash ");	  sb.append(backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
25	[BUG]  [BUGGY]  sb.append( ";nn ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";nn ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";nn ");	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
26	[BUG]  [BUGGY]  sb.append( ";ne   ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";ne   ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";ne   ");	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
27	[BUG]  [BUGGY]  sb.append( ";   ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";   ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";   ");	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
28	[BUG]  [BUGGY]  sb.append('t'  +  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('t'  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('t'  +  quote);	  sb.append('t');    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
29	[BUG]  [BUGGY]  sb.append('t').append(quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('t').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('t').append(quote);	  sb.append('t');    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
30	[BUG]  [BUGGY]  sb.append('T');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('T');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('T');	  sb.append('t');    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
31	[BUG]  [BUGGY]  sb.append( "   ",  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "   ",  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "   ",  outputCharsetEncoder);	  sb.append(   "n   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  sb.append( ",  outputCharsetEncoder ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",  outputCharsetEncoder ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",  outputCharsetEncoder ");	  sb.append(   "n   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  sb.append( ",  outputCharsetEncoder: ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",  outputCharsetEncoder: ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",  outputCharsetEncoder: ");	  sb.append(   "n   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  sb.append( "n ").append(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ").append(s.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ").append(s.charAt(0));	  sb.append(   "n   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
35	[BUG]  [BUGGY]  sb.append( "n ",  s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ",  s.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ",  s.charAt(0));	  sb.append(   "n   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  sb.append( "n ").append(0);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ").append(0);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ").append(0);	  sb.append(   "n   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  sb.append('n'  +  quote  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n'  +  quote  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n'  +  quote  +  1);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
38	[BUG]  [BUGGY]  sb.append('n'  +  c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n'  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n'  +  c);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
39	[BUG]  [BUGGY]  sb.append('n'  +  quote  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n'  +  quote  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n'  +  quote  +  2);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
40	[BUG]  [BUGGY]  sb.append( ",null ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",null ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",null ");	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
41	[BUG]  [BUGGY]  sb.append( ",   ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",   ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",   ");	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  sb.append( "t ").getBytes();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t ").getBytes();  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t ").getBytes();	  sb.append(   "t   ".getBytes());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
43	[BUG]  [BUGGY]  sb.append( "   ".getBytes());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "   ".getBytes());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "   ".getBytes());	  sb.append(   "t   ".getBytes());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
44	[BUG]  [BUGGY]  sb.append( ".getBytes() ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ".getBytes() ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ".getBytes() ");	  sb.append(   "t   ".getBytes());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
45	[BUG]  [BUGGY]  sb.append( "# ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "# ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "# ");	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  sb.append( "#n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "#n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "#n ");	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  sb.append('#'  +  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('#'  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('#'  +  quote);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  sb.append( "'n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "'n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "'n ");	  sb.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
49	[BUG]  [BUGGY]  sb.append( "'0 ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "'0 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "'0 ");	  sb.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
50	[BUG]  [BUGGY]  sb.append( "[ ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "[ ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "[ ");	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  sb.append('[').append(quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('[').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('[').append(quote);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  sb.append('['  +  quote);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('['  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('['  +  quote);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  sb.append('N').append(quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('N').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('N').append(quote);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  sb.append( "N ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "N ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "N ");	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  sb.append('N'  +  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('N'  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('N'  +  quote);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  sb.append(''  +  quote  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  quote  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  quote  +  1);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
57	[BUG]  [BUGGY]  sb.append(''  +  c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  c);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
58	[BUG]  [BUGGY]  sb.append(''  +  quote  +  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  quote  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  quote  +  2);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
59	[BUG]  [BUGGY]  sb.append(''  +  quote  +  4);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  quote  +  4);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  quote  +  4);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
60	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
61	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
62	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  null);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  null);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  null);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
63	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  false);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  false);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  false);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
64	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  0);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  0);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
65	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(sb);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(sb);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
66	[BUG]  [BUGGY]  sb.append( ",  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",  outputCharsetEncoder);	  sb.append(   "t   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
67	[BUG]  [BUGGY]  sb.append('0'  +  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('0'  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('0'  +  quote);	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
68	[BUG]  [BUGGY]  sb.append('0').append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('0').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('0').append(quote);	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
69	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encodeAsString(s.length()));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encodeAsString(s.length()));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encodeAsString(s.length()));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encode(s.length()));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encode(s.length()));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.encode(s.length()));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.decode(s.length()));  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.decode(s.length()));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.decode(s.length()));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.escape(s.length()));  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.escape(s.length()));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.escape(s.length()));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.toString(s.length()));  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.toString(s.length()));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.toString(s.length()));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  sb.append( ",  quote= " ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",  quote= " ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",  quote= " ");	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
75	[BUG]  [BUGGY]  sb.append(',');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(',');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(',');	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
76	[BUG]  [BUGGY]  sb.append( "n ",  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ",  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ",  quote);	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
77	[BUG]  [BUGGY]  sb.append( "000 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "000 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
78	[BUG]  [BUGGY]  sb.append( "u00000 ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "u00000 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "u00000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
79	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(s.length());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(s.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuffer  sb  =  new  StringBuffer(s.length());	  StringBuffer    sb    =    new    StringBuffer(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
80	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuffer(s.length());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuffer(s.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuffer(s.length());	  StringBuffer    sb    =    new    StringBuffer(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
81	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(s.length();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(s.length();  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuffer  sb  =  new  StringBuffer(s.length();	  StringBuffer    sb    =    new    StringBuffer(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
82	[BUG]  [BUGGY]  sb.append( "';n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "';n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "';n ");	  sb.append(   "');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
83	[BUG]  [BUGGY]  sb.append('0').append( "n ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('0').append( "n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('0').append( "n ");	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  sb.append('0').append(backslashEscape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('0').append(backslashEscape);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('0').append(backslashEscape);	  sb.append('0');    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  6);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()  +  6);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()  +  6);	  StringBuilder    sb    =    new    StringBuilder(s.length());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
86	[BUG]  [BUGGY]  sb.append( "'] ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "'] ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "'] ");	  sb.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
87	[BUG]  [BUGGY]  sb.append( "': ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "': ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "': ");	  sb.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
88	[BUG]  [BUGGY]  sb.append( "'0' ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "'0' ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "'0' ");	  sb.append(   "'   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
89	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(SOURCE_BLOCK.length());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(SOURCE_BLOCK.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuffer  sb  =  new  StringBuffer(SOURCE_BLOCK.length());	  StringBuffer    sb    =    new    StringBuffer(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  sb.append( "0000 "  +  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "0000 "  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "0000 "  +  quote);	  sb.append(   "u000   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_STRINGS.length());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_STRINGS.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_STRINGS.length());	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
92	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_BLOCK.length());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_BLOCK.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED_BLOCK.length());	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
93	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPR_DESCRIPT);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPR_DESCRIPT);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(SHORT_EXPR_DESCRIPT);	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED.length());  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(SHORT_EXPECTED.length());	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    3);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
95	[BUG]  [BUGGY]  sb.append( ",  quote= ").append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",  quote= ").append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",  quote= ").append(quote);	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
96	[BUG]  [BUGGY]  sb.append( "n,  quote= ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n,  quote= ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n,  quote= ");	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
97	[BUG]  [BUGGY]  sb.append( "n ").getBytes();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n ").getBytes();  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n ").getBytes();	  sb.append(   "t   ".getBytes());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
98	[BUG]  [BUGGY]  sb.append(']');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(']');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(']');	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  sb.append(''  +  doublequoteEscape);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  doublequoteEscape);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  doublequoteEscape);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
100	[BUG]  [BUGGY]  sb.append('').append(quote);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('').append(quote);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
101	[BUG]  [BUGGY]  sb.append('n'  +  doublequoteEscape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n'  +  doublequoteEscape);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n'  +  doublequoteEscape);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
102	[BUG]  [BUGGY]  sb.append('n'  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n'  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n'  +  1);	  sb.append('n'    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
103	[BUG]  [BUGGY]  sb.append(';');  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(';');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(';');	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
104	[BUG]  [BUGGY]  sb.append( "u008 ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "u008 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "u008 ");	  sb.append(   "u00e8   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
105	[BUG]  [BUGGY]  sb.append('t').append( "n ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('t').append( "n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('t').append( "n ");	  sb.append('t');    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
106	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEncoder);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
107	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEscape);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEscape);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharsetEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
108	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(backslashEscape);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(backslashEscape);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(backslashEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
109	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharset);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharset);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  outputCharset);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
110	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(pc);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(pc);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(pc);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
111	[BUG]  [BUGGY]  sb.append('N').append( "n ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('N').append( "n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('N').append( "n ");	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
112	[BUG]  [BUGGY]  sb.append( "NaN ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "NaN ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "NaN ");	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
113	[BUG]  [BUGGY]  sb.append( "0000 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "0000 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "0000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
114	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append( ";n ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.length()).append( ";n ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s.length()).append( ";n ");	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
115	[BUG]  [BUGGY]  sb.append('#').append(quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('#').append(quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('#').append(quote);	  sb.append('#');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
116	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.length());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.length());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.length());	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
117	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.charAt(0));	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
118	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.toString());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.toString());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(s,  outputCharsetEncoder.toString());	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
119	[BUG]  [BUGGY]  sb.append( "t "  +  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t "  +  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t "  +  outputCharsetEncoder);	  sb.append(   "t   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
120	[BUG]  [BUGGY]  sb.append('n',  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('n',  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('n',  outputCharsetEncoder);	  sb.append(   "n   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  sb.append( "n "  +  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n "  +  outputCharsetEncoder);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n "  +  outputCharsetEncoder);	  sb.append(   "n   ",    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  sb.append(quote  +  quote);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(quote  +  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(quote  +  quote);	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
123	[BUG]  [BUGGY]  sb.append( "u00 ").append(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "u00 ").append(s.charAt(0));  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "u00 ").append(s.charAt(0));	  sb.append(   "n   ".charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
124	[BUG]  [BUGGY]  sb.append( "',  quote= ");  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "',  quote= ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "',  quote= ");	  sb.append(   "');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
125	[BUG]  [BUGGY]  sb.append(CASE_SEPARATOR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(CASE_SEPARATOR);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(CASE_SEPARATOR);	  sb.append(   "u00   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
126	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.DEFAULT_SCRIPT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(StandardEncoder.DEFAULT_SCRIPT);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	StringBuilder  sb  =  new  StringBuilder(StandardEncoder.DEFAULT_SCRIPT);	  StringBuilder    sb    =    new    StringBuilder(s.length()    +    2);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
127	[BUG]  [BUGGY]  sb.append( "   "  +  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "   "  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "   "  +  c);	  sb.append(   "       "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
128	[BUG]  [BUGGY]  sb.append( ",no ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ",no ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ",no ");	  sb.append(   ",n   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
129	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
130	[BUG]  [BUGGY]  CharsetEncoder  cc  =  this.outputCharsetEncoder.encode(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  this.outputCharsetEncoder.encode(s);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  this.outputCharsetEncoder.encode(s);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
131	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  charQuote);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  charQuote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  charQuote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
132	[BUG]  [BUGGY]  sb.append(''  +  char);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(''  +  char);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(''  +  char);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
133	[BUG]  [BUGGY]  sb.append('').append(c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('').append(c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('').append(c);	  sb.append(''    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
134	[BUG]  [BUGGY]  sb.append( "00000 ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "00000 ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "00000 ");	  sb.append(   "u000   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
135	[BUG]  [BUGGY]  sb.append(c, ",  quote= ");  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c, ",  quote= ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c, ",  quote= ");	  sb.append(   ",    quote=   ");    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  sb.append( "n "  +  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "n "  +  c);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "n "  +  c);	  sb.append(   "n   "    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
137	[BUG]  [BUGGY]  sb.append( ";no ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";no ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";no ");	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
138	[BUG]  [BUGGY]  sb.append( ";negated ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( ";negated ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( ";negated ");	  sb.append(   ";n   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
139	[BUG]  [BUGGY]  sb.append(c).append('n');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append(c).append('n');  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append(c).append('n');	  sb.append(c    +    quote);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
140	[BUG]  [BUGGY]  sb.append('N',  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append('N',  quote);  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append('N',  quote);	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  sb.append( "'N' ");  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "'N' ");  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "'N' ");	  sb.append('N');    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  sb.append( "t ").append(outputCharsetEncoder.getBytes());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);      [BUGGY]  sb.append( "t ").append(outputCharsetEncoder.getBytes());  [BUGGY]      for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);  switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	1011	1011	1	replace	sb.append( "t ").append(outputCharsetEncoder.getBytes());	  sb.append(   "t   ".getBytes());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
