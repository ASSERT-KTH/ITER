bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  doublequote  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.charAt(i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.charAt(i  +  1);	  doublequote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  doublequote  =  s.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.charAt(i)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.charAt(i)+  1;	  doublequote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  doublequote  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.charAt(i++);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.charAt(i++);	  doublequote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  if(doubleq  <=  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  0)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  if(doubleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
7	[BUG]  [BUGGY]  if(doubleq  <=  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.MIN_VALUE)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  if(doubleq  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  doubleq)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  if(doubleq  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >=  doubleq)  {	  if(doubleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  if(doubleq  <=  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
11	[BUG]  [BUGGY]  if(doubleq  <  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
12	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
13	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
14	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
15	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
16	[BUG]  [BUGGY]  if(doubleq  <=  Doubleq  ||  doubleq  >  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Doubleq  ||  doubleq  >  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Doubleq  ||  doubleq  >  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
17	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  DoubleQ)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  DoubleQ)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  DoubleQ)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
18	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >=  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
19	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  ==  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  ==  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  ==  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
20	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  +  1)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  +  1)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  +  1)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
21	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  ||  doubleq  <=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  ||  doubleq  <=  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  ||  doubleq  <=  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
22	[BUG]  [BUGGY]  String  quote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.charAt(0);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
23	[BUG]  [BUGGY]  char  quote  =  s.charAt(1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(1);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
24	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(i  +  1);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
25	[BUG]  [BUGGY]  char  quote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.substring(0,  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.substring(0,  i);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
26	[BUG]  [BUGGY]  char  quote  =  s.charAt(2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(2);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
27	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(doubleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(doubleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  Double.isNaN(doubleq))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
28	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
29	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(quote))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(quote))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  Double.isNaN(quote))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
30	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
31	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq  +  1))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  Double.isNaN(singleq  +  1))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
32	[BUG]  [BUGGY]  if(doubleq  <=  singleq  ||  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  singleq  ||  Double.isNaN(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  singleq  ||  Double.isNaN(singleq))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
33	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  s.length()  -  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  s.length()  -  1);	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i).trim();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i).trim();  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i).trim();	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
35	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  Double.isNaN(singleq))  {	  if(doubleq    <    singleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
36	[BUG]  [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(quote))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(quote))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  singleq  ||  Double.isNaN(quote))  {	  if(doubleq    <    singleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
37	[BUG]  [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  singleq  ||  Double.isNaN(singleq)||  Double.isInfinite(singleq))  {	  if(doubleq    <    singleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
38	[BUG]  [BUGGY]  if(singleq  <  singleq  ||  Double.isNaN(doubleq))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  singleq  ||  Double.isNaN(doubleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  singleq  ||  Double.isNaN(doubleq))  {	  if(doubleq    <    singleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
39	[BUG]  [BUGGY]  if(s.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <  0)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
40	[BUG]  [BUGGY]  if(doubleq  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  0)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
41	[BUG]  [BUGGY]  if(doubleq  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >=  0)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
42	[BUG]  [BUGGY]  if(s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  ''')  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
43	[BUG]  [BUGGY]  if(doubleq!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq!=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq!=  0)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
44	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  &&  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  &&  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  &&  s.charAt(i)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  ||  s.charAt(0)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  ||  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  ||  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  ||  s.charAt(0)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  if(s.charAt(i)!=  '''  &&  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)!=  '''  &&  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)!=  '''  &&  s.charAt(i)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  s  =  doublequote.trim();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  doublequote.trim();  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  doublequote.trim();	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
49	[BUG]  [BUGGY]  s  =  s.trim()  +  doublequote;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.trim()  +  doublequote;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.trim()  +  doublequote;	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
50	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(i  +  1,  s.length());	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
51	[BUG]  [BUGGY]  s  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  Double.parseDouble(s);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  Double.parseDouble(s);	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
52	[BUG]  [BUGGY]  s  =  String.valueOf(s.trim());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  String.valueOf(s.trim());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  String.valueOf(s.trim());	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
53	[BUG]  [BUGGY]  if(s.length()  ==  0  ||  s.charAt(i)  ==  ''')  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  ==  0  ||  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  ==  0  ||  s.charAt(i)  ==  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  	38	None	replace
54	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(1)  ==  ''')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(1)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  ||  s.charAt(1)  ==  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  	38	None	replace
55	[BUG]  [BUGGY]  doubleq  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  =  s.charAt(i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  =  s.charAt(i);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
56	[BUG]  [BUGGY]  char  doubleq  =  s.charAt(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doubleq  =  s.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doubleq  =  s.charAt(0);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  	49	None	replace
57	[BUG]  [BUGGY]  doubleq  =  s.substring(0,  i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  =  s.substring(0,  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  =  s.substring(0,  i);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  	49	None	replace
58	[BUG]  [BUGGY]  doubleq  =  s.substring(0,  s.length()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  =  s.substring(0,  s.length()  -  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  =  s.substring(0,  s.length()  -  1);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  	49	None	replace
59	[BUG]  [BUGGY]  doubleq  -=  s.charAt(0);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  -=  s.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  -=  s.charAt(0);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  	49	None	replace
60	[BUG]  [BUGGY]  if(doublequote  <=  0)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  0)  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  	13	None	replace
61	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  <=  Double.MAX_VALUE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  <=  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  <=  Double.MAX_VALUE)  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  	13	None	replace
62	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE)  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  	13	None	replace
63	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  	13	None	replace
64	[BUG]  [BUGGY]  if(doublequote  <=  Doubleq.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Doubleq.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Doubleq.POSITIVE_INFINITY)  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  if(doublequote  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  0)  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
66	[BUG]  [BUGGY]  if(doublequote!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote!=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote!=  0)  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
67	[BUG]  [BUGGY]  if(doublequote  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  >=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  >=  0)  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
68	[BUG]  [BUGGY]  if(quote  <  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(quote  <  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(quote  <  0)  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
69	[BUG]  [BUGGY]  if(singlequote  <=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote  <=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote  <=  doubleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
70	[BUG]  [BUGGY]  if(singlequote  <=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote  <=  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote  <=  Doubleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
71	[BUG]  [BUGGY]  if(doublequote  <  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  singleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
72	[BUG]  [BUGGY]  if(singlequote  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote  ==  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote  ==  doubleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
73	[BUG]  [BUGGY]  if(singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
74	[BUG]  [BUGGY]  if(doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
75	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
76	[BUG]  [BUGGY]  if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
77	[BUG]  [BUGGY]  if(singleq!=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
78	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
79	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
80	[BUG]  [BUGGY]  if(singleq  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  0)  {	  if(singleq    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  if(singleq!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  0)  {	  if(singleq    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  if(singleq  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  0)  {	  if(singleq    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  if(singleq  <  0)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  0)  {	  if(singleq    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  if(singleq  <=  0  ||  quote  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  0  ||  quote  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  0  ||  quote  ==  ''')  {	  if(singleq    <=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
86	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.NaN)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.NaN)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.NaN)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
87	[BUG]  [BUGGY]  if(doublequote!=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote!=  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote!=  Doubleq)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
89	[BUG]  [BUGGY]  if(doublequote  <  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  Doubleq)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
90	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.NEGATIVE_INFINITY)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
91	[BUG]  [BUGGY]  if(singleq  <  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
92	[BUG]  [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
93	[BUG]  [BUGGY]  if(doubleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
94	[BUG]  [BUGGY]  if(singleq  >=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
95	[BUG]  [BUGGY]  if(singleq!=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
96	[BUG]  [BUGGY]  if(singleq  <  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  if(doubleq  <=  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
98	[BUG]  [BUGGY]  if(doubleq  <=  Doublequote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
99	[BUG]  [BUGGY]  if(doubleq  ==  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
100	[BUG]  [BUGGY]  if(doubleq  >=  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >=  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >=  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
101	[BUG]  [BUGGY]  if(doubleq  >  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
102	[BUG]  [BUGGY]  if(doubleq  <=  DoubleQuote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  DoubleQuote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  DoubleQuote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
103	[BUG]  [BUGGY]  if(doubleq!=  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq!=  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq!=  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
104	[BUG]  [BUGGY]  String  quote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.charAt(i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.charAt(i);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
105	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(i++);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(i++);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
106	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(i)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(i)+  1;	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
107	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(i  +  2);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
108	[BUG]  [BUGGY]  if(singleq  ==  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
109	[BUG]  [BUGGY]  if(doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
110	[BUG]  [BUGGY]  if(singleq  <  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
111	[BUG]  [BUGGY]  if(singleq!=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
112	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  singleq  >  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
113	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_IN_CLAUSE  ||  doubleq  >  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
114	[BUG]  [BUGGY]  if(singleq  >=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
115	[BUG]  [BUGGY]  if(doublequote!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote!=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote!=  doubleq)  {	  if(doublequote    >=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
116	[BUG]  [BUGGY]  if(s.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)!=  ''')  {	  if(doublequote    >=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
117	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i  +  1);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
118	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i  +  2);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
119	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  1);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
120	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i  +  1,  s.length());	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
121	[BUG]  [BUGGY]  char  doublequote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doublequote  =  s.substring(0,  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doublequote  =  s.substring(0,  i);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
122	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i  +  3);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i  +  3);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
123	[BUG]  [BUGGY]  if(s.length()  <  doubleq  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <  doubleq  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <  doubleq  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
124	[BUG]  [BUGGY]  if(doubleq  <  s.length()  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  s.length()  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  s.length()  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
125	[BUG]  [BUGGY]  if(doubleq  <  0  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  0  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  0  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
126	[BUG]  [BUGGY]  if(doubleq  <=  0  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  0  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  0  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
127	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
128	[BUG]  [BUGGY]  if(s.indexOf(''')  >=  -1)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.indexOf(''')  >=  -1)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.indexOf(''')  >=  -1)  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
129	[BUG]  [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
130	[BUG]  [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
131	[BUG]  [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
132	[BUG]  [BUGGY]  if(singleq  ==  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
133	[BUG]  [BUGGY]  if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
134	[BUG]  [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
135	[BUG]  [BUGGY]  if(singleq  >=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
136	[BUG]  [BUGGY]  if(doubleq  <  singleq  ||  doubleq  >  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  singleq  ||  doubleq  >  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  singleq  ||  doubleq  >  doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
137	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  quote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  quote)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
138	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  doubleq  >  doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
139	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  singleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >=  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >=  singleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
140	[BUG]  [BUGGY]  if(doubleq  <=  singleq  ||  doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  singleq  ||  doubleq  >  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  singleq  ||  doubleq  >  singleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
141	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  >  singleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
142	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  +  1);	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
143	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  +  2);	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
144	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  +  1,  s.length());	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
145	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  +  3);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  +  3);	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
146	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  +  4);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  +  4);	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
147	[BUG]  [BUGGY]  if(doubleq  <=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
148	[BUG]  [BUGGY]  if(doubleq  <  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
149	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
150	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
151	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >=  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
152	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
153	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  quote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0),  quote);	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
154	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(i));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(i));	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
155	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  +  quote);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  +  quote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0)  +  quote);	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  i);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0),  i);	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
157	[BUG]  [BUGGY]  if(quote  ==  '''  ||  doublequote  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(quote  ==  '''  ||  doublequote  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(quote  ==  '''  ||  doublequote  ==  ''')  {	  if(doublequote    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
158	[BUG]  [BUGGY]  if(doublequote  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
159	[BUG]  [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  doubleq  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
160	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
161	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  doublequote  ==  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
162	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  doublequote  >=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
163	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  singlequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  singlequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  singlequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
164	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  1);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  2);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
166	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  doubleq);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  doubleq);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  1,  doubleq);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
167	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  3);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  3);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
168	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  4);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  4);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
169	[BUG]  [BUGGY]  if(doubleq!=  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq!=  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq!=  singleq)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
170	[BUG]  [BUGGY]  if(doubleq!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq!=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq!=  doubleq)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
171	[BUG]  [BUGGY]  if(singleq  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  doubleq)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
172	[BUG]  [BUGGY]  if(singleq!=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  Double.POSITIVE_INFINITY)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
173	[BUG]  [BUGGY]  if(singleq!=  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq!=  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq!=  Double.MIN_VALUE)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
174	[BUG]  [BUGGY]  int  doubleq  =  s.lastIndexOf(''');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.lastIndexOf(''');  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.lastIndexOf(''');	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
175	[BUG]  [BUGGY]  char  doubleq  =  s.indexOf(''');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doubleq  =  s.indexOf(''');  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doubleq  =  s.indexOf(''');	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
176	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  quote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  quote);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
177	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  1);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
178	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  doubleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  doubleq);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  doubleq);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
179	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  0);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
180	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  2);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
181	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  doubleq);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  doubleq);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  1,  doubleq);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
182	[BUG]  [BUGGY]  char  singlequote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  singlequote  =  s.substring(0,  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  singlequote  =  s.substring(0,  i);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
183	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  3);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  3);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
184	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  4);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  4);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
185	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  &&  s.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  &&  s.charAt(i)!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  &&  s.charAt(i)!=  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
186	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(0)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(0)!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  ||  s.charAt(0)!=  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
187	[BUG]  [BUGGY]  if(doubleq  ==  singleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  singleq)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
188	[BUG]  [BUGGY]  if(singleq  ==  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.MIN_VALUE)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
189	[BUG]  [BUGGY]  if(singleq  ==  doubleq  +  1)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  +  1)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  +  1)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
190	[BUG]  [BUGGY]  if(s.length()  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  ==  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  ==  doubleq)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
191	[BUG]  [BUGGY]  if(s.length()  <=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <=  doubleq)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
192	[BUG]  [BUGGY]  if(s.length()  >  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  >  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  >  doubleq)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
193	[BUG]  [BUGGY]  if(s.length()!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()!=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()!=  doubleq)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
194	[BUG]  [BUGGY]  if(s.length()  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  >=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  >=  doubleq)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
195	[BUG]  [BUGGY]  if(s.length()  <  doubleq  ||  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <  doubleq  ||  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <  doubleq  ||  s.charAt(i)  ==  ''')  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
196	[BUG]  [BUGGY]  if(s.charAt(i  +  1)  ==  '''  ||  s.charAt(i  +  1)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i  +  1)  ==  '''  ||  s.charAt(i  +  1)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i  +  1)  ==  '''  ||  s.charAt(i  +  1)  ==  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
197	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  singleq  >  Double.parseDouble(doublequote))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  singleq  >  Double.parseDouble(doublequote))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  singleq  >  Double.parseDouble(doublequote))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
198	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
199	[BUG]  [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  doubleq  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
200	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  singlequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  singlequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  singlequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
201	[BUG]  [BUGGY]  if(doublequote  <=  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
202	[BUG]  [BUGGY]  if(doublequote  <  singleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  singleq  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  singleq  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
203	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  singlequote  >  Double.parseDouble(doubleq))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  singlequote  >  Double.parseDouble(doubleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  singlequote  >  Double.parseDouble(doubleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
204	[BUG]  [BUGGY]  if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
205	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
206	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
207	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
208	[BUG]  [BUGGY]  if(doubleq  >=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
209	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
210	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(s)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(s)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(s)+  1;	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
211	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(doublequote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(doublequote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(doublequote);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
212	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(s)+  quote;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(s)+  quote;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(s)+  quote;	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
213	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(s,  quote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(s,  quote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(s,  quote);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
214	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(s  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(s  -  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(s  -  1);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
215	[BUG]  [BUGGY]  if(doublequote  <=  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
216	[BUG]  [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
217	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  ==  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  ==  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  doublequote  ==  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
218	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >=  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >=  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  doublequote  >=  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
219	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
220	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  ||  doublequote  >  Double.MIN_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
221	[BUG]  [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.MIN_VALUE  ||  doubleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
222	[BUG]  [BUGGY]  if(singleq  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
223	[BUG]  [BUGGY]  if(singleq  <  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
224	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_INFINITY  ||  singleq  >  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
225	[BUG]  [BUGGY]  if(doublequote  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
226	[BUG]  [BUGGY]  if(singleq  >=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  >=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  >=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
227	[BUG]  [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
228	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
229	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
230	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
231	[BUG]  [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.MIN_VALUE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
232	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY  ||  doubleq  >  Double.MAX_VALUE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
233	[BUG]  [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  1  ||  doubleq  <=  singleq)  {	  if(doubleq    <=    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
234	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  1);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
235	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  2);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
236	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  1,  doubleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  1,  doubleq);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  1,  doubleq);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
237	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  3);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  3);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
238	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  4);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  4);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
239	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  1,  s.length());	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
240	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  1  ||  doubleq  >  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  1  ||  doubleq  >  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
241	[BUG]  [BUGGY]  if(singleq  <  1  ||  doubleq  <  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  1  ||  doubleq  <  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  1  ||  doubleq  <  doubleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
242	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  <=  singleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  1  ||  doubleq  <=  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  1  ||  doubleq  <=  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
243	[BUG]  [BUGGY]  if(doubleq  <  1  ||  singleq  <  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  1  ||  singleq  <  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  1  ||  singleq  <  doubleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
244	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  >=  singleq)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  1  ||  doubleq  >=  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  1  ||  doubleq  >=  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
245	[BUG]  [BUGGY]  if(singleq  <  1  ||  doubleq  <  singleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  1  ||  doubleq  <  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  1  ||  doubleq  <  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
246	[BUG]  [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  &&  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
247	[BUG]  [BUGGY]  if(doublequote  <  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  Double.NEGATIVE_INIT_CLAUSE  ||  doublequote  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
248	[BUG]  [BUGGY]  if(doubleq  <  Doubleq.MIN_VALUE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Doubleq.MIN_VALUE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Doubleq.MIN_VALUE  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
249	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
250	[BUG]  [BUGGY]  if(doubleq  <=  1  ||  doubleq  <  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  1  ||  doubleq  <  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  1  ||  doubleq  <  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
251	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  ==  singleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  1  ||  doubleq  ==  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  1  ||  doubleq  ==  singleq)  {	  if(doubleq    <    1    ||    doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
252	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
253	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
254	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  singleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  singleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  singleq  <=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
255	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
256	[BUG]  [BUGGY]  if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
257	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  &&  doublequote!=  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  &&  doublequote!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  &&  doublequote!=  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
258	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  &&  doublequote  <=  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  &&  doublequote  <=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  &&  doublequote  <=  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
259	[BUG]  [BUGGY]  if(s.charAt(i)  ==  '''  &&  Double.isNaN(singlequote))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  ==  '''  &&  Double.isNaN(singlequote))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  ==  '''  &&  Double.isNaN(singlequote))  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
260	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  1,  doublequote);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.substring(0,  i  +  1,  doublequote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.substring(0,  i  +  1,  doublequote);	  s    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
261	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  ==  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
262	[BUG]  [BUGGY]  if(doubleq  <  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Double.POSITIVE_INFINITY  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
263	[BUG]  [BUGGY]  if(doubleq  >=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >=  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
264	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(null);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(null);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(null);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
265	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(value);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(value);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(value);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
266	[BUG]  [BUGGY]  if(i!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(i!=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(i!=  doubleq)  {	  if(singleq!=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
267	[BUG]  [BUGGY]  if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.NEGATIVE_INIT_CLAUSE  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
268	[BUG]  [BUGGY]  if(singleq  ==  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
269	[BUG]  [BUGGY]  if(doublequote  <  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
270	[BUG]  [BUGGY]  doubleq  =  s.charAt(0)  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  =  s.charAt(0)  +  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  =  s.charAt(0)  +  1;	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
271	[BUG]  [BUGGY]  doubleq  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doubleq  =  s.charAt(i  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doubleq  =  s.charAt(i  +  1);	  doubleq    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
272	[BUG]  [BUGGY]  char  doublequote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doublequote  =  s.charAt(i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doublequote  =  s.charAt(i);	  doublequote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
273	[BUG]  [BUGGY]  if(singlequote  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote  >=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote  >=  doubleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
274	[BUG]  [BUGGY]  if(singlequote!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote!=  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote!=  doubleq)  {	  if(singlequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
275	[BUG]  [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  &&  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
276	[BUG]  [BUGGY]  if(doublequote  <  Double.MIN_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  Double.MIN_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  Double.MIN_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
277	[BUG]  [BUGGY]  if(doublequote  <  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  Double.MAX_VALUE  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
278	[BUG]  [BUGGY]  char  doublequote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doublequote  =  s.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doublequote  =  s.charAt(0);	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
279	[BUG]  [BUGGY]  char  singlequote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  singlequote  =  s.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  singlequote  =  s.charAt(0);	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
280	[BUG]  [BUGGY]  doublequote  =  s.charAt(0)  +  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.charAt(0)  +  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.charAt(0)  +  1;	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
281	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  doublequote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  doublequote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  1,  doublequote);	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
282	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i)+  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i)+  1;	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
283	[BUG]  [BUGGY]  if(doublequote  <  doubleq  &&  singlequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  &&  singlequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  &&  singlequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
284	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
285	[BUG]  [BUGGY]  if(singleq  <  doublequote  ||  singlequote  >  Double.parseDouble(doubleq))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doublequote  ||  singlequote  >  Double.parseDouble(doubleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doublequote  ||  singlequote  >  Double.parseDouble(doubleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
286	[BUG]  [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  doubleq  &&  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  doubleq  &&  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
287	[BUG]  [BUGGY]  if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
288	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  Double.isInfinite(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  Double.isInfinite(singleq))  {	  if(singleq    <=    Double.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
289	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  Double.isNaN(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  Double.isNaN(singleq))  {	  if(singleq    <=    Double.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
290	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  doubleq  <=  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  doubleq  <=  Double.MIN_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  doubleq  <=  Double.MIN_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
291	[BUG]  [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  ==  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  ==  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.MIN_VALUE  ||  singleq  ==  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
292	[BUG]  [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  >=  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  Double.MIN_VALUE  ||  singleq  >=  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  Double.MIN_VALUE  ||  singleq  >=  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
293	[BUG]  [BUGGY]  if(quote  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(quote  ==  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(quote  ==  doubleq)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
294	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i)+  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i)+  1;	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
295	[BUG]  [BUGGY]  s  =  Double.valueOf(s.trim());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  Double.valueOf(s.trim());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  Double.valueOf(s.trim());	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
296	[BUG]  [BUGGY]  s  =  Double.valueOf(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  Double.valueOf(s.charAt(0));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  Double.valueOf(s.charAt(0));	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
297	[BUG]  [BUGGY]  s  =  Double.doubleToLongBits(s.trim());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  Double.doubleToLongBits(s.trim());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  Double.doubleToLongBits(s.trim());	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
298	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  i);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  i);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
299	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  Double.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  Double.MIN_VALUE);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  Double.MIN_VALUE);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
300	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  doublequote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  doublequote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  1,  doublequote);	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
301	[BUG]  [BUGGY]  if(doublequote  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  ''')  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
302	[BUG]  [BUGGY]  if(singlequote  <  0)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singlequote  <  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singlequote  <  0)  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
303	[BUG]  [BUGGY]  if(s.length()  <  2)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <  2)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <  2)  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
304	[BUG]  [BUGGY]  if(s.charAt(i)  >=  '''  &&  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  >=  '''  &&  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  >=  '''  &&  s.charAt(i)  ==  ''')  {	  if(s.charAt(i)    >=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
305	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  >  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  >  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
306	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  doubleq  >  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  doubleq  >  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
307	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  1)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  1)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  1)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
308	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i  +  4);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i  +  4);	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
309	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  doublequote  =  s.substring(0,  i)+  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  doublequote  =  s.substring(0,  i)+  1;	  String    doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
310	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  0)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
311	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  singleq  >  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  singleq  >  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  singleq  >  doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
312	[BUG]  [BUGGY]  if(doublequote  ==  '''  ||  doublequote  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  '''  ||  doublequote  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  '''  ||  doublequote  ==  ''')  {	  if(doublequote    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
313	[BUG]  [BUGGY]  if(doublequote  ==  0.0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  0.0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  0.0)  {	  if(doublequote    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
314	[BUG]  [BUGGY]  if(doublequote  ==  '''  ||  doubleq  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  '''  ||  doubleq  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  '''  ||  doubleq  ==  ''')  {	  if(doublequote    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
315	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.substring(0,  i));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.substring(0,  i));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.substring(0,  i));	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
316	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  +  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0)  +  1);	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
317	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0)  -  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0)  -  1);	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
318	[BUG]  [BUGGY]  char  quote  =  Double.valueOf(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  Double.valueOf(s.charAt(0));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  Double.valueOf(s.charAt(0));	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
319	[BUG]  [BUGGY]  if(doublequote  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
320	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
321	[BUG]  [BUGGY]  if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  Double.POSITIVE_IN_FOR_INIT_CLAUSE  ||  singleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
322	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
323	[BUG]  [BUGGY]  if(doublequote  ==  Double.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Double.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Double.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
324	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
325	[BUG]  [BUGGY]  if(doublequote  ==  Double.NaN)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Double.NaN)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Double.NaN)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
326	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  ||  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  ||  Double.isNaN(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  ||  Double.isNaN(singleq))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
327	[BUG]  [BUGGY]  if(doublequote  <=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
328	[BUG]  [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(singleq)||  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(singleq)||  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
329	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  ==  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
330	[BUG]  [BUGGY]  char  quote  =  s.charAt(0)  +  doublequote;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(0)  +  doublequote;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(0)  +  doublequote;	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
331	[BUG]  [BUGGY]  char  quote  =  s.charAt(0)  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(0)  +  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(0)  +  1;	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
332	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  1.0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  1.0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  1.0)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
333	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  0.0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  0.0)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
334	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  255)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  255)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  255)  {	  if(doubleq    <    doubleq    ||    doubleq    >    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
335	[BUG]  [BUGGY]  if(s.charAt(0)!=  '''  &&  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)!=  '''  &&  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)!=  '''  &&  s.charAt(0)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
336	[BUG]  [BUGGY]  if(s.charAt(0)!=  '''  ||  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)!=  '''  ||  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)!=  '''  ||  s.charAt(0)  ==  ''')  {	  if(s.charAt(i)!=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
337	[BUG]  [BUGGY]  if(doubleq  ==  Double.MIN_VALUE  ||  doubleq  ==  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  Double.MIN_VALUE  ||  doubleq  ==  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  Double.MIN_VALUE  ||  doubleq  ==  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
338	[BUG]  [BUGGY]  doublequote  =  s.substring(0,  i  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(0,  i  -  1);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(0,  i  -  1);	  doublequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
339	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  singlequote  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  singlequote  =  s.substring(0,  i  +  1,  s.length());	  String    singlequote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
340	[BUG]  [BUGGY]  if(doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  >  singleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  >  singleq)  {	  if(doubleq    >=    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
341	[BUG]  [BUGGY]  if(doublequote  <=  doublequote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  doublequote)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  doublequote)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
342	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  <=  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  <=  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE  ||  doublequote  <=  Double.MAX_VALUE)  {	  if(doubleq    <    doublequote)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
343	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
344	[BUG]  [BUGGY]  char  quote  =  doublequote.charAt(0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  doublequote.charAt(0);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  doublequote.charAt(0);	  char    quote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
345	[BUG]  [BUGGY]  if(doublequote  <=  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  ''')  {	  if(doublequote    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
346	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
347	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  '''  &&  s.charAt(1)  ==  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
348	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  &&  s.charAt(0)  ==  '''  &&  s.charAt(1)  ==  ''')  {	  if(s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
349	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(str);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(str);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(str);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
350	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(singlequote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.parseDouble(singlequote);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.parseDouble(singlequote);	  doublequote    =    Double.parseDouble(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
351	[BUG]  [BUGGY]  doublequote  =  s.trim();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.trim();  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.trim();	  doublequote    =    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
352	[BUG]  [BUGGY]  if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(doubleq))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(doubleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doublequote  ||  doublequote  >  Double.parseDouble(doubleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
353	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(singleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(singleq))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(singleq))  {	  if(doublequote    <    doubleq    ||    doublequote    >    Double.parseDouble(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
354	[BUG]  [BUGGY]  if(doubleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
355	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  s.length())  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
356	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(s))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  Double.parseDouble(s))  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
357	[BUG]  [BUGGY]  if(doublequote  <  0  ||  doublequote  >  s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <  0  ||  doublequote  >  s.charAt(0))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <  0  ||  doublequote  >  s.charAt(0))  {	  if(doublequote    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
358	[BUG]  [BUGGY]  if(doubleq  <  Double.POSITIVE_INFINITY  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Double.POSITIVE_INFINITY  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Double.POSITIVE_INFINITY  ||  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
359	[BUG]  [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  1  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <=    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
360	[BUG]  [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  1  ||  doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  1  ||  doubleq  <=  Double.POSITIVE_IN_CLAUSE)  {	  if(doubleq    <=    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
361	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0),  s.charAt(0));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0),  s.charAt(0));	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
362	[BUG]  [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0))  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  Double.valueOf(s.charAt(0))  +  1;  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  Double.valueOf(s.charAt(0))  +  1;	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
363	[BUG]  [BUGGY]  char  doublequote  =  Double.valueOf(s.charAt(0));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  doublequote  =  Double.valueOf(s.charAt(0));  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  doublequote  =  Double.valueOf(s.charAt(0));	  doublequote    =    Double.valueOf(s.charAt(0));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
364	[BUG]  [BUGGY]  if(s.length()  <  doubleq  ||  s.charAt(0)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.length()  <  doubleq  ||  s.charAt(0)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.length()  <  doubleq  ||  s.charAt(0)  ==  ''')  {	  if(s.length()    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
365	[BUG]  [BUGGY]  if(singleq  ==  doubleq  ||  singleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  ||  singleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  ||  singleq  ==  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
366	[BUG]  [BUGGY]  if(singleq  ==  doubleq  &&  singleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  &&  singleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  &&  singleq  <=  Double.POSITIVE_INIT_CLAUSE)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
367	[BUG]  [BUGGY]  if(singleq  ==  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  ==  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  ==  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {	  if(singleq    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
368	[BUG]  [BUGGY]  if(doubleq  ==  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
369	[BUG]  [BUGGY]  if(Double.isNaN(doubleq)||  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(Double.isNaN(doubleq)||  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(Double.isNaN(doubleq)||  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
370	[BUG]  [BUGGY]  if(doubleq!=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq!=  Double.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq!=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
371	[BUG]  [BUGGY]  if(doubleq  <=  s.length()  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  s.length()  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  s.length()  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
372	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  s.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  ||  doubleq  >  s.length())  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  ||  doubleq  >  s.length())  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
373	[BUG]  [BUGGY]  if(s.indexOf(''')  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.indexOf(''')  >=  0)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.indexOf(''')  >=  0)  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
374	[BUG]  [BUGGY]  if(s.indexOf(''')  >=  -1  &&  doubleq  <=  s.indexOf(''))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.indexOf(''')  >=  -1  &&  doubleq  <=  s.indexOf(''))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.indexOf(''')  >=  -1  &&  doubleq  <=  s.indexOf(''))  {	  if(doubleq    <    doubleq    ||    doubleq    >    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
375	[BUG]  [BUGGY]  if(doubleq  <  0  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  0  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  0  ||  doubleq  >  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
376	[BUG]  [BUGGY]  if(doubleq  <  0  ||  doubleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  0  ||  doubleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  0  ||  doubleq  >  Double.MAX_VALUE)  {	  if(doubleq    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
377	[BUG]  [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(doublequote))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <  doubleq  ||  Double.isNaN(doublequote))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <  doubleq  ||  Double.isNaN(doublequote))  {	  if(doubleq    <    doubleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
378	[BUG]  [BUGGY]  if(doublequote  ==  Doubleq.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  Doubleq.POSITIVE_INFINITY)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  Doubleq.POSITIVE_INFINITY)  {	  if(doublequote    <=    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
379	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Long.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Long.MAX_VALUE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
380	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  &&  doubleq  <=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  &&  doubleq  <=  Doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq  &&  doubleq  <=  Doubleq)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
381	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  2)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  2)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  2)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
382	[BUG]  [BUGGY]  if(doubleq  ==  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  ==  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  ==  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    Double.POSITIVE_IN_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
383	[BUG]  [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    Double.MIN_VALUE    ||    singleq    >    Double.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
384	[BUG]  [BUGGY]  if(doublequote  ==  doubleq  ||  doublequote  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  ==  doubleq  ||  doublequote  ==  null)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  ==  doubleq  ||  doublequote  ==  null)  {	  if(doublequote    ==    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
385	[BUG]  [BUGGY]  doublequote  =  s.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  doublequote  =  s.substring(i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	doublequote  =  s.substring(i  +  1,  s.length());	  doublequote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
386	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
387	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	String  quote  =  s.substring(0,  i  +  1,  s.length());	  String    quote    =    s.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
388	[BUG]  [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(singleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  singleq  ||  Double.isNaN(singleq  +  1))  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  singleq  ||  Double.isNaN(singleq  +  1))  {	  if(doubleq    <    singleq    ||    Double.isNaN(singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
389	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.DEFAULT_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.DEFAULT_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.DEFAULT_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
390	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE  ||  doubleq  >  Doubleq.POSITIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    ||    doubleq    >    Doubleq.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
391	[BUG]  [BUGGY]  if(doubleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
392	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(singleq  <=  Double.POSITIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(singleq  <=  Double.POSITIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
393	[BUG]  [BUGGY]  if(doublequote  >  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doublequote  >  doubleq)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doublequote  >  doubleq)  {	  if(doublequote    >=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
394	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  Double.POSITIVE_INFINITY);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  Double.POSITIVE_INFINITY);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
395	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''',  2);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  int  doubleq  =  s.indexOf(''',  2);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	int  doubleq  =  s.indexOf(''',  2);	  int    doubleq    =    s.indexOf(''');    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
396	[BUG]  [BUGGY]  if(doubleq  <  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  Double.NEGATIVE_INIT_CLAUSE  ||  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
397	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq    &&    doubleq    <=    Double.NEGATIVE_INIT_CLAUSE)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
398	[BUG]  [BUGGY]  s  =  s.trim().toLowerCase();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  s  =  s.trim().toLowerCase();  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	s  =  s.trim().toLowerCase();	  s    =    s.trim();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
399	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1,  doubleq);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  char  quote  =  s.charAt(i  +  1,  doubleq);  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	char  quote  =  s.charAt(i  +  1,  doubleq);	  char    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
400	[BUG]  [BUGGY]  if(s.charAt(i)  <=  '''  ||  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(i)  <=  '''  ||  s.charAt(i)  ==  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(i)  <=  '''  ||  s.charAt(i)  ==  ''')  {	  if(s.charAt(i)    >=    '''    ||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
401	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  &&  s.charAt(0)!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  &&  s.charAt(0)!=  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
402	[BUG]  [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(1)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;      [BUGGY]  if(s.charAt(0)  ==  '''  ||  s.charAt(1)!=  ''')  {  [BUGGY]        quote  =  '\'';  doublequote  =       "\     "     ";  singlequote  =       "\\\'     ";  }  else  {  quote  =  '\     "';  doublequote  =       "\\\     "     ";  singlequote  =       "\'     ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	969	969	1	replace	if(s.charAt(0)  ==  '''  ||  s.charAt(1)!=  ''')  {	  if(s.charAt(i)    ==    '''    ||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
