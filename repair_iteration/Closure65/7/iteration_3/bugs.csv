bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  CharsetEncoder  cc  =  c.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  c.charAt(i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  c.charAt(i++);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
2	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(i++);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
3	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.charAt(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
4	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
5	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
6	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
7	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  this);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  this);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  this);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
8	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  context);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  context);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  context);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
9	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
10	[BUG]  [BUGGY]  case  'N':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'N':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'N':  sb.append(c);  break;	  case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
11	[BUG]  [BUGGY]  case  '[':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '[':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '[':  sb.append(c);  break;	  case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
12	[BUG]  [BUGGY]  CharsetEncoder  c  =  c.charAt(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  c.charAt(i,  outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  c.charAt(i,  outputCharsetEncoder);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
13	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  c  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  c  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  c  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
14	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i,  outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i,  outputCharsetEncoder);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
15	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i,  c);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
16	[BUG]  [BUGGY]  CharsetEncoder  c  =  c.charAt(i);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  c.charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  c.charAt(i);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
17	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(Character.toLowerCase(c));  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(Character.toLowerCase(c));	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  sb.append('');  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append('');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append('');	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
19	[BUG]  [BUGGY]  sb.append( "n ");  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "n ");  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "n ");	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
20	[BUG]  [BUGGY]  sb.append('n');  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append('n');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append('n');	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
21	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(Character.toUpperCase(c));  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(Character.toUpperCase(c));	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
22	[BUG]  [BUGGY]  sb.append( "0 ");  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "0 ");  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "0 ");	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
23	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
24	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
25	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  3);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
26	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
27	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
28	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  4);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  4);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  4);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
29	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backslashEscape);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backslashEscape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backslashEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    s);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
30	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    s);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
31	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  quote);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    s);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
32	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  quote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
33	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
34	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
35	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  line);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  line);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  line);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
36	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  false);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  false);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape,  false);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
37	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    &&    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
38	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  &&  c  ==  't')  {	  if(c    ==    '0'    &&    c    ==    'n'    &&    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    &&    c    ==    'n'    &&    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  &&  c  ==  't')  {	  if(c    ==    '0'    &&    c    ==    'n'    &&    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  &&  c!=  't')  {	  if(c    ==    '0'    &&    c    ==    'n'    &&    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
43	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  &&  c  <=  't')  {	  if(c    ==    '0'    &&    c    ==    'n'    &&    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
44	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '0');  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '0');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '0');	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    'n');    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
45	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '');  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '');	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    'n');    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
46	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '/');  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '/');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  '/');	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    'n');    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
47	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c!=    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
48	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >=    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
49	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
50	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
51	[BUG]  [BUGGY]  CharsetEncoder  cc  =  c.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  c.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  c.charAt(i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
52	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  3);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
53	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
54	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
55	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
56	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
57	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
58	[BUG]  [BUGGY]  CharsetEncoder  cc  =  context.encode(c,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  context.encode(c,  outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  context.encode(c,  outputCharsetEncoder);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  CharsetEncoder  cc  =  context.encode(c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  context.encode(c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  context.encode(c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
60	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.context);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.context);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
61	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
62	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
63	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
64	[BUG]  [BUGGY]  CharsetEncoder  cc  =  chars.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  chars.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  chars.charAt(i  +  1);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
65	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getChars(i);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getChars(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getChars(i);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
66	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.toCharset(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.toCharset(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.toCharset(i);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
67	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
68	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  quote);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  quote);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  quote);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
69	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  c);  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  c);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
70	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i);	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
71	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);  break;  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
72	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char)+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char)+  1;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char)+  1;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    char);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
73	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
74	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
75	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
76	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
77	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
79	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {	  if(c    ==    '0'    &&    c    <=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
80	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  'r')  {	  if(c    ==    '0'    &&    c    <=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
81	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  'r')  {	  if(c    ==    '0'    &&    c    <=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
82	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  >=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  	54	None	replace
84	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  	54	None	replace
85	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  	54	None	replace
86	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  >  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  	54	None	replace
87	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  	54	None	replace
88	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  	16	None	replace
89	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  't')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    't')    {    	non-compiled	[CE]  	10	None	replace
90	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    't')    {    	non-compiled	[CE]  	10	None	replace
91	[BUG]  [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '')  {  sb.append('');  break;  }	  sb.append('');    break;    	non-compiled	[CE]  	25	None	replace
92	[BUG]  [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '')  {  sb.append('');  break;  }	  sb.append('');    break;    	non-compiled	[CE]  	25	None	replace
93	[BUG]  [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('');    break;    	non-compiled	[CE]  	25	None	replace
94	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	5	None	replace
95	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	5	None	replace
96	[BUG]  [BUGGY]  char  cc  =  s.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  char  cc  =  s.charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	char  cc  =  s.charAt(i);	  CharsetEncoder    cc    =    c.charAt(i);    	non-compiled	[CE]  	47	None	replace
97	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	64	None	replace
98	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	64	None	replace
99	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	64	None	replace
100	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	64	None	replace
101	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	64	None	replace
102	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  4);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  4);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  4);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    3);    	non-compiled	[CE]  	57	None	replace
103	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  3);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  3);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    3);    	non-compiled	[CE]  	57	None	replace
104	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
105	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
106	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
107	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
108	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
109	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
110	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
111	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
112	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
113	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
114	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
115	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  't')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	96	None	replace
116	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  't')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c!=  't')  {	  if(c    ==    '0'    &&    c    <=    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	98	None	replace
117	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  backslashEscape);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  backslashEscape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  backslashEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    quote);    	non-compiled	[CE]  	29	None	replace
118	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    quote);    	non-compiled	[CE]  	29	None	replace
119	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  false);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  false);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    quote);    	non-compiled	[CE]  	29	None	replace
120	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    quote);    	non-compiled	[CE]  	29	None	replace
121	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.length());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.length());  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.length());	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i);    	non-compiled	[CE]  	27	None	replace
122	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i);    	non-compiled	[CE]  	27	None	replace
123	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
124	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
125	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
126	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c!=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c!=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
127	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
128	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	72	None	replace
129	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  1);	  CharsetEncoder    c    =    this.outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	36	None	replace
130	[BUG]  [BUGGY]  CharsetEncoder  c  =(char)this.outputCharsetEncoder.charAt(i);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =(char)this.outputCharsetEncoder.charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =(char)this.outputCharsetEncoder.charAt(i);	  CharsetEncoder    c    =    this.outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	36	None	replace
131	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.charAt(i  +  1);	  CharsetEncoder    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	37	None	replace
132	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i++);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.charAt(i++);	  CharsetEncoder    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	37	None	replace
133	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  quote);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
134	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
135	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  0);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
136	[BUG]  [BUGGY]  CharsetEncoder  c  =  c.encode(outputCharsetEncoder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  c.encode(outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  c.encode(outputCharsetEncoder);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
137	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(c);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.encode(c);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
138	[BUG]  [BUGGY]  case  '':  sb.append(c);  break;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '':  sb.append(c);  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  	90	None	replace
139	[BUG]  [BUGGY]  case  't':  sb.append( "t ");  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  't':  sb.append( "t ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  't':  sb.append( "t ");  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  	90	None	replace
140	[BUG]  [BUGGY]  case  'T':  sb.append(c);  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'T':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'T':  sb.append(c);  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  	90	None	replace
141	[BUG]  [BUGGY]  case  '.':  sb.append(c);  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '.':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '.':  sb.append(c);  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  	90	None	replace
142	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i  +  1);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
143	[BUG]  [BUGGY]  char  c  =  s.charAt(i);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  char  c  =  s.charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	char  c  =  s.charAt(i);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
144	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i++);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
145	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  2);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i  +  2);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
146	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  3);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i  +  3);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
147	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  	48	None	replace
148	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  2);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  	48	None	replace
149	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  	48	None	replace
150	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);	  CharsetEncoder    cc    =    s.charAt(i);    	non-compiled	[CE]  	45	None	replace
151	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  2);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(i  +  2);	  CharsetEncoder    cc    =    s.charAt(i);    	non-compiled	[CE]  	45	None	replace
152	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	65	None	replace
153	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1,  c);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  	34	None	replace
154	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  	34	None	replace
155	[BUG]  [BUGGY]  case  '0':  sb.append( ".0 ");  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '0':  sb.append( ".0 ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '0':  sb.append( ".0 ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  	76	None	replace
156	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  't')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	13	None	replace
157	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	13	None	replace
158	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  '9')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  '9')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  '9')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  	81	None	replace
159	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
160	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  '9')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  '9')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
161	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'A'  &&  c  <=  'Z')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'A'  &&  c  <=  'Z')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'A'  &&  c  <=  'Z')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
162	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'a'  &&  c  <=  'z')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'a'  &&  c  <=  'z')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'a'  &&  c  <=  'z')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
163	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'A'  &&  c  <=  'Z')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'A'  &&  c  <=  'Z')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'A'  &&  c  <=  'Z')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
164	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
165	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  <=  'n'  ||  c  >=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
166	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
167	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
168	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
169	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
170	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
171	[BUG]  [BUGGY]  sb.append( "n ");  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "n ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "n ");  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
172	[BUG]  [BUGGY]  sb.append( "0 ");  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "0 ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "0 ");  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
173	[BUG]  [BUGGY]  sb.append('n');  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append('n');  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append('n');  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
174	[BUG]  [BUGGY]  sb.append( "u ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "u ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "u ");  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
175	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
176	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  3);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  3);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
177	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  2);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
178	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  4);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  4);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  4);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
179	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
180	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  10);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  10);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  10);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
181	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
182	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
183	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
184	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
185	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
186	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
187	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_SCRIPT);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_SCRIPT);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_SCRIPT);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
188	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  STATEMENT);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  STATEMENT);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
189	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.END_SCRIPT);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.END_SCRIPT);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.END_SCRIPT);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
190	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
191	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
192	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
193	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  'r')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
194	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
195	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
196	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
197	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
198	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
199	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
200	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
201	[BUG]  [BUGGY]  char  c  =  s.charAt(i);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  char  c  =  s.charAt(i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	char  c  =  s.charAt(i);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
202	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
203	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i  +  1);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
204	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.charAt(i++);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
205	[BUG]  [BUGGY]  if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }	  sb.append(c);    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
207	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
208	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
209	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
210	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
211	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
212	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
213	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
214	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
215	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
216	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
217	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
218	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
219	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
220	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'n'  &&  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
221	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
222	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  'n'  &&  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  'n'  &&  c  <=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  'n'  &&  c  <=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
223	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
224	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
225	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
226	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
227	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
228	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
229	[BUG]  [BUGGY]  if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }	  sb.append(c);    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
230	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  quote);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
231	[BUG]  [BUGGY]  CharsetEncoder  cc  =  c.charAt(i  +  1,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  c.charAt(i  +  1,  outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  c.charAt(i  +  1,  outputCharsetEncoder);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
232	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c)+  1;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c)+  1;	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
233	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++,  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
234	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
235	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  ==  'n'  &&  c!=  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
236	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c!=  'n'  ||  c  ==  't')  {	  if(c!=    '0'    &&    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
237	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i++);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  i++);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
238	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  quote);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  quote);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    this);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
239	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  null);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  null);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  null);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    this);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
240	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  false);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  false);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    this);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
241	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  backslashEscape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this,  backslashEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    this);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
242	[BUG]  [BUGGY]  case  ''':  sb.append(c);  break;case  ''':  sb.append( "' ");  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  ''':  sb.append(c);  break;case  ''':  sb.append( "' ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  ''':  sb.append(c);  break;case  ''':  sb.append( "' ");  break;	  case    ''':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
243	[BUG]  [BUGGY]  case  ''':  sb.append( "' ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  ''':  sb.append( "' ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  ''':  sb.append( "' ");  break;	  case    ''':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
244	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
245	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  <  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
246	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
247	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  4);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  4);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  4);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
248	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  *  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  *  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  *  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
249	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c!=  'n'  &&  c  ==  't')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
250	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
251	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  break;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  	89	None	replace
252	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  	89	None	replace
253	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  	89	None	replace
254	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  	89	None	replace
255	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  	89	None	replace
256	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  12);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  12);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  12);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  	28	None	replace
257	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  16);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  16);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  16);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  	28	None	replace
258	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  	41	None	replace
259	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	7	None	replace
260	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
261	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
262	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >=  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	87	None	replace
263	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    'r')    {    	non-compiled	[CE]  	8	None	replace
264	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(chars,  i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(chars,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(chars,  i);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  	50	None	replace
265	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  	50	None	replace
266	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  	59	None	replace
267	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
268	[BUG]  [BUGGY]  sb.append(''  +  c);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(''  +  c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(''  +  c);  break;	  sb.append('');    break;    	non-compiled	[CE]  	25	None	replace
269	[BUG]  [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '')  {  sb.append('');  break;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('');    break;    	non-compiled	[CE]  	25	None	replace
270	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  	85	None	replace
271	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
272	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  sb);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
273	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	56	None	replace
274	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  'n'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  'n'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    &&    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  	33	None	replace
275	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'a'  &&  c  <=  'z')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'a'  &&  c  <=  'z')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'a'  &&  c  <=  'z')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  	81	None	replace
276	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  	81	None	replace
277	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
278	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
279	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
280	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(sb);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	23	None	replace
281	[BUG]  [BUGGY]  sb.append('0');  break;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append('0');  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append('0');  break;	  sb.append(c);    break;    	non-compiled	[CE]  	20	None	replace
282	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_SEPARATOR);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_SEPARATOR);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_SEPARATOR);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    char);    	non-compiled	[CE]  	93	None	replace
283	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
284	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb.toString());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb.toString());  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  sb.toString());	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
285	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'a'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'a'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'a'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
286	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
287	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'f'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  'f'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  'f'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
288	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'r'  ||  c  >=  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'r'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'r'  ||  c  >=  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
289	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >=    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
290	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  >=  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
291	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
292	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  0);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  0);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  0);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
293	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
294	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    s);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
295	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_PREFIX);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_PREFIX);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  CDATA_PREFIX);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
296	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OBJECT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OBJECT);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OBJECT);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
297	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  1));  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  1));	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
298	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i));  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i));	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
299	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
300	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
301	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
302	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  <  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
303	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  >=  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
304	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  *  2);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
305	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
306	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  mode);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  mode);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  mode);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    context);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
307	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
308	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  break;	  CharsetEncoder    c    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
309	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
310	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
311	[BUG]  [BUGGY]  case  'e':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'e':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'e':  sb.append(c);  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
312	[BUG]  [BUGGY]  case  'u':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'u':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'u':  sb.append(c);  break;	  case    't':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
313	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
314	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  i  +  1);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
315	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  reversequoteEscape);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  reversequoteEscape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  reversequoteEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
316	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
317	[BUG]  [BUGGY]  if(c  ==  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '')  {  sb.append(c);  case  'n':  sb.append( "n ");  break;  }	  sb.append(c);    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
318	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
319	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
320	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
321	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  >=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
322	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);	  CharsetEncoder    cc    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
323	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);	  CharsetEncoder    cc    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
324	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
325	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
326	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  escape);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  escape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  escape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    sb);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
327	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
328	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
329	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r'  ||  c  >  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r'  ||  c  >  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  <  'r'  ||  c  >  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
330	[BUG]  [BUGGY]  case  '-':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '-':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '-':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
331	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);	  CharsetEncoder    cc    =    c.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
332	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
333	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >=  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
334	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
335	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  0);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
336	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
337	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  >  'r')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
338	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  'n'  &&  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c!=  'n'  &&  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c!=  'n'  &&  c  ==  't')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
339	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
340	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
341	[BUG]  [BUGGY]  case  ''':  sb.append( "'' ");  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  ''':  sb.append( "'' ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  ''':  sb.append( "'' ");  break;	  case    ''':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
342	[BUG]  [BUGGY]  case  '':  sb.append(c   ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '':  sb.append(c   ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '':  sb.append(c   ");  break;	  case    ''':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
343	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getChars(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getChars(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getChars(i);	  CharsetEncoder    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
344	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.inputCharset(i);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.inputCharset(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.inputCharset(i);	  CharsetEncoder    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
345	[BUG]  [BUGGY]  sb.append('0');  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append('0');  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append('0');	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
346	[BUG]  [BUGGY]  sb.append( "u ");  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append( "u ");  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append( "u ");	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
347	[BUG]  [BUGGY]  sb.append(c  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(c  +  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(c  +  1);	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
348	[BUG]  [BUGGY]  if(c  >  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
349	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
350	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
351	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
352	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
353	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
354	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  p);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  p);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  p);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
355	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
356	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
357	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
358	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  ||  c  >=  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  ||  c  >=  'n')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'r'  ||  c  >=  'n')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
359	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
360	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
361	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  >=  'n'  ||  c  >=  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  ||  c  >=  'n'  ||  c  >=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  ||  c  >=  'n'  ||  c  >=  't')  {	  if(c!=    '0'    &&    c    <=    'n'    ||    c    >=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
362	[BUG]  [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
363	[BUG]  [BUGGY]  if(c  >>  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >>  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >>  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
364	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  &&  c  <=  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'r'  &&  c  <=  'n')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'r'  &&  c  <=  'n')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
365	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  '9')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  '9'  &&  c  <=  '9')  {	  if(c!=    '0'    &&    c    <=    'n'    &&    c    <=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
366	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
367	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c!=    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
368	[BUG]  [BUGGY]  case  '0':  sb.append(c, "0 ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  '0':  sb.append(c, "0 ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  '0':  sb.append(c, "0 ");  break;	  case    '0':    sb.append(   "0   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
369	[BUG]  [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
370	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
371	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
372	[BUG]  [BUGGY]  if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
373	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
374	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i++);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i++);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
375	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  3);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  3);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    3);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
376	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
377	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
378	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
379	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  s);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s,  s);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    s);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
380	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    char);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
381	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
382	[BUG]  [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
383	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
384	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  'r')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
385	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c));  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(Character.toLowerCase(c));  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(Character.toLowerCase(c));  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
386	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c));  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  sb.append(Character.toUpperCase(c));  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	sb.append(Character.toUpperCase(c));  break;	  sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
387	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
388	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
389	[BUG]  [BUGGY]  if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
390	[BUG]  [BUGGY]  case  'n':  sb.append( "t ");  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'n':  sb.append( "t ");  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'n':  sb.append( "t ");  break;	  sb.append(c);    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
391	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '.')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '.')  {  sb.append(c);  case  'n':  sb.append( "t ");  break;  }	  sb.append(c);    case    'n':    sb.append(   "t   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
392	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '0'  &&  c  <=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '0'  &&  c  <=  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    &&    c    <=    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
393	[BUG]  [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }	  sb.append('');    break;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
394	[BUG]  [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  '')  {  sb.append('');  break;  }  else  {  case  '':  sb.append(c);  break;  }	  sb.append('');    break;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
395	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {	  if(c    ==    '0'    &&    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
396	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backgroundscape);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backgroundscape);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this.backgroundscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    backslashEscape);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
397	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  1,  c);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(i  +  1,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(i  +  1,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
398	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i    +    1,    c);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
399	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c!=    't')    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
400	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    >=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
401	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  'r')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c!=  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c!=    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
402	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
403	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.getCharset(i);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  s.getCharset(i);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  s.getCharset(i);  break;	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
404	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c  >=  '0'  &&  c  <=  '9')  {  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c  >=  '0'  &&  c  <=  '9')  {	  if(c!=    '0'    &&    c    <=    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
405	[BUG]  [BUGGY]  case  'A':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  case  'A':  sb.append(c);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	case  'A':  sb.append(c);  break;	  case    '0':    sb.append(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
406	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
407	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    break;    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
408	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(0);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(0);	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
409	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder;  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder;	  CharsetEncoder    cc    =    chars.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
410	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  START_OF_EXPR);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  START_OF_EXPR);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
411	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OF_EXPR);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  IOContext.START_OF_EXPR);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
412	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_VERSION);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_VERSION);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  DEFAULT_VERSION);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    END_SCRIPT);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
413	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  2);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i  +  2);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i    +    2);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
414	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  c);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    0);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
415	[BUG]  [BUGGY]  CharsetEncoder  cc  =  charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  charAt(i);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  charAt(i);	  CharsetEncoder    cc    =    c.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
416	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  2));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  2));  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1,  s.charAt(i  +  2));	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
417	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  s);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
418	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  char);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  char);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c,  char);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
419	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.encode(c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.encode(c);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
420	[BUG]  [BUGGY]  CharsetEncoder  cc  =  c.charAt(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  c.charAt(i,  outputCharsetEncoder);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  c.charAt(i,  outputCharsetEncoder);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
421	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i,  c);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  s.charAt(i,  c);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  s.charAt(i,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i,    c);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
422	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  *  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  *  1);  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  *  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
423	[BUG]  [BUGGY]  if(c!=  'n')  {  sb.append( "n ");  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);      [BUGGY]  if(c!=  'n')  {  sb.append( "n ");  break;  }  [BUGGY]      case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1014	1014	1	replace	if(c!=  'n')  {  sb.append( "n ");  break;  }	  sb.append(c);    case    'n':    sb.append(   "n   ");    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
