bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  addJsString(cached,  Context.getCurrentContext());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  Context.getCurrentContext());	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
2	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.valueOf(s));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.valueOf(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.valueOf(s));	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
3	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  addJsString(cached,  s);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.getCurrentContext();  addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.getCurrentContext();  addJsString(cached,  s);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
4	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  addJsString(cached,  s);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.currentContext();  addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.currentContext();  addJsString(cached,  s);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
5	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(context,  cached);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(context,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  addJsString(context,  cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
6	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstanceUTC());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstanceUTC());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstanceUTC());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
7	[BUG]  [BUGGY]  append(ESCAPED_JS_STRINGS.getInstance());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(ESCAPED_JS_STRINGS.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(ESCAPED_JS_STRINGS.getInstance());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
8	[BUG]  [BUGGY]  append(outputCharsetEncoder.getInstance());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(outputCharsetEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(outputCharsetEncoder.getInstance());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
9	[BUG]  [BUGGY]  addJsString(JSCharsetEncoder.getInstance());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(JSCharsetEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(JSCharsetEncoder.getInstance());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
10	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(context));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(context));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(context));	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
11	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(cached,  s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(cached,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(cached,  s));	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
12	[BUG]  [BUGGY]  cached.add(JSStringUtilities.join(s,  cached));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(JSStringUtilities.join(s,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(JSStringUtilities.join(s,  cached));	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
13	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(cached,  cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(cached,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(cached,  cached));	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
14	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(common,  cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(common,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(common,  cached));	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
15	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(s,  cached),  consumer);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(s,  cached),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(s,  cached),  consumer);	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
16	[BUG]  [BUGGY]  JsString  cached  =  jsString(cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  cached  =  jsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  cached  =  jsString(cached);	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  JSCharacterImpl  cc  =  jsString(cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JSCharacterImpl  cc  =  jsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JSCharacterImpl  cc  =  jsString(cached);	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  JSLogger  logger  =  Logger.getLogger( "addJsString ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JSLogger  logger  =  Logger.getLogger( "addJsString ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JSLogger  logger  =  Logger.getLogger( "addJsString ");	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  append(cached,  cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cached,  cached);	  add(cached,    cached);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
20	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
21	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  cached);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  addJsString(cached,  cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  cc.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  cc.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  cc.addJsString(cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  this.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  this.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  this.addJsString(cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
24	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.currentContext();  addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.currentContext();  addJsString(cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
26	[BUG]  [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
27	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
28	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
29	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
30	[BUG]  [BUGGY]  ||  cached!=  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  ||  cached!=  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	||  cached!=  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }	  if(cached!=    null)    {    addJsString(cached);    }    else    {    Context.codeBug();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
31	[BUG]  [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  addJsString(cached);  }  else  {  Context.codeBug();  }	  if(cached!=    null)    {    addJsString(cached);    }    else    {    Context.codeBug();    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
32	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
33	[BUG]  [BUGGY]  cc.add(cached,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
34	[BUG]  [BUGGY]  add(JSString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(JSString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(JSString.valueOf(cached));	  add(cached,    JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
35	[BUG]  [BUGGY]  append(cached,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cached,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cached,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
37	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
38	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
40	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(cached);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
41	[BUG]  [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  context.addJsString(s);  }	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
42	[BUG]  [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  else  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  else  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  context.addJsString(s);  }  else  {  cached  =  jsString(s);  }	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
43	[BUG]  [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  context.addJsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  context.addJsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
44	[BUG]  [BUGGY]  context.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  context.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	context.addJsString(cached);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
45	[BUG]  [BUGGY]  conn.addJsString(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(s);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
46	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
47	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
48	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
49	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
50	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
51	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
52	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
53	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  cc.addJsString(jsString);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(jsString);	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
55	[BUG]  [BUGGY]  _addJsString(jsString);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  _addJsString(jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	_addJsString(jsString);	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
56	[BUG]  [BUGGY]  conn.addJsString(jsString);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(jsString);	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
57	[BUG]  [BUGGY]  cc.addJsString(JSString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(JSString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(JSString.valueOf(cached));	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
58	[BUG]  [BUGGY]  jsString.setCached(cached);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString.setCached(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString.setCached(cached);	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
59	[BUG]  [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
60	[BUG]  [BUGGY]  cached  =  jsString(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached  =  jsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached  =  jsString(s);	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
61	[BUG]  [BUGGY]  Context.checkState(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
62	[BUG]  [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
63	[BUG]  [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
64	[BUG]  [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
65	[BUG]  [BUGGY]  Context.checkState(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
66	[BUG]  [BUGGY]  append(JSCharacterEncoder.getJsString(cached));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharacterEncoder.getJsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharacterEncoder.getJsString(cached));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
67	[BUG]  [BUGGY]  cc.addJsString(JSCharacterEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(JSCharacterEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(JSCharacterEncoder.getJsString(s));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
68	[BUG]  [BUGGY]  addJsString(JSCharacterEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(JSCharacterEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(JSCharacterEncoder.getJsString(s));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
69	[BUG]  [BUGGY]  appendJsString(JSCharacterEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendJsString(JSCharacterEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendJsString(JSCharacterEncoder.getJsString(s));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
70	[BUG]  [BUGGY]  append(JSCharacterEncoder.getJsString(cached,  s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharacterEncoder.getJsString(cached,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharacterEncoder.getJsString(cached,  s));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
71	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  cached));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
72	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(s));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
73	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  ESCAPED_JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  ESCAPED_JS_STRINGS));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  ESCAPED_JS_STRINGS));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
74	[BUG]  [BUGGY]  addJsString(cached,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  s);	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  cc.addJsString(s,  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(s,  cached);	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
76	[BUG]  [BUGGY]  cc.addJsString(cached,  s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cached,  s);	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
77	[BUG]  [BUGGY]  conn.addJsString(s,  cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(s,  cached);	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
78	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(s,  cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(s,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(s,  cached));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
79	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  JS_STRINGS));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  JS_STRINGS));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
80	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  JsString.class));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  JsString.class));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  JsString.class));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
81	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cased,  s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cased,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cased,  s));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
82	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  s,  cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  s,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  s,  cached));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
83	[BUG]  [BUGGY]  cached.put(s,  cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.put(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.put(s,  cached);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
84	[BUG]  [BUGGY]  cached.put(s,  cc);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.put(s,  cc);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.put(s,  cc);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
85	[BUG]  [BUGGY]  cached  =  cc.put(s,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached  =  cc.put(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached  =  cc.put(s,  cached);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  cc.put(cached,  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.put(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.put(cached,  cached);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
87	[BUG]  [BUGGY]  cc.put(s,  cached  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.put(s,  cached  +  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.put(s,  cached  +  1);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
88	[BUG]  [BUGGY]  cc.put(ached,  cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.put(ached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.put(ached,  cached);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
89	[BUG]  [BUGGY]  if(cached  ==  null)  {  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
90	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
91	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  cached  =  ESCAPED_JS_STRINGS.get(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached  =  ESCAPED_JS_STRINGS.get(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached  =  ESCAPED_JS_STRINGS.get(s);	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  because(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  because(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	because(cached!=  null)  {  cached  =  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
94	[BUG]  [BUGGY]  cc.add(s,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(s,  cached);	  cc.add(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
95	[BUG]  [BUGGY]  cc.add(consume,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(consume,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(consume,  cached);	  cc.add(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
96	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(cached,  rhsContext);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(cached,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.getCurrentContext();  addJsString(cached,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
97	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  context.getCurrentContext();  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
98	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  cached.addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  cached.addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.getCurrentContext();  cached.addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
99	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  JsString.valueOf(cached));	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
100	[BUG]  [BUGGY]  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
101	[BUG]  [BUGGY]  cc.add(common,  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(common,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(common,  cached);	  cc.add(cached,    cached);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
102	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
103	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
104	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
105	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
106	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
107	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
108	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    System.arraycopy(ESCAPED_JS_STRINGS,    0,    cached,    0,    cached.length);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
109	[BUG]  [BUGGY]  conn.addChildToFront(cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addChildToFront(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addChildToFront(cached);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  conn.setCached(cached);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.setCached(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.setCached(cached);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  conn.addJsString(jsString,  cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(jsString,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(jsString,  cached);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
112	[BUG]  [BUGGY]  Context  cc  =  consumer.createContext(cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  consumer.createContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  consumer.createContext(cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
113	[BUG]  [BUGGY]  Context  cc  =  context.createContext(context,  cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(context,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(context,  cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
114	[BUG]  [BUGGY]  Context  cc  =  this.context.createContext(cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  this.context.createContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  this.context.createContext(cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
115	[BUG]  [BUGGY]  Context  cc  =  Consumer.createContext(cached);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Consumer.createContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Consumer.createContext(cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
116	[BUG]  [BUGGY]  Context  cc  =  context.createContext(cached,  cached);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(cached,  cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
117	[BUG]  [BUGGY]  cc.addJSString(cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJSString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJSString(cached);	  cc.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
118	[BUG]  [BUGGY]  cc.addChildToFront(cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addChildToFront(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addChildToFront(cached);	  cc.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
119	[BUG]  [BUGGY]  cm.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cm.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cm.addJsString(cached);	  cc.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
120	[BUG]  [BUGGY]  addJsString(cached,  jsString(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  jsString(s));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
121	[BUG]  [BUGGY]  append(s,  jsString(cached));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(s,  jsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(s,  jsString(cached));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
122	[BUG]  [BUGGY]  append(s,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(s,  cached);	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
123	[BUG]  [BUGGY]  append(jsString(cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(jsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(jsString(cached));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
124	[BUG]  [BUGGY]  append(JSCharacter.toJsString(cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharacter.toJsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharacter.toJsString(cached));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
125	[BUG]  [BUGGY]  cc.addValue(cached);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addValue(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addValue(cached);	  cc.add(s);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
126	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }	  add(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
127	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }	  add(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
128	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  1,  ESCAPED_JS_STRINGS.size());  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  1,  ESCAPED_JS_STRINGS.size());  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  1,  ESCAPED_JS_STRINGS.size());  }	  add(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
129	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  ESCAPED_JS_STRINGS.size());  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  ESCAPED_JS_STRINGS.size());  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  ESCAPED_JS_STRINGS.size());  }	  add(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
130	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
131	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  createCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  createCurrentContext();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
132	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContext(context);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
133	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInput();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContextInput();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContextInput();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
134	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContext(s);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
136	[BUG]  [BUGGY]  cached[i]  =  jsString(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached[i]  =  jsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached[i]  =  jsString(s);	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
137	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
138	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
139	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
140	[BUG]  [BUGGY]  cc.add(cached,  context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  context);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
141	[BUG]  [BUGGY]  cc.add(context,  cached,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(context,  cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(context,  cached,  s);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
142	[BUG]  [BUGGY]  cc.add(context,  cached,  consumer);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(context,  cached,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(context,  cached,  consumer);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
143	[BUG]  [BUGGY]  cc.addJsString(cached,  context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cached,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cached,  context);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
144	[BUG]  [BUGGY]  append(jsString,  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(jsString,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(jsString,  s);	  append(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
145	[BUG]  [BUGGY]  append(jsString,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(jsString,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(jsString,  cached);	  append(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
146	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
147	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(cached);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(cached);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
148	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(lhsContext);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
149	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(s);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(s);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
150	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  context);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
151	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null,  context);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(null,  context);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
152	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.reportCodeChange();	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
153	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  IN_FOR_INIT_CLAUSE));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(lhsContext,  cached,  IN_FOR_INIT_CLAUSE));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
154	[BUG]  [BUGGY]  Context.setCached(cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.setCached(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.setCached(cached);	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
155	[BUG]  [BUGGY]  Context.report(JSError.make(s,  ESCAPED_JS_STRINGS,  cached));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(s,  ESCAPED_JS_STRINGS,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(s,  ESCAPED_JS_STRINGS,  cached));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
156	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  ESCAPED_JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  ESCAPED_JS_STRINGS));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(lhsContext,  cached,  ESCAPED_JS_STRINGS));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
157	[BUG]  [BUGGY]  Context.report(JSError.make(s,  ESCAPED_JS_STRINGS));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(s,  ESCAPED_JS_STRINGS));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(s,  ESCAPED_JS_STRINGS));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
158	[BUG]  [BUGGY]  Context  cc  =  consumer.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  consumer.getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  consumer.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
159	[BUG]  [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  this.context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
160	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.getCurrentContext(true);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
161	[BUG]  [BUGGY]  Context  cc  =  context.createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
162	[BUG]  [BUGGY]  for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  cached.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
163	[BUG]  [BUGGY]  for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
164	[BUG]  [BUGGY]  Context.checkState(cached!=  null);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached!=  null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached!=  null);	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
165	[BUG]  [BUGGY]  Context  context  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  context  =  Context.createContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  context  =  Context.createContext(context);	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
166	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.createContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.createContext(context);	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
167	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(context,  cached);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.createContext(context,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.createContext(context,  cached);	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
168	[BUG]  [BUGGY]  Context  cc  =  consumer.createContext(s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  consumer.createContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  consumer.createContext(s);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
169	[BUG]  [BUGGY]  Context  cc  =  context.createContext(s,  cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(s,  cached);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
170	[BUG]  [BUGGY]  Context  cc  =  Consumer.createContext(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Consumer.createContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Consumer.createContext(s);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
171	[BUG]  [BUGGY]  Context  cc  =  context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(context);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
172	[BUG]  [BUGGY]  append(JSCharsetEncoder.getJsString(cached));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getJsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getJsString(cached));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
173	[BUG]  [BUGGY]  cc.addJsString(JSCharsetEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(JSCharsetEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(JSCharsetEncoder.getJsString(s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
174	[BUG]  [BUGGY]  addJsString(JSCharsetEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(JSCharsetEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(JSCharsetEncoder.getJsString(s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
175	[BUG]  [BUGGY]  append(ESCAPED_JS_STRINGS.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(ESCAPED_JS_STRINGS.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(ESCAPED_JS_STRINGS.getJsString(s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
176	[BUG]  [BUGGY]  append(JSCharsetEncoder.getJsString(cached,  s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getJsString(cached,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getJsString(cached,  s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
177	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
178	[BUG]  [BUGGY]  cc.addJsString(jsString,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(jsString,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(jsString,  cached);	  cc.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
179	[BUG]  [BUGGY]  cc.addJsString(cached,  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cached,  cached);	  cc.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
180	[BUG]  [BUGGY]  cached.addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.addJsString(cached);	  cc.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
181	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(cached,  cached));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(cached,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(cached,  cached));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
182	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(cached,  s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(cached,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(cached,  s));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
183	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(jsString));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(jsString));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(jsString));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
184	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(s));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
185	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
186	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
187	[BUG]  [BUGGY]  cc.add(cached,  JsString.valueOf(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  JsString.valueOf(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  JsString.valueOf(s));	  add(cached,    JsString.valueOf(s));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
188	[BUG]  [BUGGY]  addJsString(cached,  JsString.valueOf(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  JsString.valueOf(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  JsString.valueOf(s));	  add(cached,    JsString.valueOf(s));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
189	[BUG]  [BUGGY]  cc.add(JSString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSString.valueOf(cached));	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
190	[BUG]  [BUGGY]  cc.add(JASString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JASString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JASString.valueOf(cached));	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
191	[BUG]  [BUGGY]  cc.add(JSString.valueOf(cached),  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSString.valueOf(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSString.valueOf(cached),  s);	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
192	[BUG]  [BUGGY]  cc.add(JsString.valueOf(cached),  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JsString.valueOf(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JsString.valueOf(cached),  s);	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
193	[BUG]  [BUGGY]  jsString(JS_STRINGS,  cached);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(JS_STRINGS,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(JS_STRINGS,  cached);	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
194	[BUG]  [BUGGY]  addJsString(JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(JS_STRINGS);	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
195	[BUG]  [BUGGY]  jsString(JS_STRINGS.get(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(JS_STRINGS.get(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(JS_STRINGS.get(s));	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
196	[BUG]  [BUGGY]  jsString(JS_STRINGS.get(cached));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(JS_STRINGS.get(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(JS_STRINGS.get(cached));	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
197	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
198	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.currentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.currentContext();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
200	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext(null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext(null);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
201	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0);	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
202	[BUG]  [BUGGY]  cached[0]  =  jsString(s);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached[0]  =  jsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached[0]  =  jsString(s);	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
203	[BUG]  [BUGGY]  Context.checkState(cached.length()!=  0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()!=  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()!=  0);	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
204	[BUG]  [BUGGY]  cc.add(cachedd,  consumer);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cachedd,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cachedd,  consumer);	  cc.add(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
205	[BUG]  [BUGGY]  cc.add(cachedd,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cachedd,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cachedd,  s);	  cc.add(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
206	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(s);  }  else  {  addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(s);  }  else  {  addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(s);  }  else  {  addJsString(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
207	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(cached);  }  else  {  addJsString(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
208	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  else  {  addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  else  {  addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s);  }  else  {  addJsString(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
209	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(s);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(s);  }	  jsString(s);    	non-compiled	[CE]  orphaned  case	4	None	replace
210	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  jsString(s);    	non-compiled	[CE]  orphaned  case	4	None	replace
211	[BUG]  [BUGGY]  if(cached  ==  null)  {  jsString(s);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  jsString(s);  }	  jsString(s);    	non-compiled	[CE]  orphaned  case	4	None	replace
212	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  jsString(s);  }	  jsString(s);    	non-compiled	[CE]  orphaned  case	4	None	replace
213	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext);  addJsString(rhsContext,  cached);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(lhsContext);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  orphaned  case	82	None	replace
214	[BUG]  [BUGGY]  addJsString(cached,  Context.createChildObjectContext(cached));  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  Context.createChildObjectContext(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  Context.createChildObjectContext(cached));	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  orphaned  case	82	None	replace
215	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(s);  addJsString(rhsContext,  cached);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(s);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(s);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  orphaned  case	82	None	replace
216	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  cached);  addJsString(rhsContext,  cached);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  cached);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(lhsContext,  cached);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  orphaned  case	82	None	replace
217	[BUG]  [BUGGY]  add(CASED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(CASED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(CASED_JS_STRINGS);	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
218	[BUG]  [BUGGY]  if(cached  ==  null)  {  add(CASED_JS_STRINGS);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  add(CASED_JS_STRINGS);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  add(CASED_JS_STRINGS);  }	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
219	[BUG]  [BUGGY]  add(cascaded,  CACHED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cascaded,  CACHED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cascaded,  CACHED_JS_STRINGS);	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
220	[BUG]  [BUGGY]  add(cascaded);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cascaded);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cascaded);	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
221	[BUG]  [BUGGY]  cc.addJsString(cachedd,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cachedd,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cachedd,  s);	  cc.addJsString(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
222	[BUG]  [BUGGY]  cc.addJsString(cachedd,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cachedd,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cachedd,  cached);	  cc.addJsString(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
223	[BUG]  [BUGGY]  Context  cc  =  consumer.createContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  consumer.createContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  consumer.createContext();	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
224	[BUG]  [BUGGY]  Context  cc  =  STATEMENT.createContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  STATEMENT.createContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  STATEMENT.createContext();	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
225	[BUG]  [BUGGY]  Context  cc  =  context.createContext(false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(false);	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
226	[BUG]  [BUGGY]  Context  cc  =  context.createContext(true);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(true);	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
227	[BUG]  [BUGGY]  if(cached!=  null  &&  cached.length()  ==  0)  {  add(cached);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null  &&  cached.length()  ==  0)  {  add(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null  &&  cached.length()  ==  0)  {  add(cached);  }	  if(cached!=    null    ||    cached.length()    ==    0)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
228	[BUG]  [BUGGY]  if(cached  ==  null  ||  cached.length()  ==  0)  {  add(cached);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null  ||  cached.length()  ==  0)  {  add(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null  ||  cached.length()  ==  0)  {  add(cached);  }	  if(cached!=    null    ||    cached.length()    ==    0)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
229	[BUG]  [BUGGY]  if(cached!=  null  ||  cached.length()  ==  0)  {  add(s);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null  ||  cached.length()  ==  0)  {  add(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null  ||  cached.length()  ==  0)  {  add(s);  }	  if(cached!=    null    ||    cached.length()    ==    0)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
231	[BUG]  [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
232	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
234	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString);  }  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
235	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.createContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.createContext(s);	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
236	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  s);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  cached,  s);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
237	[BUG]  [BUGGY]  append(cached.getInstance(),  JSCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cached.getInstance(),  JSCharsetEncoder);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cached.getInstance(),  JSCharsetEncoder);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
238	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  cc);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  cc);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  cached,  cc);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
239	[BUG]  [BUGGY]  append(ESCAPED_JS_STRINGS.getInstance(),  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(ESCAPED_JS_STRINGS.getInstance(),  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(ESCAPED_JS_STRINGS.getInstance(),  cached);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
240	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  consumer);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  cached,  consumer);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
241	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.VALUE_STRING);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.VALUE_STRING);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached),  JsString.VALUE_STRING);	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
242	[BUG]  [BUGGY]  cc.add(cached,  JsString.valueOf(cached),  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  JsString.valueOf(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  JsString.valueOf(cached),  s);	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
243	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached),  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
244	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.VALUE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.VALUE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached),  JsString.VALUE);	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
245	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.TYPE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.TYPE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached),  JsString.TYPE);	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
246	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
247	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
248	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
249	[BUG]  [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
250	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
251	[BUG]  [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	because(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  cached);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
252	[BUG]  [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  because(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	because(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
253	[BUG]  [BUGGY]  Context  cc  =  getCachedContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCachedContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCachedContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
254	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
255	[BUG]  [BUGGY]  Context  cc  =  getCallbackContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCallbackContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCallbackContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
256	[BUG]  [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContext().getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContext().getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
257	[BUG]  [BUGGY]  Context  cc  =  getCallback();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCallback();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCallback();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
258	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
259	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
260	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0);  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0);  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0);  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
261	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
262	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
263	[BUG]  [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.checkState(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
264	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
265	[BUG]  [BUGGY]  add(JS_STRINGS,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(JS_STRINGS,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(JS_STRINGS,  cached);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
266	[BUG]  [BUGGY]  add(s,  JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JS_STRINGS);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
267	[BUG]  [BUGGY]  cc.add(cached,  JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  JS_STRINGS);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
268	[BUG]  [BUGGY]  add(cached,  JSError.make(JS_STRING_ELSE,  s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JSError.make(JS_STRING_ELSE,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JSError.make(JS_STRING_ELSE,  s));	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
269	[BUG]  [BUGGY]  add(cached,  JsString.valueOf(cached),  JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JsString.valueOf(cached),  JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JsString.valueOf(cached),  JS_STRINGS);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
270	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cached);  addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cached);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  cached);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(context);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
271	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  cached.addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  cached.addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context);  cached.addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(context);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
272	[BUG]  [BUGGY]  addJsString(cached,  Context.createChildObjectContext(context));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  Context.createChildObjectContext(context));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  Context.createChildObjectContext(context));	  Context    rhsContext    =    Context.createChildObjectContext(context);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
273	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
274	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length();  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length();  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length();  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
276	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
278	[BUG]  [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  addJsString(cached);  }	  if(cached!=    null)    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
279	[BUG]  [BUGGY]  append(cachedd,  s);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cachedd,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cachedd,  s);	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
280	[BUG]  [BUGGY]  addJsString(cachedd);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cachedd);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cachedd);	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
281	[BUG]  [BUGGY]  append(cachedd,  cc);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cachedd,  cc);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cachedd,  cc);	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  append(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(s);	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
283	[BUG]  [BUGGY]  cc.add(cached,  jsString);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cached,  jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cached,  jsString);	  cc.add(jsString);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
284	[BUG]  [BUGGY]  cc.add(jsString,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(jsString,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(jsString,  cached);	  cc.add(jsString);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
285	[BUG]  [BUGGY]  Context  cc  =  Context.current();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.current();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.current();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
286	[BUG]  [BUGGY]  if(cached!=  null)  {  addJSString(cached);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJSString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJSString(cached);  }	  if(cached!=    null)    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
287	[BUG]  [BUGGY]  appendJsString(cached);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendJsString(cached);	  if(cached!=    null)    {    addJsString(cached);    }    	non-compiled	[CE]  	42	None	replace
288	[BUG]  [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.FIELD_NAME);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(s,  JsString.valueOf(cached),  JsString.FIELD_NAME);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(s,  JsString.valueOf(cached),  JsString.FIELD_NAME);	  add(cached,    JsString.valueOf(cached),    s);    	non-compiled	[CE]  	67	None	replace
289	[BUG]  [BUGGY]  if(cached!=  null)  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  System.arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    System.arraycopy(ESCAPED_JS_STRINGS,    0,    cached,    0,    cached.length);    }    	non-compiled	[CE]  	6	None	replace
290	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(JS_STRINGS,  0,  cached,  0,  cached.length);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(JS_STRINGS,  0,  cached,  0,  cached.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(JS_STRINGS,  0,  cached,  0,  cached.length);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    System.arraycopy(ESCAPED_JS_STRINGS,    0,    cached,    0,    cached.length);    }    	non-compiled	[CE]  	6	None	replace
291	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_STRINGS,  0,  cached,  0,  cached.length);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_STRINGS,  0,  cached,  0,  cached.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(cached);  }  else  {  System.arraycopy(ESCAPED_STRINGS,  0,  cached,  0,  cached.length);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    System.arraycopy(ESCAPED_JS_STRINGS,    0,    cached,    0,    cached.length);    }    	non-compiled	[CE]  	6	None	replace
292	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  JS_STRINGS.get(s);  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  jsString(s);  }  else  {  cached  =  JS_STRINGS.get(s);  }	  jsString(s);    	non-compiled	[CE]  	4	None	replace
293	[BUG]  [BUGGY]  append(outputCharsetEncoder.getJsString(s));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(outputCharsetEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(outputCharsetEncoder.getJsString(s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  	35	None	replace
294	[BUG]  [BUGGY]  cached.add(cached);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(cached);	  cc.addJsString(cached);    	non-compiled	[CE]  	1	None	replace
295	[BUG]  [BUGGY]  cc.addJsString(JS_STRINGS);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(JS_STRINGS);	  cc.addJsString(cached);    	non-compiled	[CE]  	1	None	replace
296	[BUG]  [BUGGY]  cc.addCached(cached);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addCached(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addCached(cached);	  cc.addJsString(cached);    	non-compiled	[CE]  	1	None	replace
297	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
298	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
299	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
300	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    is    not    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
301	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(consume,  s);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(consume,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  addJsString(consume,  s);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
302	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  outputCharsetEncoder));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  outputCharsetEncoder));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
303	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  jsString));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  jsString));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  jsString));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
304	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  new  String(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  new  String(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  new  String(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
305	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtilities.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtilities.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  JsStringUtilities.jsString(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
306	[BUG]  [BUGGY]  if(cached!=  null  ||  cached.length()  ==  0)  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null  ||  cached.length()  ==  0)  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null  ||  cached.length()  ==  0)  {  addJsString(cached);  }	  if(cached!=    null    ||    cached.length()    ==    0)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
307	[BUG]  [BUGGY]  cached.add(context);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(context);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
308	[BUG]  [BUGGY]  cached.add(jsString);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(jsString);	  cc.add(jsString);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
309	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  outputCharsetEncoder);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  cached,  outputCharsetEncoder);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
310	[BUG]  [BUGGY]  append(outputCharsetEncoder.getInstance(),  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(outputCharsetEncoder.getInstance(),  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(outputCharsetEncoder.getInstance(),  cached);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
311	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  this);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  cached,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  cached,  this);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
312	[BUG]  [BUGGY]  cached.add(JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(JsString.valueOf(cached));	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
313	[BUG]  [BUGGY]  cm.add(JSString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cm.add(JSString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cm.add(JSString.valueOf(cached));	  cc.add(JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
314	[BUG]  [BUGGY]  JsString  jsString  =  jsString(cached);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  jsString  =  jsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  jsString  =  jsString(cached);	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
315	[BUG]  [BUGGY]  JsString  jsString  =  cached.substring(0,  cached.length()  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  jsString  =  cached.substring(0,  cached.length()  -  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  jsString  =  cached.substring(0,  cached.length()  -  1);	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
316	[BUG]  [BUGGY]  JsString  jsString  =(JsString)cached.clone();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  jsString  =(JsString)cached.clone();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  jsString  =(JsString)cached.clone();	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
317	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cached,  JsString.valueOf(cached)));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cached,  JsString.valueOf(cached)));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cached,  JsString.valueOf(cached)));	  append(JSCharsetEncoder.encode(cached,    s));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
318	[BUG]  [BUGGY]  Add(CASED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Add(CASED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Add(CASED_JS_STRINGS);	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
319	[BUG]  [BUGGY]  if(cached!=  null)  {  add(CASEED_JS_STRINGS);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(CASEED_JS_STRINGS);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(CASEED_JS_STRINGS);  }	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
320	[BUG]  [BUGGY]  if(cached!=  null)  {  add(ACCEPTED_JS_STRINGS);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(ACCEPTED_JS_STRINGS);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(ACCEPTED_JS_STRINGS);  }	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
321	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cachedd));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cachedd));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cachedd));	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
322	[BUG]  [BUGGY]  cc.add(JsString.valueOf(cachedd));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JsString.valueOf(cachedd));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JsString.valueOf(cachedd));	  cc.add(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
323	[BUG]  [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  addJsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  addJsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(cached!=    null)    {    addJsString(cached);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
324	[BUG]  [BUGGY]  conn.addJsString(JSString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(JSString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(JSString.valueOf(cached));	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
325	[BUG]  [BUGGY]  conn.addJsString(JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(JS_STRINGS);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
326	[BUG]  [BUGGY]  Context  cc  =  context.createContext(null,  s);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(null,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(null,  s);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
327	[BUG]  [BUGGY]  append(JsString.valueOf(cached),  s);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JsString.valueOf(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JsString.valueOf(cached),  s);	  append(cached,    s);    	non-compiled	[CE]  	68	None	replace
328	[BUG]  [BUGGY]  append(JSStringUtilities.jsString(cached),  s);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSStringUtilities.jsString(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSStringUtilities.jsString(cached),  s);	  append(cached,    s);    	non-compiled	[CE]  	68	None	replace
329	[BUG]  [BUGGY]  append(JsString.valueOf(cached));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JsString.valueOf(cached));	  append(cached,    s);    	non-compiled	[CE]  	68	None	replace
330	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  addJsString(cached);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.getCurrentContext();  addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.getCurrentContext();  addJsString(cached);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached);    	non-compiled	[CE]  	50	None	replace
331	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(consume);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(consume);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(consume);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  	81	None	replace
332	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(null);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  	81	None	replace
333	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString,  s);  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  	52	None	replace
334	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
335	[BUG]  [BUGGY]  context.addJsString(jsString);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  context.addJsString(jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	context.addJsString(jsString);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
336	[BUG]  [BUGGY]  context.addCachedString(cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  context.addCachedString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	context.addCachedString(cached);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
337	[BUG]  [BUGGY]  context.addChangeListener(this);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  context.addChangeListener(this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	context.addChangeListener(this);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
338	[BUG]  [BUGGY]  context.addCached(cached);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  context.addCached(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	context.addCached(cached);	  context.addJsString(s);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
339	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJAsString(jsString);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJAsString(jsString);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJAsString(jsString);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
340	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString);  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addString(jsString);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString);    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
341	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(s,  cached),  ESCAPED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(s,  cached),  ESCAPED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(s,  cached),  ESCAPED_JS_STRINGS);	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
342	[BUG]  [BUGGY]  cached  =  JSStringUtilities.join(s,  cached);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached  =  JSStringUtilities.join(s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached  =  JSStringUtilities.join(s,  cached);	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
343	[BUG]  [BUGGY]  cc.add(JSStringUtilities.join(CAched,  s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JSStringUtilities.join(CAched,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JSStringUtilities.join(CAched,  s));	  cc.add(JSStringUtilities.join(s,    cached));    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
344	[BUG]  [BUGGY]  append(jsString,  cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(jsString,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(jsString,  cached));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
345	[BUG]  [BUGGY]  append(JsString.valueOf(cached),  jsString(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JsString.valueOf(cached),  jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JsString.valueOf(cached),  jsString(s));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
346	[BUG]  [BUGGY]  append(JSCharacter.JSC_INT,  jsString(s));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharacter.JSC_INT,  jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharacter.JSC_INT,  jsString(s));	  append(cached,    jsString(s));    	non-compiled	[CE]  	72	None	replace
347	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(consume);  addJsString(rhsContext,  cached);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(consume);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(consume);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  	82	None	replace
348	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null);  addJsString(rhsContext,  cached);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(null);  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(null);  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  	82	None	replace
349	[BUG]  [BUGGY]  addJsString(cached,  Context.createChildObjectContext(cached);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  Context.createChildObjectContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  Context.createChildObjectContext(cached);	  Context    rhsContext    =    Context.createChildObjectContext(cached);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  	82	None	replace
350	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj,  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj,  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj,  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    attracted    =    add(cached))    {    	non-compiled	[CE]  	77	None	replace
351	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	10	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	10	None	replace
353	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	10	None	replace
354	[BUG]  [BUGGY]  jsString  =  JS_STRINGS.get(cached);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString  =  JS_STRINGS.get(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString  =  JS_STRINGS.get(cached);	  addJsString(jsString);    	non-compiled	[CE]  	3	None	replace
355	[BUG]  [BUGGY]  addJsString(jsString,  cached);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(jsString,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(jsString,  cached);	  addJsString(jsString);    	non-compiled	[CE]  	3	None	replace
356	[BUG]  [BUGGY]  jsString  =  JS_STRINGS.indexOf(cached);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString  =  JS_STRINGS.indexOf(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString  =  JS_STRINGS.indexOf(cached);	  addJsString(jsString);    	non-compiled	[CE]  	3	None	replace
357	[BUG]  [BUGGY]  addJsString(jsString,  s);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(jsString,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(jsString,  s);	  addJsString(jsString);    	non-compiled	[CE]  	3	None	replace
358	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentStatement();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContext().getCurrentStatement();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  	64	None	replace
359	[BUG]  [BUGGY]  cached.addJsString(s);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.addJsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.addJsString(s);	  cc.addJsString(s);    	non-compiled	[CE]  	27	None	replace
360	[BUG]  [BUGGY]  cc.addCompletedJsString(cached);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addCompletedJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addCompletedJsString(cached);	  cc.addJsString(s);    	non-compiled	[CE]  	27	None	replace
361	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  	32	None	replace
362	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeGenerator();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContextForCodeGenerator();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContextForCodeGenerator();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
363	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Context.codeBug();  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Context.codeBug();  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  Context.codeBug();  }	  add(s,    cached);    	non-compiled	[CE]  	19	None	replace
364	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkNotNull(cached);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkNotNull(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkNotNull(cached);  }	  add(s,    cached);    	non-compiled	[CE]  	19	None	replace
365	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  context.addJsString(s);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  context.addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  context.addJsString(s);  }	  add(s,    cached);    	non-compiled	[CE]  	19	None	replace
366	[BUG]  [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkState(cached.length  ==  0);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkState(cached.length  ==  0);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(s,  cached);  }  else  {  Preconditions.checkState(cached.length  ==  0);  }	  add(s,    cached);    	non-compiled	[CE]  	19	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
368	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
369	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
370	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
371	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
372	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  i++)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
373	[BUG]  [BUGGY]  Context.report(JSError.make(s,  cached,  IN_FOR_INIT_CLAUSE));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(s,  cached,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(s,  cached,  IN_FOR_INIT_CLAUSE));	  Context.codeBug();    	non-compiled	[CE]  	29	None	replace
374	[BUG]  [BUGGY]  Context.report(JSError.make(s,  IN_FOR_INIT_CLAUSE));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(s,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(s,  IN_FOR_INIT_CLAUSE));	  Context.codeBug();    	non-compiled	[CE]  	29	None	replace
375	[BUG]  [BUGGY]  Context.report(JSError.make(Locale.ENGLISH,  s));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(Locale.ENGLISH,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(Locale.ENGLISH,  s));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
376	[BUG]  [BUGGY]  Context.report(JSError.make(Locale.ENGLISH,  cached));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(Locale.ENGLISH,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(Locale.ENGLISH,  cached));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
377	[BUG]  [BUGGY]  Context  cc  =  context.createContext(null);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(null);	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
378	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.getCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.getCurrentContext(context);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
379	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(false);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.getCurrentContext(false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.getCurrentContext(false);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
380	[BUG]  [BUGGY]  JsString  cached  =  ESCAPED_JS_STRINGS.get(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  cached  =  ESCAPED_JS_STRINGS.get(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  cached  =  ESCAPED_JS_STRINGS.get(s);	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
381	[BUG]  [BUGGY]  JsString  jsString  =  ESCAPED_JS_STRINGS.get(s);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  jsString  =  ESCAPED_JS_STRINGS.get(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  jsString  =  ESCAPED_JS_STRINGS.get(s);	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
382	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
383	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s,  cached);  }	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
384	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  Context.codeBug();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  Context.codeBug();  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  Context.codeBug();  }	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
385	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s,  cached);  }  else  {  throw  new  IllegalStateException( " ");  }	  addJsString(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
386	[BUG]  [BUGGY]  cc.put(JS_STRINGS,  cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.put(JS_STRINGS,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.put(JS_STRINGS,  cached);	  cc.put(s,    cached);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
387	[BUG]  [BUGGY]  cc.add(jsString,  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(jsString,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(jsString,  s);	  cc.add(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
388	[BUG]  [BUGGY]  cached.add(s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cached.add(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cached.add(s);	  cc.add(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
389	[BUG]  [BUGGY]  add(jsString,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(jsString,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(jsString,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(s));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
390	[BUG]  [BUGGY]  add(JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(JsString.valueOf(cached));	  add(cached,    JsString.valueOf(s));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
391	[BUG]  [BUGGY]  if(cached  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
392	[BUG]  [BUGGY]  if(cached!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
393	[BUG]  [BUGGY]  if(cached!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
394	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(s);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
395	[BUG]  [BUGGY]  if(cached  ==  null)  {  add(s);  }  else  {  context.addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  add(s);  }  else  {  context.addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  add(s);  }  else  {  context.addJsString(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
396	[BUG]  [BUGGY]  if(cached  ==  null)  {  add(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached  ==  null)  {  add(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached  ==  null)  {  add(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
397	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addjsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addjsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addjsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
398	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  jsString.size();  ++i)  {  addJsString(jsString[i]);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  jsString.size();  ++i)  {  addJsString(jsString[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  jsString.size();  ++i)  {  addJsString(jsString[i]);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
399	[BUG]  [BUGGY]  add(JS_STRINGS,  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(JS_STRINGS,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(JS_STRINGS,  s);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
400	[BUG]  [BUGGY]  addJsString(cached,  JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  JS_STRINGS);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
401	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  JS_STRINGS.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  JS_STRINGS.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
402	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.get(s))  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
403	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.keySet())  {  cached  =  JsString.valueOf(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
404	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  addJsString(rhsContext,  cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  getCurrentContext();  addJsString(rhsContext,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  getCurrentContext();  addJsString(rhsContext,  cached);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
405	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  CACHED);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  CACHED);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.getCurrentContext();  addJsString(rhsContext,  CACHED);	  Context    rhsContext    =    Context.getCurrentContext();    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
406	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  cached.keySet())  {  cached  =  JsString.valueOf(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
407	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.values())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.values())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  cached.values())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
408	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  cmd.keySet())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  cmd.keySet())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  cmd.keySet())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
409	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
410	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
411	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
412	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
413	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(cached);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(cached);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
414	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
415	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
416	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  s.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  s.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  s.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
417	[BUG]  [BUGGY]  cc.add(JsString.valueOf(cached),  cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(JsString.valueOf(cached),  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(JsString.valueOf(cached),  cached);	  cc.add(cached,    cached);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
418	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
419	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(cached),  s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(cached),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(cached),  s);	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
420	[BUG]  [BUGGY]  addJsString(JSCharsetEncoder.generateJsString(cached));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(JSCharsetEncoder.generateJsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(JSCharsetEncoder.generateJsString(cached));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
421	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(),  s);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(),  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(),  s);	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
422	[BUG]  [BUGGY]  JsString  jsString(cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsString  jsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsString  jsString(cached);	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
423	[BUG]  [BUGGY]  Context  cc  =  context.createContext(null,  cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(null,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(null,  cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
424	[BUG]  [BUGGY]  Context  cc  =  STATEMENT.createContext(cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  STATEMENT.createContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  STATEMENT.createContext(cached);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
425	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
426	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsString.valueOf(cached);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
427	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringEncoder.getInstance(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringEncoder.getInstance(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringEncoder.getInstance(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
428	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtils.jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtils.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  cached[i]  =  JsStringUtils.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    cached.length;    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
429	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.toArray(new  String[cached.size()  ]))  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  cached.toArray(new  String[cached.size()  ]))  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  cached.toArray(new  String[cached.size()  ]))  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    cached.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
430	[BUG]  [BUGGY]  arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	arraycopy(ESCAPED_JS_STRINGS,  0,  cached,  0,  cached.length);	  if(cached!=    null)    {    jsString(cached);    }    else    {    System.arraycopy(ESCAPED_JS_STRINGS,    0,    cached,    0,    cached.length);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
431	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  addJsString(cached);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
432	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString();  }  else  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString();  }  else  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString();  }  else  {  addJsString(cached);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
433	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(cached);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(cached);  }  else  {  addJSString(cached);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    addJsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
434	[BUG]  [BUGGY]  jsString(JAVA_STRING_ELSE);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(JAVA_STRING_ELSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(JAVA_STRING_ELSE);	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
435	[BUG]  [BUGGY]  jsString(cached,  JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(cached,  JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(cached,  JS_STRINGS);	  jsString(JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
436	[BUG]  [BUGGY]  cc.add(cachedd,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cachedd,  Context.START_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cachedd,  Context.START_OF_EXPR);	  cc.add(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
437	[BUG]  [BUGGY]  cc.add(cachedd,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(cachedd,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(cachedd,  JsString.valueOf(cached));	  cc.add(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
438	[BUG]  [BUGGY]  append(cachedd,  jsString(s));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cachedd,  jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cachedd,  jsString(s));	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
439	[BUG]  [BUGGY]  append(cachedd,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cachedd,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cachedd,  JsString.valueOf(cached));	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
440	[BUG]  [BUGGY]  append(cachedd,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cachedd,  Context.START_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cachedd,  Context.START_OF_EXPR);	  append(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
441	[BUG]  [BUGGY]  add(cached,  JS_STRINGS,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JS_STRINGS,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JS_STRINGS,  cached);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
442	[BUG]  [BUGGY]  add(cached,  JS_STRINGS,  s);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JS_STRINGS,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JS_STRINGS,  s);	  add(cached,    JS_STRINGS);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
443	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  [Delete]  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	[Delete]	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
444	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
445	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
446	[BUG]  [BUGGY]  aughtExceptionHandler(jsString(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  aughtExceptionHandler(jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	aughtExceptionHandler(jsString(s));	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
447	[BUG]  [BUGGY]  Context  cc  =  createCurrentContext(cached);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  createCurrentContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  createCurrentContext(cached);	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
448	[BUG]  [BUGGY]  Context  cc  =  createContext(cached);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  createContext(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  createContext(cached);	  if(cached!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.length;  ++i)  {  addJsString(cached[i]);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
450	[BUG]  [BUGGY]  addJsString(cached[i]);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached[i]);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached[i]);	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(cached[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
451	[BUG]  [BUGGY]  while(cached!=  null)  {  cached  =  jsString(s);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  while(cached!=  null)  {  cached  =  jsString(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	while(cached!=  null)  {  cached  =  jsString(s);	  if(cached    ==    null)    {    add(cached);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
452	[BUG]  [BUGGY]  conn.add(cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.add(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.add(cached);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
453	[BUG]  [BUGGY]  conn.addJsString(cachedd);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(cachedd);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(cachedd);	  conn.addJsString(cached);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
454	[BUG]  [BUGGY]  addJsString(cached,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  addJsString(cached,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	addJsString(cached,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(s));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
455	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
456	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.class);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.class);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  addJsString(cached,  JsString.class);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
457	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached,  s);  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext();  cached.addJsString(cached,  s);	  Context    cc    =    Context.getCurrentContext();    addJsString(cached,    s);    	non-compiled	[CE]  not  a  statement	51	None	replace
458	[BUG]  [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(String  s  :  ESCAPED_JS_STRINGS.values())  {  cached  =  jsString(s);  }	  if(cached!=    null)    {    for(String    s    :    ESCAPED_JS_STRINGS.keySet())    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
459	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
460	[BUG]  [BUGGY]  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(cached);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
461	[BUG]  [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ".equals(cached));  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ".equals(cached));  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  jsString(cached);  }  else  {  throw  new  IllegalStateException( " ".equals(cached));  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
462	[BUG]  [BUGGY]  jsString(cached,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(cached,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(cached,  JsString.valueOf(cached));	  add(cached,    JsString.valueOf(cached));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
463	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
464	[BUG]  [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  else  {  context.addJsString(s);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  addJsString(s);  }  else  {  context.addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  addJsString(s);  }  else  {  context.addJsString(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
465	[BUG]  [BUGGY]  if(cached!=  null)  {  add(cached,  s);  }  else  {  context.addJsString(s);  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  add(cached,  s);  }  else  {  context.addJsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  add(cached,  s);  }  else  {  context.addJsString(s);  }	  if(cached!=    null)    {    add(s);    }    else    {    context.addJsString(s);    }    	non-compiled	[CE]  not  a  statement	33	None	replace
466	[BUG]  [BUGGY]  appendDecoder(JSCharsetEncoder.getJsString(s));  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendDecoder(JSCharsetEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendDecoder(JSCharsetEncoder.getJsString(s));	  append(JSCharsetEncoder.getJsString(s));    	non-compiled	[CE]  not  a  statement	35	None	replace
467	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstanceUTC(),  cached);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstanceUTC(),  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstanceUTC(),  cached);	  append(JSCharsetEncoder.getInstance(),    cached);    	non-compiled	[CE]  not  a  statement	36	None	replace
468	[BUG]  [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  cached  =  jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	9	None	replace
469	[BUG]  [BUGGY]  jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(cached);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
470	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached,  s);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(cached,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
471	[BUG]  [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  not  a  statement  [FE]                                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	int  i  =  ESCAPED_JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
472	[BUG]  [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null)  {  for(int  i  =  0;  i  <  JS_STRINGS.size();  ++i)  {  addJsString(jsString,  s);  }	  if(cached!=    null)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    addJsString(jsString,    s);    }    	non-compiled	[CE]  not  a  statement	52	None	replace
473	[BUG]  [BUGGY]  Context  cc  =  this.context.createContext();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  this.context.createContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  this.context.createContext();	  Context    cc    =    context.createContext();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
474	[BUG]  [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.currentTimeMillis();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.currentTimeMillis();	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
475	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContextForCodeInsertion(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContextForCodeInsertion(s);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
476	[BUG]  [BUGGY]  Context  cc  =  Context.createCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.createCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.createCurrentContext(context);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
477	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(rhsContext);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  Context.getCurrentContext(rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  Context.getCurrentContext(rhsContext);	  Context    cc    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
478	[BUG]  [BUGGY]  Context  cc  =  context.createChildObjectContext(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createChildObjectContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createChildObjectContext(s);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
479	[BUG]  [BUGGY]  Context  cc  =  context.createCurrentContext(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createCurrentContext(context);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
480	[BUG]  [BUGGY]  appendContext(JSCharsetEncoder.getInstance());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendContext(JSCharsetEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendContext(JSCharsetEncoder.getInstance());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
481	[BUG]  [BUGGY]  append(JSCharsetEncoder.getInstance(context,  cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.getInstance(context,  cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.getInstance(context,  cached));	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
482	[BUG]  [BUGGY]  appendDecoder(JSCharsetEncoder.getInstance());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendDecoder(JSCharsetEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendDecoder(JSCharsetEncoder.getInstance());	  append(JSCharsetEncoder.getInstance());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
483	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(cached);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer(cached);	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
484	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.get(s));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.get(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.get(s));	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
485	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer().append(cached).append('n');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer().append(cached).append('n');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer().append(cached).append('n');	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
486	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.indexOf(cached));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.indexOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer(CASED_JS_STRINGS.indexOf(cached));	  if(cached!=    null)    {    jsString(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
487	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  addJsString(rhsContext,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  addJsString(rhsContext,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context);  addJsString(rhsContext,  JsString.valueOf(cached));	  Context    rhsContext    =    Context.createChildObjectContext(context);    addJsString(rhsContext,    cached);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
488	[BUG]  [BUGGY]  if(cached!=  null  &&  cached.length()  {  0)  {  add(cached);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached!=  null  &&  cached.length()  {  0)  {  add(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached!=  null  &&  cached.length()  {  0)  {  add(cached);  }	  if(cached!=    null    ||    cached.length()    ==    0)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
489	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().addJsString(cached);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContext().addJsString(cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContext().addJsString(cached);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
490	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContextInstance();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContextInstance();	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
491	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getCurrentContextForCodeInsertion(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getCurrentContextForCodeInsertion(s);	  Context    cc    =    getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
492	[BUG]  [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContextForCodeInsertion(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContextForCodeInsertion(s);	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
493	[BUG]  [BUGGY]  Context  cc  =  getContextForCurrentStatement();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContextForCurrentStatement();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContextForCurrentStatement();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
494	[BUG]  [BUGGY]  Context  cc  =  getContextForce();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  getContextForce();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  getContextForce();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
495	[BUG]  [BUGGY]  cc.add(context,  cached,  null);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(context,  cached,  null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(context,  cached,  null);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
496	[BUG]  [BUGGY]  cc.add(context,  cached,  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.add(context,  cached,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.add(context,  cached,  context);	  cc.add(context,    cached);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
497	[BUG]  [BUGGY]  add(cascaded,  CASED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cascaded,  CASED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cascaded,  CASED_JS_STRINGS);	  if(cached!=    null)    {    add(CASED_JS_STRINGS);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
498	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cachedd,  s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cachedd,  s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cachedd,  s));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
499	[BUG]  [BUGGY]  append(JSCharsetEncoder.encode(cachedd,  cc));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.encode(cachedd,  cc));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.encode(cachedd,  cc));	  append(JSCharsetEncoder.encode(cached));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
500	[BUG]  [BUGGY]  add(cached,  JsStringUtil.isEmpty(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JsStringUtil.isEmpty(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JsStringUtil.isEmpty(cached));	  add(cached,    cached);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
501	[BUG]  [BUGGY]  add(cached,  JsStringUtil.jsString(cached));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  JsStringUtil.jsString(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  JsStringUtil.jsString(cached));	  add(cached,    cached);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
502	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj.  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj	  machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    machiaj    matches(cached)    {    add(cached))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
503	[BUG]  [BUGGY]  appendDecoder(JSCharacterEncoder.getJsString(s));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  appendDecoder(JSCharacterEncoder.getJsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	appendDecoder(JSCharacterEncoder.getJsString(s));	  append(JSCharacterEncoder.getJsString(s));    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
504	[BUG]  [BUGGY]  cc.addJsString(cachedd,  JsString.valueOf(cached));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cachedd,  JsString.valueOf(cached));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cachedd,  JsString.valueOf(cached));	  cc.addJsString(cachedd);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
505	[BUG]  [BUGGY]  add(cached,  jsString);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  add(cached,  jsString);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	add(cached,  jsString);	  addJsString(jsString);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
506	[BUG]  [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  machiaj  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut  facut	  if(cached    ==    null)    {    add(cached);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached    =    jsString(s);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
508	[BUG]  [BUGGY]  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	jsString(cached);  }  else  {  cached  =  ESCAPED_JS_STRINGS.get(s);  }	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
509	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.get(s));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.get(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.get(s));	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
510	[BUG]  [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.indexOf(s));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.indexOf(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	JsStringBuffer  cached  =  new  JsStringBuffer(ESCAPED_JS_STRINGS.indexOf(s));	  if(cached!=    null)    {    jsString(cached);    }    else    {    cached    =    ESCAPED_JS_STRINGS.get(s);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
511	[BUG]  [BUGGY]  Context  cc  =  context.createContext(CASED_JS_STRINGS);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(CASED_JS_STRINGS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(CASED_JS_STRINGS);	  Context    cc    =    context.createContext(cached);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
512	[BUG]  [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()!=  0)  {  for(int  i  =  0;  i  <  ESCAPED_JS_STRINGS.size();  ++i)  {  cached[i]  =  jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	10	None	replace
513	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  ++i)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    ++i)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	10	None	replace
514	[BUG]  [BUGGY]  append(JSCharsetEncoder.generateJsString(cachedd));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(JSCharsetEncoder.generateJsString(cachedd));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(JSCharsetEncoder.generateJsString(cachedd));	  append(JSCharsetEncoder.generateJsString(cached));    	non-compiled	[CE]  	37	None	replace
515	[BUG]  [BUGGY]  append(cached,  s,  cached);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  append(cached,  s,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	append(cached,  s,  cached);	  append(cached,    s);    	non-compiled	[CE]  	68	None	replace
516	[BUG]  [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  JsStringUtil.jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.length()  ==  0)  {  for(int  i  =  0;  i  <  cached.size();  i++)  {  cached[i]  =  JsStringUtil.jsString(s);  }	  if(cached.length()    ==    0)    {    for(int    i    =    0;    i    <    ESCAPED_JS_STRINGS.size();    i++)    {    cached[i]    =    jsString(s);    }    	non-compiled	[CE]  	13	None	replace
517	[BUG]  [BUGGY]  conn.addJsString(cached,  s);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  conn.addJsString(cached,  s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	conn.addJsString(cached,  s);	  addJsString(s,    cached);    	non-compiled	[CE]  	21	None	replace
518	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  START_OF_EXPR));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  START_OF_EXPR));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(lhsContext,  cached,  START_OF_EXPR));	  Context.codeBug();    	non-compiled	[CE]  	29	None	replace
519	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  STATEMENT_OF_EXPR));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.report(JSError.make(lhsContext,  cached,  STATEMENT_OF_EXPR));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.report(JSError.make(lhsContext,  cached,  STATEMENT_OF_EXPR));	  Context.codeBug();    	non-compiled	[CE]  	29	None	replace
520	[BUG]  [BUGGY]  cc.addJsString(cached,  jsString(s));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  cc.addJsString(cached,  jsString(s));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	cc.addJsString(cached,  jsString(s));	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
521	[BUG]  [BUGGY]  Context.append(cached,  cached);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context.append(cached,  cached);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context.append(cached,  cached);	  append(cached,    jsString(s));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
522	[BUG]  [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.equals( " "))  {  jsString(s);  }	  jsString(s);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
523	[BUG]  [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalStateException( " ");  }	  jsString(s);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
524	[BUG]  [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.equals( " "))  {  jsString(s);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  jsString(s);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
525	[BUG]  [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  addJsString(cached);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.equals( " "))  {  jsString(s);  }  else  {  addJsString(cached);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.equals( " "))  {  jsString(s);  }  else  {  addJsString(cached);  }	  jsString(s);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
526	[BUG]  [BUGGY]  if(cached.equals(JS_STRINGS))  {  jsString(s);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  if(cached.equals(JS_STRINGS))  {  jsString(s);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	if(cached.equals(JS_STRINGS))  {  jsString(s);  }	  jsString(s);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
527	[BUG]  [BUGGY]  Context  cc  =  context.createContext(rhsContext);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  context.createContext(rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  context.createContext(rhsContext);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
528	[BUG]  [BUGGY]  Context  cc  =  STATEMENT.createContext(s);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      void  addJsString(String  s)  {  String  cached  =  ESCAPED_JS_STRINGS.get(s);  if  (cached  ==  null)  {  cached  =  jsString(s);  ESCAPED_JS_STRINGS.put(s,  cached);  }      [BUGGY]  Context  cc  =  STATEMENT.createContext(s);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  addJsString  [RETURN_TYPE]  void  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  CodeConsumer  cc  consumer  String  cached  s  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	953	953	1	replace	Context  cc  =  STATEMENT.createContext(s);	  Context    cc    =    context.createContext(s);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
