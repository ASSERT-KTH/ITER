bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.length()  -  1;  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.length()  -  1;  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.length()  +  1;  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.length()  +  1;  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.length()  +  2;  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.length()  +  2;  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.length()  -  2;  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.length()  -  2;  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  s.length();  i++)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  1;  i  <  s.length();  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  1;  i  <  s.length();  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.size();  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.size();  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]    [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	  	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.charAt(0);  i++)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.charAt(0);  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.charAt(0);  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  String  jsString(String  s)  {  int  singleq  =  0,  doubleq  =  0;    [BUGGY]  for(int  i  =  0;  i  <  s.length()  *  2;  i++)  {  [BUGGY]  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.23570226039551587	960	960	1	replace	for(int  i  =  0;  i  <  s.length()  *  2;  i++)  {	for  (int  i  =  0;  i  <  s.length();  i++)  {  	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
