bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getType();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getParent().getType();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getParent().getType();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getFirstChild().getType();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getFirstChild().getType();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
3	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getFirstChild().getIndex();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
4	[BUG]  [BUGGY]  addJsString(n.getString());  [CE]  <identifier>  expected  [FE]          ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  addJsString(n.getString());  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	addJsString(n.getString());	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
5	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  [CE]  <identifier>  expected  [FE]            ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getChildCount();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getChildCount();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  break;  }  [CE]  <identifier>  expected  [FE]              ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	if(n.getType()  ==  Token.STRING)  {  break;  }	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getLastChild();  [CE]  <identifier>  expected  [FE]                ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getParent().getLastChild();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getParent().getLastChild();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]    [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	  	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	Preconditions.checkState(childCount  ==  0);	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getParent().getChildCount();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getParent().getChildCount();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  <identifier>  expected  [FE]        ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	Preconditions.checkState(childCount  ==  1);	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString();  [CE]  <identifier>  expected  [FE]    ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  int  childCount  =  n.getLastChild().getString();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	int  childCount  =  n.getLastChild().getString();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  last  =  n.getLastChild();  [CE]  <identifier>  expected  [FE]      ComparisonFailure  [CONTEXT]  break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  addJsString(n.getString());  [BUGGY]  last  =  n.getLastChild();  [BUGGY]    case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add( "delete   ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	639	639	1	replace	last  =  n.getLastChild();	break;  	non-compiled	[CE]  <identifier>  expected	7	None	replace
