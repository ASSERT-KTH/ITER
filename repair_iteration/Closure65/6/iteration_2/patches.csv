bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sb.append( "n ".charAt(i));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( "n ".charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( "n ".charAt(i));	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
2	[BUG]  [BUGGY]  sb.append('n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append('n');  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append('n');	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
3	[BUG]  [BUGGY]  sb.append( "0 ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( "0 ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( "0 ");	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
4	[BUG]  [BUGGY]  sb.append( "n ",  i);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( "n ",  i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( "n ",  i);	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
5	[BUG]  [BUGGY]  sb.append( "t ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( "t ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( "t ");	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
6	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  12);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  12);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  12);	  char    c    =    s.charAt(i    +    11);    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  char  c  =  s.charAt(i]  +  2;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i]  +  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i]  +  2;	  char    c    =    s.charAt(i]    +    1;    	non-compiled	[CE]  	18	None	replace
8	[BUG]  [BUGGY]  char  c  =  s.charAt(i],  quote  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i],  quote  +  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i],  quote  +  1;	  char    c    =    s.charAt(i]    +    1;    	non-compiled	[CE]  	18	None	replace
9	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  inputCharsetEncoder.charAt(i  +  1);	  char    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  String  c  =  inputCharsetEncoder.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  inputCharsetEncoder.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  inputCharsetEncoder.charAt(i);	  char    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i)+  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  inputCharsetEncoder.charAt(i)+  1;	  char    c    =    inputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  2;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  2;	  char    c    =    s.charAt(i)+    2;    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  char  c  =  s.charAt(i)-  2;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)-  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)-  2;	  char    c    =    s.charAt(i)+    2;    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  char  c  =  s.charAt(i  -  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  -  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  -  1);	  char    c    =    s.charAt(i    -    2);    	non-compiled	[CE]  	32	None	replace
15	[BUG]  [BUGGY]  char  c  =  s.charAt(i  -  3);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  -  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  -  3);	  char    c    =    s.charAt(i    -    2);    	non-compiled	[CE]  	32	None	replace
16	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i  +  2);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i  +  2);	  char    c    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i  +  3);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i  +  3);	  char    c    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  outputCharsetEncoder.charAt(i  +  1);	  char    c    =    outputCharsetEncoder.charAt(i    +    1);    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i),  quote);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i),  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s.charAt(i),  quote);	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
20	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i)+  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i)+  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s.charAt(i)+  1);	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
21	[BUG]  [BUGGY]  char  c  =  Character.toUpperCase(s.charAt(i));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  Character.toUpperCase(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  Character.toUpperCase(s.charAt(i));	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
22	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i  +  1));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s.charAt(i  +  1));	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
23	[BUG]  [BUGGY]  char  c  =  s.charAt(i).charAt(i);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).charAt(i);	  char    c    =    s.charAt(i).charAt(0);    	non-compiled	[CE]  	27	None	replace
24	[BUG]  [BUGGY]  char  c  =  s.charAt(i).charAt(i  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).charAt(i  +  1);	  char    c    =    s.charAt(i).charAt(0);    	non-compiled	[CE]  	27	None	replace
25	[BUG]  [BUGGY]  char  c  =  s.charAt(i).charAt(2);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).charAt(2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).charAt(2);	  char    c    =    s.charAt(i).charAt(0);    	non-compiled	[CE]  	27	None	replace
26	[BUG]  [BUGGY]  char  c  =  s.charAt(i).substring(1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).substring(1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).substring(1);	  char    c    =    s.charAt(i).charAt(0);    	non-compiled	[CE]  	27	None	replace
27	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i  +  1);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
28	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i++);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i):  s.charAt(i++);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
29	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(0);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
30	[BUG]  [BUGGY]  char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(0);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
31	[BUG]  [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
32	[BUG]  [BUGGY]  char  c  =  strEscape.charAt(i  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape.charAt(i  +  1);	  char    c    =    strEscape.charAt(i    +    2);    	non-compiled	[CE]  	42	None	replace
33	[BUG]  [BUGGY]  char  c  =  quote.charAt(i  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote.charAt(i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote.charAt(i  +  2);	  char    c    =    strEscape.charAt(i    +    2);    	non-compiled	[CE]  	42	None	replace
34	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  4  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  4  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  4  +  1);	  char    c    =    s.charAt(i    *    2    +    1);    	non-compiled	[CE]  	29	None	replace
35	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  3  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  3  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  3  +  1);	  char    c    =    s.charAt(i    *    2    +    1);    	non-compiled	[CE]  	29	None	replace
36	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  2  +  3);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  2  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  2  +  3);	  char    c    =    s.charAt(i    *    2    +    1);    	non-compiled	[CE]  	29	None	replace
37	[BUG]  [BUGGY]  Char  c  =  s.charAt(i);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  s.charAt(i);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	41	None	replace
38	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  outputCharsetEncoder.charAt(i  +  1);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	41	None	replace
39	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
40	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
41	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
42	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  3);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  3);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
43	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i],  quote);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i],  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i],  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
44	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i],  quote);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i],  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i],  quote);	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
45	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i]  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i]  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i]  +  1);	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
46	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s[i]);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s[i]);	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
47	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i]).charValue();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i]).charValue();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i]).charValue();	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
48	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i])+  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i])+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i])+  1;	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
49	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charAt(i));  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i].charAt(i));	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
50	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i],  quote);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i],  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i],  quote);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	24	None	replace
51	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  quote);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  quote);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	24	None	replace
52	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.encode(outputCharsetEncoder[i]);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.encode(outputCharsetEncoder[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.encode(outputCharsetEncoder[i]);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	24	None	replace
53	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]).charValue();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]).charValue();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]).charValue();	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	24	None	replace
54	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(s[i]);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(s[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.encode(s[i]);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	24	None	replace
55	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i  +  1);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
56	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(i);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i  +  1):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  char  c  =(i  ==  1)?  s.charAt(0):  s.charAt(i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  1)?  s.charAt(0):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  1)?  s.charAt(0):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
58	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i++);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(0):  s.charAt(i++);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
59	[BUG]  [BUGGY]  String  c  =  s.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  s.charAt(i);	  String    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  String  c  =  s.substring(i  +  1,  s.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  s.substring(i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  s.substring(i  +  1,  s.length());	  String    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	3	None	replace
61	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  s.getCharset(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  s.getCharset(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
63	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharset(i);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharset(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharset(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
64	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.length());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.length());	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
65	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(i);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
66	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  2];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  2];  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  2];	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  	17	None	replace
67	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  3];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  3];  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  3];	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  	17	None	replace
68	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1],  quote;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  1],  quote;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  1],  quote;	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  	17	None	replace
69	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1],  quote);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  1],  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  1],  quote);	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  	17	None	replace
70	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(i)+  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(i)+  1;	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
71	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(i));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(i));	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
72	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(i  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(i  +  1);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
73	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(i++);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(i++);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
74	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(i).charAt(0);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(i).charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(i).charAt(0);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
75	[BUG]  [BUGGY]  char  c  =  quote(i,  s.charAt(i));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(i,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(i,  s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
76	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.strEscape(i,  s.charAt(i));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.strEscape(i,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.strEscape(i,  s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
77	[BUG]  [BUGGY]  char  c  =  strEscape(i,  s.charAt(i  +  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape(i,  s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape(i,  s.charAt(i  +  1));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
78	[BUG]  [BUGGY]  char  c  =  quoteEscape(s.charAt(i));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quoteEscape(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quoteEscape(s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
79	[BUG]  [BUGGY]  String  c  =  strEscape(i,  s.charAt(i));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  strEscape(i,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  strEscape(i,  s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
80	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i++);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  outputCharsetEncoder.charAt(i++);	  char    c    =    outputCharsetEncoder.charAt(i++);    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i)+  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i)+  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s.charAt(i)+  1);	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  	19	None	replace
82	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i),  quote);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i),  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s.charAt(i),  quote);	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  	19	None	replace
83	[BUG]  [BUGGY]  char  c  =  Character.toLowerCase(s.charAt(i));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  Character.toLowerCase(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  Character.toLowerCase(s.charAt(i));	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i  +  1));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s.charAt(i  +  1));	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i)+  1));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i)+  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s.charAt(i)+  1));	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  	19	None	replace
86	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i  +  1));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i  +  1));	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
87	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i)+  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i)+  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i)+  1);	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
88	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i),  s.charAt(i));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i),  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i),  s.charAt(i));	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
89	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i),  outputCharsetEncoder);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i),  outputCharsetEncoder);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i),  outputCharsetEncoder);	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
90	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i)+  2);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i)+  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i)+  2);	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
91	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i)+  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i)+  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i)+  1));	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
92	[BUG]  [BUGGY]  char  c  =  s.charAt(i)+  10;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)+  10;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)+  10;	  char    c    =    s.charAt(i)+    3;    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  quote);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
94	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder[i]);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  s.encode(outputCharsetEncoder[i]);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
95	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(s[i]);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(s[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(s[i]);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
96	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i])+  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i])+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i])+  1;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
97	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1)-  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  1)-  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  1)-  1;	  char    c    =    s.charAt(i)-    1;    	non-compiled	[CE]  	43	None	replace
98	[BUG]  [BUGGY]  char  c  =  s.charAt(i)-  3;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)-  3;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)-  3;	  char    c    =    s.charAt(i)-    1;    	non-compiled	[CE]  	43	None	replace
99	[BUG]  [BUGGY]  char  c  =  s.charAt(i)-  4;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)-  4;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)-  4;	  char    c    =    s.charAt(i)-    1;    	non-compiled	[CE]  	43	None	replace
100	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
101	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  s.length());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i,  s.length());	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
102	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i++);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i++);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
103	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i)+  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(i)+  1;	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
104	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.charAt(i);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
105	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i  +  1);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
106	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i++);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
107	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i)+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i)+  1;	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
108	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i  +  2);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
109	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  3);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i  +  3);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
110	[BUG]  [BUGGY]  char  c  =  quote.charAt(i);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote.charAt(i);	  char    c    =    strEscape.charAt(i);    	non-compiled	[CE]  	45	None	replace
111	[BUG]  [BUGGY]  char  c  =  stringEscape.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  stringEscape.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  stringEscape.charAt(i);	  char    c    =    strEscape.charAt(i);    	non-compiled	[CE]  	45	None	replace
112	[BUG]  [BUGGY]  char  c  =  strEscape.charAt(i)+  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape.charAt(i)+  1;	  char    c    =    strEscape.charAt(i);    	non-compiled	[CE]  	45	None	replace
113	[BUG]  [BUGGY]  char  c  =  s.charAt(i++)+  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i++)+  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i++)+  2;	  char    c    =    s.charAt(i++)+    1;    	non-compiled	[CE]  	15	None	replace
114	[BUG]  [BUGGY]  char  c  =  s.charAt(i++)+  3;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i++)+  3;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i++)+  3;	  char    c    =    s.charAt(i++)+    1;    	non-compiled	[CE]  	15	None	replace
115	[BUG]  [BUGGY]  char  c  =  s.charAt(i++)+  4;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i++)+  4;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i++)+  4;	  char    c    =    s.charAt(i++)+    1;    	non-compiled	[CE]  	15	None	replace
116	[BUG]  [BUGGY]  char  c  =  s.charAt(i++)/  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i++)/  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i++)/  1;	  char    c    =    s.charAt(i++)+    1;    	non-compiled	[CE]  	15	None	replace
117	[BUG]  [BUGGY]  char  c  =  s.charAt(i++)+  6;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i++)+  6;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i++)+  6;	  char    c    =    s.charAt(i++)+    1;    	non-compiled	[CE]  	15	None	replace
118	[BUG]  [BUGGY]  char  c  =  quote.charAt(i++);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote.charAt(i++);	  char    c    =    strEscape.charAt(i++);    	non-compiled	[CE]  	36	None	replace
119	[BUG]  [BUGGY]  char  c  =  sb.charAt(i++);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  sb.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  sb.charAt(i++);	  char    c    =    strEscape.charAt(i++);    	non-compiled	[CE]  	36	None	replace
120	[BUG]  [BUGGY]  char  c  =  stringEscape.charAt(i++);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  stringEscape.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  stringEscape.charAt(i++);	  char    c    =    strEscape.charAt(i++);    	non-compiled	[CE]  	36	None	replace
121	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  3;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  3;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  3;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
122	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  4;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  4;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  4;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
123	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1)/  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  1)/  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  1)/  1;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
124	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  2.0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  2.0;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  2.0;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
125	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i)+  2;	  char    c    =    outputCharsetEncoder.charAt(i)+    1;    	non-compiled	[CE]  	4	None	replace
126	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  3;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  3;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i)+  3;	  char    c    =    outputCharsetEncoder.charAt(i)+    1;    	non-compiled	[CE]  	4	None	replace
127	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)/  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)/  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i)/  1;	  char    c    =    outputCharsetEncoder.charAt(i)+    1;    	non-compiled	[CE]  	4	None	replace
128	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  4;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  outputCharsetEncoder.charAt(i)+  4;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  outputCharsetEncoder.charAt(i)+  4;	  char    c    =    outputCharsetEncoder.charAt(i)+    1;    	non-compiled	[CE]  	4	None	replace
129	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.getCharset(i);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.getCharset(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.getCharset(i);	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
130	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
131	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.length());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.length());	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
132	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCurrentCharset(i);	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
133	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(i);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(i);	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
134	[BUG]  [BUGGY]  char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(i);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  1)?  s.charAt(i):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(i);    	non-compiled	[CE]  	33	None	replace
135	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i++):  s.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i++):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i++):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(i);    	non-compiled	[CE]  	33	None	replace
136	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
137	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
138	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  2);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  2);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
139	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  3);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  3);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
140	[BUG]  [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(s,  i  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  inputCharsetEncoder.encode(s,  i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  inputCharsetEncoder.encode(s,  i  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
141	[BUG]  [BUGGY]  char  c  =  quote.charAt(i  +  3);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote.charAt(i  +  3);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote.charAt(i  +  3);	  char    c    =    strEscape.charAt(i    +    3);    	non-compiled	[CE]  	47	None	replace
142	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharDecoder();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharDecoder();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharDecoder();	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
143	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharBuffer();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharBuffer();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharBuffer();	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
144	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharCode();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharCode();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharCode();	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
145	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray(quote);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray(quote);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray(quote);	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
146	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i++);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  inputCharsetEncoder.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  inputCharsetEncoder.charAt(i++);	  char    c    =    strEscape.charAt(i++);    	non-compiled	[CE]  	36	None	replace
147	[BUG]  [BUGGY]  char  c  =  strEscape(s.charAt(i));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape(s.charAt(i));	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
148	[BUG]  [BUGGY]  char  c  =(i  <  0)?  s.charAt(0):  s.charAt(i);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  <  0)?  s.charAt(0):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  <  0)?  s.charAt(0):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
149	[BUG]  [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i  +  1):  s.charAt(i);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i  +  1):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >=  0)?  s.charAt(i  +  1):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
150	[BUG]  [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  -  1):  s.charAt(i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  ==  0)?  s.charAt(i  -  1):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  ==  0)?  s.charAt(i  -  1):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  	35	None	replace
151	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
152	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());	  CharsetEncoder    c    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	23	None	replace
153	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  11);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  11);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  11);	  char    c    =    s.charAt(i    +    11);    	non-compiled	[CE]  	7	None	replace
154	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray( "0 ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray( "0 ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray( "0 ");	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
155	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray( "n ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray( "n ");	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
156	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray(DEFAULT_SCRIPT);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray(DEFAULT_SCRIPT);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray(DEFAULT_SCRIPT);	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
157	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i),  outputCharsetEncoder);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i),  outputCharsetEncoder);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s.charAt(i),  outputCharsetEncoder);	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
158	[BUG]  [BUGGY]  Char  c  =  Character.toUpperCase(s.charAt(i));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  Character.toUpperCase(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  Character.toUpperCase(s.charAt(i));	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  	46	None	replace
159	[BUG]  [BUGGY]  Char  c  =  inputCharsetEncoder.charAt(i);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  inputCharsetEncoder.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  inputCharsetEncoder.charAt(i);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	41	None	replace
160	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i)+  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  outputCharsetEncoder.charAt(i)+  1;	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	41	None	replace
161	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i++);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  outputCharsetEncoder.charAt(i++);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  outputCharsetEncoder.charAt(i++);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	41	None	replace
162	[BUG]  [BUGGY]  char  c  =  s.charAt(i  /  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  /  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  /  1);	  char    c    =    s.charAt(i    *    1);    	non-compiled	[CE]  	31	None	replace
163	[BUG]  [BUGGY]  sb.append( ".n ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( ".n ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( ".n ");	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
164	[BUG]  [BUGGY]  sb.append('0');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append('0');  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append('0');	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
165	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i  +  1,  s.length());	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
166	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCharset(i,  s.charAt(i));	  CharsetEncoder    cc    =    outputCharsetEncoder.getCharset(i);    	non-compiled	[CE]  	39	None	replace
167	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i  +  1]);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i  +  1]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i  +  1]);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
168	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i]  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
169	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb[i]);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb[i]);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  	40	None	replace
170	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  8;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  8;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  8;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
171	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  10;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  10;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  10;	  char    c    =    s.charAt(i)/    1;    	non-compiled	[CE]  	11	None	replace
172	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charValue());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charValue());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i].charValue());	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
173	[BUG]  [BUGGY]  char  c  =  quotation  +  s.charAt(i);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quotation  +  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quotation  +  s.charAt(i);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  	28	None	replace
174	[BUG]  [BUGGY]  char  c  =  strEscape(s,  s.charAt(i));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape(s,  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape(s,  s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
175	[BUG]  [BUGGY]  char  c  =  strEscape(s.charAt(i),  s.charAt(i));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape(s.charAt(i),  s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape(s.charAt(i),  s.charAt(i));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
176	[BUG]  [BUGGY]  char  c  =  strEscape(s,  s.charAt(i  +  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  strEscape(s,  s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  strEscape(s,  s.charAt(i  +  1));	  char    c    =    strEscape(i,    s.charAt(i));    	non-compiled	[CE]  	25	None	replace
177	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  2  +  4);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  2  +  4);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  2  +  4);	  char    c    =    s.charAt(i    *    2    +    1);    	non-compiled	[CE]  	29	None	replace
178	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  outputCharsetEncoder.substring(i  +  1,  s.length());	  String    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	3	None	replace
179	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i)+  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  outputCharsetEncoder.charAt(i)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  outputCharsetEncoder.charAt(i)+  1;	  String    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	3	None	replace
180	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(sb,  i);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
181	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  false);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  false);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
182	[BUG]  [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  <  0)?  s.charAt(i):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
183	[BUG]  [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(i  +  1);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
184	[BUG]  [BUGGY]  char  c  =(i  >  0)?  s.charAt(i):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >  0)?  s.charAt(i):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >  0)?  s.charAt(i):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
185	[BUG]  [BUGGY]  Char  c  =  Character.toLowerCase(s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  Character.toLowerCase(s.charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  Character.toLowerCase(s.charAt(i));	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
186	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i  +  1]);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i  +  1]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i  +  1]);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
187	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i]  +  1);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
188	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i])+  1;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i])+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i])+  1;	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
189	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb[i]);  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(sb[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(sb[i]);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
190	[BUG]  [BUGGY]  char  c  =  s.charAt(i  *  1];  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  *  1];  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  *  1];	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
191	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  11];  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  11];  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  11];	  char    c    =    s.charAt(i    +    1];    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
192	[BUG]  [BUGGY]  char  c  =  s.charAt(i]  +  3;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i]  +  3;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i]  +  3;	  char    c    =    s.charAt(i]    +    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
193	[BUG]  [BUGGY]  char  c  =(i!=  0)?  s.charAt(i):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i!=  0)?  s.charAt(i):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i!=  0)?  s.charAt(i):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
194	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
195	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  11);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  11);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  11);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
196	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i).charValue());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toUpperCase(s.charAt(i).charValue());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toUpperCase(s.charAt(i).charValue());	  Character    c    =    Character.toUpperCase(s.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
197	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1)+  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i  +  1)+  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i  +  1)+  1;	  char    c    =    outputCharsetEncoder.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
198	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i).charValue());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s.charAt(i).charValue());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s.charAt(i).charValue());	  Character    c    =    Character.toLowerCase(s.charAt(i));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
199	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i].charAt(i));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i].charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s[i].charAt(i));	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
200	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s[i]);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(s[i]);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
201	[BUG]  [BUGGY]  Character  c  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  s.charAt(i);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
202	[BUG]  [BUGGY]  Char  c  =  strEscape.charAt(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  c  =  strEscape.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Char  c  =  strEscape.charAt(i);	  Char    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
203	[BUG]  [BUGGY]  char  c  =(i  >=  0)?  s.charAt(0):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >=  0)?  s.charAt(0):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >=  0)?  s.charAt(0):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
204	[BUG]  [BUGGY]  char  c  =(i  >  0)?  s.charAt(0):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >  0)?  s.charAt(0):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >  0)?  s.charAt(0):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
205	[BUG]  [BUGGY]  char  c  =(i!=  0)?  s.charAt(0):  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i!=  0)?  s.charAt(0):  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i!=  0)?  s.charAt(0):  s.charAt(i);	  char    c    =(i    ==    0)?    s.charAt(0):    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
206	[BUG]  [BUGGY]  char  c  =  s.charAt(i)%  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)%  2;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)%  2;	  char    c    =    s.charAt(i)+    2;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
207	[BUG]  [BUGGY]  char  c  =  quote  +  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote  +  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote  +  s.charAt(0);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
208	[BUG]  [BUGGY]  char  c  =  quotes  +  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quotes  +  s.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quotes  +  s.charAt(i);	  char    c    =    quote    +    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
209	[BUG]  [BUGGY]  char  c  =  sb.charAt(i  +  2);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  sb.charAt(i  +  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  sb.charAt(i  +  2);	  char    c    =    strEscape.charAt(i    +    2);    	non-compiled	[CE]  	42	None	replace
210	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	38	None	replace
211	[BUG]  [BUGGY]  char  c  =  s.charAt(i]  *  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i]  *  1;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i]  *  1;	  char    c    =    s.charAt(i]    +    1;    	non-compiled	[CE]  	18	None	replace
212	[BUG]  [BUGGY]  String  c  =  strEscape.charAt(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  c  =  strEscape.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	String  c  =  strEscape.charAt(i);	  String    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	3	None	replace
213	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i).toLowerCase());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i).toLowerCase());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i).toLowerCase());	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
214	[BUG]  [BUGGY]  char  c  =  quote(s.charAt(i).toCharArray());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  quote(s.charAt(i).toCharArray());  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  quote(s.charAt(i).toCharArray());	  char    c    =    quote(s.charAt(i));    	non-compiled	[CE]  	26	None	replace
215	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray(backslashEscape);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray(backslashEscape);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray(backslashEscape);	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
216	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray(QUOTE);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toCharArray(QUOTE);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toCharArray(QUOTE);	  char    c    =    s.charAt(i).toCharArray();    	non-compiled	[CE]  	14	None	replace
217	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charAt(0));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  c  =  Character.toLowerCase(s[i].charAt(0));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	Character  c  =  Character.toLowerCase(s[i].charAt(0));	  Character    c    =    Character.toLowerCase(s[i]);    	non-compiled	[CE]  	20	None	replace
218	[BUG]  [BUGGY]  char  c  =  characterEscape.charAt(i);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  characterEscape.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  characterEscape.charAt(i);	  char    c    =    strEscape.charAt(i);    	non-compiled	[CE]  	45	None	replace
219	[BUG]  [BUGGY]  char  c  =  s.charAt(i)/  5;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i)/  5;  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i)/  5;	  char    c    =    s.charAt(i)+    5;    	non-compiled	[CE]  	13	None	replace
220	[BUG]  [BUGGY]  sb.append(c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append(c);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append(c);	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
221	[BUG]  [BUGGY]  sb.append( "u00 ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  sb.append( "u00 ");  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	sb.append( "u00 ");	  sb.append(   "n   ");    	non-compiled	[CE]  	22	None	replace
222	[BUG]  [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(1);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  <  0)?  s.charAt(i):  s.charAt(1);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
223	[BUG]  [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  <  0)?  s.charAt(i):  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  <  0)?  s.charAt(i):  s.charAt(0);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
224	[BUG]  [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >=  0)?  s.charAt(i):  s.charAt(0);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
225	[BUG]  [BUGGY]  char  c  =(i  >  0)?  s.charAt(i):  s.charAt(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =(i  >  0)?  s.charAt(i):  s.charAt(0);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =(i  >  0)?  s.charAt(i):  s.charAt(0);	  char    c    =(i    ==    0)?    s.charAt(i):    s.charAt(0);    	non-compiled	[CE]  	34	None	replace
226	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  	37	None	replace
227	[BUG]  [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  this.outputCharsetEncoder.charAt(i);	  CharsetEncoder    c    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  	21	None	replace
228	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.charAt(i  *  2);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.charAt(i  *  2);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.charAt(i  *  2);	  CharsetEncoder    c    =    s.charAt(i);    	non-compiled	[CE]  	44	None	replace
229	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toLowerCase();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  c  =  s.charAt(i).toLowerCase();  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	char  c  =  s.charAt(i).toLowerCase();	  char    c    =    s.charAt(i).charAt(0);    	non-compiled	[CE]  	27	None	replace
230	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i].charAt(i));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i].charAt(i));  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(s[i].charAt(i));	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
231	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(s[i]);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.charAt(s[i]);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.charAt(s[i]);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
232	[BUG]  [BUGGY]  CharsetEncoder  c  =  s.encode(outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  c  =  s.encode(outputCharsetEncoder);  [BUGGY]      switch  (c)  {  case  '\0':  sb.append(     "\\0     ");  break;  case  '\n':  sb.append(     "\\n     ");  break;  case  '\r':  sb.append(     "\\r     ");  break;  case  '\t':  sb.append(     "\\t     ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\     "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  Map  ESCAPED_JS_STRINGS  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure65/src/com/google/javascript/jscomp/CodeGenerator.java	0.25	1013	1013	1	replace	CharsetEncoder  c  =  s.encode(outputCharsetEncoder);	  CharsetEncoder    c    =    outputCharsetEncoder.encode(s[i]);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
