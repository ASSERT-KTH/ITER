bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  1,  lB[i].length);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  1,  lB[i].length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(i  +  1,  lB[i].length);	  Integer    uB    =    getFiniteBounds(i    +    1,    lB.length);    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i]  +  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i]  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB[i]  +  1);	  Integer    uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(uB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(uB[i]);	  Integer    uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB,  1);	  Integer    uB    =    getFiniteBounds(lB,    0);    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  3);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  3);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB,  3);	  Integer    uB    =    getFiniteBounds(lB,    0);    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  lB  =  lB[i]  +  1;  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  lB  =  lB[i]  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	lB  =  lB[i]  +  1;	  lB    =    uB[i]    +    1;    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  haveInfiniteBounds  =  true;  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  haveInfiniteBounds  =  true;  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	haveInfiniteBounds  =  true;	  haveInfiniteBounds    =    false;    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lB[i].length;  i++)  {  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  for(int  i  =  0;  i  <  lB[i].length;  i++)  {  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	for(int  i  =  0;  i  <  lB[i].length;  i++)  {	  for(int    i    =    0;    i    <    uB[i].length;    i++)    {    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  uB  =  getFiniteBounds(i  +  1);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(i  +  1);	  uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  uB  =  getFiniteBounds(i  +  1,  lB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(i  +  1,  lB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(i  +  1,  lB[i]);	  uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  int  uB  =  getFiniteBounds(i);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  int  uB  =  getFiniteBounds(i);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	int  uB  =  getFiniteBounds(i);	  int    uB    =    getFiniteBounds();    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i].length);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i].length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB[i].length);	  Integer    uB    =    getFiniteBounds(lB.length);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  int  uB  =  getFiniteBounds(lB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  int  uB  =  getFiniteBounds(lB[i]);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	int  uB  =  getFiniteBounds(lB[i]);	  int    uB    =    getFiniteBounds(lB);    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  Integer  uB  =  getInfiniteBounds(i  +  1);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getInfiniteBounds(i  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getInfiniteBounds(i  +  1);	  Integer    uB    =    getInfiniteBounds(i);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  uB  =  getFiniteBounds(uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(uB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(uB[i]);	  uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  uB  =  getFiniteBounds(lB[i]  +  1);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(lB[i]  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(lB[i]  +  1);	  uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  2);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(i  +  2);	  Integer    uB    =    getFiniteBounds(i    +    1);    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  int  uB  =  getFiniteBounds(lB,  i);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  int  uB  =  getFiniteBounds(lB,  i);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	int  uB  =  getFiniteBounds(lB,  i);	  int    uB    =    getFiniteBounds(lB);    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  uB  =  generateStatistics(lB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  generateStatistics(lB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  generateStatistics(lB[i]);	  uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  1,  lB.length  -  1);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(i  +  1,  lB.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(i  +  1,  lB.length  -  1);	  Integer    uB    =    getFiniteBounds(i    +    1,    lB.length);    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i],  uB[i]);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB[i],  uB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB[i],  uB[i]);	  Integer    uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB.length  -  1);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB.length  -  1);	  Integer    uB    =    getFiniteBounds(lB.length);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  uB  =  getFiniteBounds(i  +  1,  lB.length);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(i  +  1,  lB.length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(i  +  1,  lB.length);	  uB    =    getFiniteBounds(i);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  0,  lB.length);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  0,  lB.length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB,  0,  lB.length);	  Integer    uB    =    getFiniteBounds(lB,    0);    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  2);  [CE]  [FE]            AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB,  2);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB,  2);	  Integer    uB    =    getFiniteBounds(lB,    0);    	non-compiled	[CE]  	11	None	replace
26	[BUG]  [BUGGY]  double  uB  =  getFiniteBounds(lB);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  double  uB  =  getFiniteBounds(lB);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	double  uB  =  getFiniteBounds(lB);	  int    uB    =    getFiniteBounds(lB);    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  Integer  uB  =  getFiniteBounds(lB.length  +  1);  [CE]  [FE]                AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getFiniteBounds(lB.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getFiniteBounds(lB.length  +  1);	  Integer    uB    =    getFiniteBounds(i    +    1);    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  Integer  uB  =  getInfiniteBounds(i,  lB.length);  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getInfiniteBounds(i,  lB.length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getInfiniteBounds(i,  lB.length);	  Integer    uB    =    getInfiniteBounds(i);    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  Integer  uB  =  getInfiniteBounds(i  +  1,  lB.length);  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  Integer  uB  =  getInfiniteBounds(i  +  1,  lB.length);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	Integer  uB  =  getInfiniteBounds(i  +  1,  lB.length);	  Integer    uB    =    getInfiniteBounds(i);    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  uB  =  getFiniteBounds(lB[i],  uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  uB  =  getFiniteBounds(lB[i],  uB[i]);  [BUGGY]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	uB  =  getFiniteBounds(lB[i],  uB[i]);	  uB    =    getFiniteBounds(lB[i]);    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  double  uB  =  getFiniteBounds();  [CE]  [FE]              AssertionError      [CONTEXT]      for  (int  i  =  0;  i  <  lB.length;  i++)  {  if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {      [BUGGY]  double  uB  =  getFiniteBounds();  [BUGGY]      if  (Double.isInfinite(lB[i])  ||  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	515	515	1	replace	double  uB  =  getFiniteBounds();	  int    uB    =    getFiniteBounds();    	non-compiled	[CE]  	16	None	replace
