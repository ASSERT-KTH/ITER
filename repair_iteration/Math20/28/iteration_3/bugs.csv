bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Math.min(lambda,  lambda.length));  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(lambda,  lambda.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(lambda,  lambda.length));	  Math.min(lambda,    fitness.length));    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  Math.max(0,  lambda));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(0,  lambda));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(0,  lambda));	  Math.max(1,    lambda));    	non-compiled	[CE]  	22	None	replace
3	[BUG]  [BUGGY]  Math.max(2,  lambda));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(2,  lambda));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(2,  lambda));	  Math.max(1,    lambda));    	non-compiled	[CE]  	22	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  fitness.iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Number>  iterations  =  fitness.iterator();	  Iterator    <    Number>    iterations    =    arx.iterator();    	non-compiled	[CE]  	19	None	replace
5	[BUG]  [BUGGY]  Math.min(k,  lambda.length  -  1);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(k,  lambda.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(k,  lambda.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	25	None	replace
6	[BUG]  [BUGGY]  Math.min(lambda,  fitness.length  -  1);  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(lambda,  fitness.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(lambda,  fitness.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	25	None	replace
7	[BUG]  [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	27	None	replace
8	[BUG]  [BUGGY]  Iterator  <  Math.abs(minIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(minIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(minIterations)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	27	None	replace
9	[BUG]  [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    i    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	26	None	replace
10	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  lambda.length;  k++)  {  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  1;  k  <  lambda.length;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  k  =  1;  k  <  lambda.length;  k++)  {	  for(int    k    =    1;    k    <    =    lambda;    k++)    {    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  fitness.length;  k++)  {  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  fitness.length;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  k  =  0;  k  <  fitness.length;  k++)  {	  for(int    k    =    1;    k    <    fitness.length;    k++)    {    	non-compiled	[CE]  	29	None	replace
12	[BUG]  [BUGGY]  Math.max(10.0,  lambda  *  1));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(10.0,  lambda  *  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(10.0,  lambda  *  1));	  Math.max(10.0,    lambda    -    1));    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    i    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arz);    }    	non-compiled	[CE]  	28	None	replace
14	[BUG]  [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }	  for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arz);    }    	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  Math.max(1,  lambda  +  1));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  lambda  +  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  lambda  +  1));	  Math.max(10.0,    lambda    +    1));    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  Math.min(bda,  lambda.length));  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(bda,  lambda.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(bda,  lambda.length));	  Math.min(bda,    fitness.length));    	non-compiled	[CE]  	23	None	replace
17	[BUG]  [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(maxIterations)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    i    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	30	None	replace
18	[BUG]  [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  Math.max(0,  lambda.length  -  1));  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(0,  lambda.length  -  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(0,  lambda.length  -  1));	  Math.max(0,    arx.length    -    1));    	non-compiled	[CE]  	18	None	replace
20	[BUG]  [BUGGY]  Math.min(k,  lambda.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(k,  lambda.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(k,  lambda.length));	  Math.min(k,    fitness.length));    	non-compiled	[CE]  	21	None	replace
21	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  Math.max(1,  lambda.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  lambda.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  lambda.length));	  Math.max(0,    lambda.length));    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  for(int  k  =  1;  k  <  =  len;  k++)  {  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  1;  k  <  =  len;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  k  =  1;  k  <  =  len;  k++)  {	  for(int    k    =    1;    k    <    len;    k++)    {    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.data.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.data.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Number>  iterations  =  this.data.iterator();	  Iterator    <    Number>    iterations    =    data.iterator();    	non-compiled	[CE]  	20	None	replace
25	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }	  for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arz);    }    	non-compiled	[CE]  	10	None	replace
26	[BUG]  [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  2;  k++)  {  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  2;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  k  =  0;  k  <  2;  k++)  {	  for(int    k    =    0;    k    <    4;    k++)    {    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  Math.min(branch,  lambda.length));  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(branch,  lambda.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(branch,  lambda.length));	  Math.min(branch,    fitness.length));    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  Math.max(1,  lambda.length  -  arx.length));  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  lambda.length  -  arx.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  lambda.length  -  arx.length));	  Math.max(1,    arx.length    -    lambda.length));    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  Math.max(0,  arx.length  -  lambda.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(0,  arx.length  -  lambda.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(0,  arx.length  -  lambda.length));	  Math.max(1,    arx.length    -    lambda.length));    	non-compiled	[CE]  	15	None	replace
31	[BUG]  [BUGGY]  for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arz);  }	  for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arz);    }    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  5;  k++)  {  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  5;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  k  =  0;  k  <  5;  k++)  {	  for(int    k    =    0;    k    <    4;    k++)    {    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  Math.max(1,  lambda  -  1));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  lambda  -  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  lambda  -  1));	  Math.max(10.0,    lambda    -    1));    	non-compiled	[CE]  	17	None	replace
34	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.arz.iterator();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.arz.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Number>  iterations  =  this.arz.iterator();	  Iterator    <    Number>    iterations    =    arz.iterator();    	non-compiled	[CE]  	24	None	replace
35	[BUG]  [BUGGY]  for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	for(int  iterations  =  2;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  Math.max(1,  arx.length  -  1));  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  arx.length  -  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  arx.length  -  1));	  Math.max(0,    arx.length    -    1));    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  Math.max(1,  lambda,  fitness.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  lambda,  fitness.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  lambda,  fitness.length));	  Math.max(1,    lambda));    	non-compiled	[CE]  	22	None	replace
38	[BUG]  [BUGGY]  Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    i    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	30	None	replace
39	[BUG]  [BUGGY]  Math.min(maxIterations,  fitness.length  -  1);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(maxIterations,  fitness.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.min(maxIterations,  fitness.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	25	None	replace
40	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.arx.iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Number>  iterations  =  this.arx.iterator();	  Iterator    <    Number>    iterations    =    arx.iterator();    	non-compiled	[CE]  	19	None	replace
41	[BUG]  [BUGGY]  Iterator  <  Math.abs(bda)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(bda)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(bda)  {  if(sigma!=  null)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    i    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	26	None	replace
42	[BUG]  [BUGGY]  Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Iterator  <  Math.abs(height)  {  if(sigma!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  Iterator    <    Math.abs(lambda)    {    if(sigma!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    lambda);    }    	non-compiled	[CE]  	27	None	replace
43	[BUG]  [BUGGY]  Math.max(1,  arx.length  -  fitness.length));  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  arx.length  -  fitness.length));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  arx.length  -  fitness.length));	  Math.max(1,    arx.length    -    lambda.length));    	non-compiled	[CE]  	15	None	replace
44	[BUG]  [BUGGY]  Math.max(1,  arx.length  -  lambda.length  -  1));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  arx.length  -  lambda.length  -  1));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  fitfun.isFeasible(arxk.getColumn(0)))  {  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	374	374	1	replace	Math.max(1,  arx.length  -  lambda.length  -  1));	  Math.max(1,    arx.length    -    lambda.length));    	non-compiled	[CE]  	15	None	replace
