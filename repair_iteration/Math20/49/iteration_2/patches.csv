bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1.0)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1.0)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1.0)*cs/damps));	  sigma    *=    Math.exp(Math.min(1.0,(normps/chiN    -    1.0)*cs/damps));    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  if(bestFitness  >=  bestFitness)  {  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  if(bestFitness  >=  bestFitness)  {  [BUGGY]      bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	if(bestFitness  >=  bestFitness)  {	  if(bestFitness    >=    bestValue)    {    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  bestValue  -=  bestFitness;  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  -=  bestFitness;  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  -=  bestFitness;	  bestValue    =    bestFitness;    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1)*cs/damps));  bestFitness  =  bestFitness;  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1)*cs/damps));  bestFitness  =  bestFitness;  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1)*cs/damps));  bestFitness  =  bestFitness;	  sigma    *=    Math.exp(Math.min(1.0,(cs/chiN    -    1.)*cs/damps));    bestFitness    =    bestFitness;    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(cs/chiN  -  1.)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(cs/chiN  -  1.)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  sigma  *  Math.exp(Math.min(1.0,(cs/chiN  -  1.)*cs/damps));	  bestValue    =    sigma    *    Math.exp(Math.min(1.0,(normps/chiN    -    1.)*cs/damps));    	non-compiled	[CE]  	17	None	replace
6	[BUG]  [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/chiN));  [CE]  [FE]                  AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/chiN));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/chiN));	  bestValue    =    sigma    *    Math.exp(Math.min(1.0,(normps/chiN    -    1.)*cs/damps));    	non-compiled	[CE]  	17	None	replace
7	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1)*  worstFitness));  [CE]  [FE]              AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1)*  worstFitness));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(cs/chiN  -  1)*  worstFitness));	  sigma    *=    Math.exp(Math.min(1.0,(normps/chiN    -    1)*    worstFitness));    	non-compiled	[CE]  	19	None	replace
8	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1)*  worstFitness));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1)*  worstFitness));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1)*  worstFitness));	  sigma    *=    Math.exp(Math.min(1.0,(normps/chiN    -    1)*    worstFitness));    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  bestValue  =  DEFAULT_STOPFITNESS;  [CE]  [FE]                  AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  DEFAULT_STOPFITNESS;  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  DEFAULT_STOPFITNESS;	  bestValue    =    worstFitness;    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.0)*cs/damps));  bestFitness  =  bestFitness;  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.0)*cs/damps));  bestFitness  =  bestFitness;  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.0)*cs/damps));  bestFitness  =  bestFitness;	  sigma    *=    Math.exp(Math.min(0.0,(normps/chiN    -    1.0)*cs/damps));    bestFitness    =    bestFitness;    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  bestValue  =  Math.max(bestFitness,  0);  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  Math.max(bestFitness,  0);  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  Math.max(bestFitness,  0);	  bestValue    =    Math.min(bestFitness,    worstFitness);    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1  -  1)*cs/damps));  [CE]  [FE]              AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1  -  1)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1  -  1)*cs/damps));	  sigma    *=    Math.exp(Math.min(1.0,(hsig/chiN    -    1.)*cs/damps));    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  bestValue  =  Math.min(sigma,  worstFitness);  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  Math.min(sigma,  worstFitness);  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  Math.min(sigma,  worstFitness);	  bestValue    =    Math.min(sigma,    bestFitness);    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(hsig/chiN  -  1.)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(hsig/chiN  -  1.)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  sigma  *  Math.exp(Math.min(1.0,(hsig/chiN  -  1.)*cs/damps));	  bestValue    =    sigma    *    Math.exp(Math.min(1.0,(normps/chiN    -    1.)*cs/damps));    	non-compiled	[CE]  	17	None	replace
15	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(0.0,(normps/chiN  -  1.0)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(0.0,(normps/chiN  -  1.0)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(0.0,(normps/chiN  -  1.0)*cs/damps));	  sigma    *=    Math.exp(Math.min(0.0,(normps/chiN    -    1.0)*cs/damps));    bestFitness    =    bestFitness;    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps  -  bestFitness)*cs/damps));  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps  -  bestFitness)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps  -  bestFitness)*cs/damps));	  sigma    *=    Math.exp(Math.min(1.0,(hsig    -    bestFitness)*cs/damps));    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps  -  worstFitness)*cs/damps));  [CE]  [FE]              AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps  -  worstFitness)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps  -  worstFitness)*cs/damps));	  sigma    *=    Math.exp(Math.min(1.0,(hsig    -    bestFitness)*cs/damps));    	non-compiled	[CE]  	18	None	replace
18	[BUG]  [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1.0)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1.0)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	sigma  *=  Math.exp(Math.min(1.0,(normps/damps  -  1.0)*cs/damps));	  sigma    *=    Math.exp(Math.min(1.0,(normps/chiN    -    1.0)*cs/damps));    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  bestValue  =  Math.max(bestFitness,  bestFitness);  [CE]  [FE]              AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  Math.max(bestFitness,  bestFitness);  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  Math.max(bestFitness,  bestFitness);	  bestValue    =    Math.max(bestFitness,    worstFitness);    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/damps));  [CE]  [FE]                AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/damps));  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  sigma  *  Math.exp(Math.min(1.0,(normps/damps  -  1.)*cs/damps));	  bestValue    =    sigma    *    Math.exp(Math.min(1.0,(normps/chiN    -    1.)*cs/damps));    	non-compiled	[CE]  	17	None	replace
21	[BUG]  [BUGGY]  bestValue  =  Math.max(bestValue,  sigma);  [CE]  [FE]            AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  Math.max(bestValue,  sigma);  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  Math.max(bestValue,  sigma);	  bestValue    =    Math.min(sigma,    bestFitness);    	non-compiled	[CE]  	13	None	replace
22	[BUG]  [BUGGY]  bestValue  =  Math.min(bestValue,  sigma);  [CE]  [FE]              AssertionError      [CONTEXT]      boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];      [BUGGY]  bestValue  =  Math.min(bestValue,  sigma);  [BUGGY]      if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  optimum  =  new  PointValuePair(  fitfun.repairAndDecode(bestArx.getColumn(0)),  isMinimize  ?  bestFitness  :  -bestFitness);  if  (getConvergenceChecker()  !=  null  &&  lastResult  !=  null)  {  if  (getConvergenceChecker().converged(iterations,  optimum,  lastResult))  {  break  generationLoop;  }  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	415	415	1	replace	bestValue  =  Math.min(bestValue,  sigma);	  bestValue    =    Math.min(sigma,    bestFitness);    	non-compiled	[CE]  	13	None	replace
