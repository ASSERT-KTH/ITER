bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  arindex,  hsig);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xold,  bestArx,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    arindex,    xold);    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  arindex,  hsig);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xmean,  bestArx,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    arindex,    xold);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  xold  =  zmean.multiply(weights,  diagnosticOnly);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  xold  =  zmean.multiply(weights,  diagnosticOnly);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	xold  =  zmean.multiply(weights,  diagnosticOnly);	      xold    =    zmean.multiply(weights);    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  diagD,  arindex,  hsig);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  diagD,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xmean,  bestArx,  diagD,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagD,    arindex,    xold);    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  diagD,  arindex,  hsig);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  diagD,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xold,  bestArx,  diagD,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagD,    arindex,    xold);    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  diagC,  arindex,  hsig);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  diagC,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xmean,  bestArx,  diagC,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagC,    arindex,    xold);    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  diagC,  arindex,  hsig);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  diagC,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xold,  bestArx,  diagC,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagC,    arindex,    xold);    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  hsig  =  updateDiagonalOnly(diagonalOnly,  zmean);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateDiagonalOnly(diagonalOnly,  zmean);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateDiagonalOnly(diagonalOnly,  zmean);	      hsig    =    updateDiagonalOnly(diagonalOnly,    xold);    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  hsig,  arindex);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xold,  bestArx,  hsig,  arindex);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xold,  bestArx,  hsig,  arindex);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xold,    arindex);    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(hsig,  bestArx,  zmean,  arindex);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(hsig,  bestArx,  zmean,  arindex);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(hsig,  bestArx,  zmean,  arindex);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xold,    arindex);    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  hsig  =  updateEvolutionPaths(diagonalOnly,  xmean);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateEvolutionPaths(diagonalOnly,  xmean);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateEvolutionPaths(diagonalOnly,  xmean);	      hsig    =    updateEvolutionPaths(zmean,    xold);    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  hsig  =  updateEvolutionPaths(diagonalOnly,  zmean);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateEvolutionPaths(diagonalOnly,  zmean);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateEvolutionPaths(diagonalOnly,  zmean);	      hsig    =    updateEvolutionPaths(diagonalOnly,    xold);    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  xold  =  sortedIndices(fitness);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  xold  =  sortedIndices(fitness);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	xold  =  sortedIndices(fitness);	      xold    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  xold  =  sortedIndices(diagonalOnly  +  1);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  xold  =  sortedIndices(diagonalOnly  +  1);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	xold  =  sortedIndices(diagonalOnly  +  1);	      xold    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  int  arindex  =  sortedIndices(fitness);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  int  arindex  =  sortedIndices(fitness);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	int  arindex  =  sortedIndices(fitness);	      int    arindex    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  int  arindex  =  sortedIndices(diagonalOnly  +  1);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  int  arindex  =  sortedIndices(diagonalOnly  +  1);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	int  arindex  =  sortedIndices(diagonalOnly  +  1);	      int    arindex    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(zmean,  xmean,  arindex,  hsig);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(zmean,  xmean,  arindex,  hsig);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(zmean,  xmean,  arindex,  hsig);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xmean,    arindex,    xold);    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  hsig  =  updateCovarianceDiagonalOnly(diagonalOnly,  xold);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateCovarianceDiagonalOnly(diagonalOnly,  xold);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateCovarianceDiagonalOnly(diagonalOnly,  xold);	      	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  xold,  arindex);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  xold,  arindex);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(diagonalOnly,  xold,  arindex);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xold,    arindex);    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  xold,  bestArx,  arindex);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  xold,  bestArx,  arindex);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(diagonalOnly,  xold,  bestArx,  arindex);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xold,    arindex);    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  hsig,  arindex,  xold);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(diagonalOnly,  hsig,  arindex,  xold);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(diagonalOnly,  hsig,  arindex,  xold);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagD,    arindex,    xold);    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  hsig,  arindex);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xmean,  bestArx,  hsig,  arindex);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xmean,  bestArx,  hsig,  arindex);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xmean,    arindex,    xold);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(zmean,  bestArx,  diagC,  arindex,  xold);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(zmean,  bestArx,  diagC,  arindex,  xold);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(zmean,  bestArx,  diagC,  arindex,  xold);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    diagC,    arindex,    xold);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  hsig  =  updateDiagonalOnly(diagonalOnly,  xmean);  [CE]  [FE]            AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateDiagonalOnly(diagonalOnly,  xmean);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateDiagonalOnly(diagonalOnly,  xmean);	      hsig    =    updateDiagonalOnly(diagonalOnly,    xold);    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  boolean  arindex  =  sortedIndices(diagonalOnly);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  boolean  arindex  =  sortedIndices(diagonalOnly);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	boolean  arindex  =  sortedIndices(diagonalOnly);	      int    arindex    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  xold  =  sortedIndices(fitness,  diagnosticOnly);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  xold  =  sortedIndices(fitness,  diagnosticOnly);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	xold  =  sortedIndices(fitness,  diagnosticOnly);	      xold    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  hsig  =  updateEvolutionPaths(zmean,  diagonalOnly);  [CE]  [FE]          AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  hsig  =  updateEvolutionPaths(zmean,  diagonalOnly);  [BUGGY]    updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	hsig  =  updateEvolutionPaths(zmean,  diagonalOnly);	      hsig    =    updateEvolutionPaths(zmean,    xold);    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  updateCovarianceDiagonalOnly(xmean,  hsig,  arindex,  xold);  [CE]  [FE]        AssertionError    [CONTEXT]      int[]  arindex  =  sortedIndices(fitness);  RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {    [BUGGY]  updateCovarianceDiagonalOnly(xmean,  hsig,  arindex,  xold);  [BUGGY]    }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  sigma  *=  Math.exp(Math.min(1.0,(normps/chiN  -  1.)*cs/damps));  double  bestFitness  =  fitness[arindex[0]];  double  worstFitness  =  fitness[arindex[arindex.length-1]];  if  (bestValue  >  bestFitness)  {  bestValue  =  bestFitness;  lastResult  =  optimum;  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	407	407	1	replace	updateCovarianceDiagonalOnly(xmean,  hsig,  arindex,  xold);	  updateCovarianceDiagonalOnly(hsig,    bestArx,    xmean,    arindex,    xold);    	non-compiled	[CE]  	9	None	replace
