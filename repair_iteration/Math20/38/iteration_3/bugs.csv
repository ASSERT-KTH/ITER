bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  diagnosticOnly);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  diagnosticOnly);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  arindex  =  sortedIndices(fitness,  diagnosticOnly);	  int[]    arindex    =    sortedIndices(diagonalOnly);    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  RealMatrix  xold  =  selectRows(arx,  MathArrays.copyOf(arindex,  0,  arindex));  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectRows(arx,  MathArrays.copyOf(arindex,  0,  arindex));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectRows(arx,  MathArrays.copyOf(arindex,  0,  arindex));	  RealMatrix    xold    =    selectRows(arx,    MathArrays.copyOf(arindex,    mu));    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights),  DEFAULT_ISACTIVECMA);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights),  DEFAULT_ISACTIVECMA);  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights),  DEFAULT_ISACTIVECMA);	  RealMatrix    xold    =    selectStatistics(arx,    MathUtils.multiply(weights),    DEFAULT_STOPFITNESS);    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  arindex));  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  arindex));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  arindex));	  RealMatrix    xold    =    selectStatistics(arx,    MathUtils.multiply(weights,    mu));    	non-compiled	[CE]  	18	None	replace
5	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  0,  arindex));  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  0,  arindex));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights,  0,  arindex));	  RealMatrix    xold    =    selectStatistics(arx,    MathUtils.multiply(weights,    mu));    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(arindex,  zmean);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(arindex,  zmean);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(arindex,  zmean);	  xmean    =    updateEvolutionPaths(zmean,    arx);    	non-compiled	[CE]  	22	None	replace
7	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));	  RealMatrix    xold    =    selectStatistics(arx,    MathArrays.copyOf(arindex,    0,    arindex));    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  arindex);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  arindex);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(diagonalOnly,  arindex);	  xmean    =    updateEvolutionPaths(diagonalOnly,    xmean);    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(zmean,fitness);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(zmean,fitness);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(zmean,fitness);	  xmean    =    updateEvolutionPaths(xmean,fitness);    	non-compiled	[CE]  	24	None	replace
10	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  arindex);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  arindex);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(xmean,  arindex);	  xmean    =    updateEvolutionPaths(xmean,fitness);    	non-compiled	[CE]  	24	None	replace
11	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  arindex  =  sortedIndices(diagonalOnly,  dataArea);	  int[]    arindex    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,fitness);  [CE]  [FE]                AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  arindex  =  sortedIndices(dataArea,fitness);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  arindex  =  sortedIndices(dataArea,fitness);	  int[]    arindex    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(fitness,  arindex);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  weights  =  sortedIndices(fitness,  arindex);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  weights  =  sortedIndices(fitness,  arindex);	  int[]    weights    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(dataArea,fitness);  [CE]  [FE]                AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  weights  =  sortedIndices(dataArea,fitness);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  weights  =  sortedIndices(dataArea,fitness);	  int[]    weights    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  0,  arindex  +  1));	  RealMatrix    xold    =    selectEvolutionPaths(arx,    MathArrays.copyOf(arindex,    0,    arindex));    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  DEFAULT_ISACTIVECMA);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  DEFAULT_ISACTIVECMA);  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  DEFAULT_ISACTIVECMA);	  RealMatrix    xold    =    selectEvolutionPaths(arx,    MathArrays.copyOf(arindex,    mu),    DEFAULT_STOPFITNESS);    	non-compiled	[CE]  	25	None	replace
17	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(arx,  zmean);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(arx,  zmean);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(arx,  zmean);	  xmean    =    updateEvolutionPaths(zmean,    arindex);    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  int[]  weights  =  sortedIndices(diagonalOnly,  dataArea);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  weights  =  sortedIndices(diagonalOnly,  dataArea);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  weights  =  sortedIndices(diagonalOnly,  dataArea);	  int[]    weights    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  Math.pow(10,  arindex));  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  Math.pow(10,  arindex));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  Math.pow(10,  arindex));	  RealMatrix    xold    =    selectStatistics(arx,    MathArrays.copyOf(arindex,    arindex));    	non-compiled	[CE]  	14	None	replace
20	[BUG]  [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  this);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  this);  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectEvolutionPaths(arx,  MathArrays.copyOf(arindex,  mu),  this);	  RealMatrix    xold    =    selectEvolutionPaths(arx,    MathArrays.copyOf(arindex,    mu),    DEFAULT_STOPFITNESS);    	non-compiled	[CE]  	25	None	replace
21	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights)/  2,  DEFAULT_STOPFITNESS);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights)/  2,  DEFAULT_STOPFITNESS);  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathUtils.multiply(weights)/  2,  DEFAULT_STOPFITNESS);	  RealMatrix    xold    =    selectStatistics(arx,    MathUtils.multiply(weights),    DEFAULT_STOPFITNESS);    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  xold);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(xmean,  xold);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(xmean,  xold);	  xmean    =    updateEvolutionPaths(xmean,fitness);    	non-compiled	[CE]  	24	None	replace
23	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  xold,  arindex);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(diagonalOnly,  xold,  arindex);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(diagonalOnly,  xold,  arindex);	  xmean    =    updateEvolutionPaths(diagonalOnly,    xold);    	non-compiled	[CE]  	17	None	replace
24	[BUG]  [BUGGY]  xmean  =  updateEvolutionPaths(arx,  xold);  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  xmean  =  updateEvolutionPaths(arx,  xold);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	xmean  =  updateEvolutionPaths(arx,  xold);	  xmean    =    updateEvolutionPaths(arx,    xmean);    	non-compiled	[CE]  	21	None	replace
25	[BUG]  [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.copyOf(arindex,  mu));  [CE]  [FE]            AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  RealMatrix  xold  =  selectStatistics(arx,  MathUtils.copyOf(arindex,  mu));  [BUGGY]      RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	RealMatrix  xold  =  selectStatistics(arx,  MathUtils.copyOf(arindex,  mu));	  RealMatrix    xold    =    selectStatistics(arx,    MathUtils.multiply(weights,    mu));    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitnessType);  [CE]  [FE]              AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitnessType);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitnessType);	  int[]    arindex    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitfun);  [CE]  [FE]                AssertionError      [CONTEXT]      copyColumn(arxk,  0,  arx,  k);  try  {  fitness[k]  =  fitfun.value(arx.getColumn(k));  //  compute  fitness  }  catch  (TooManyEvaluationsException  e)  {  break  generationLoop;  }  }  int[]  arindex  =  sortedIndices(fitness);        [BUGGY]  int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitfun);  [BUGGY]      RealMatrix  xold  =  xmean;  //  for  speed  up  of  Eq.  (2)  and  (3)    RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  RealMatrix  bestArx  =  selectColumns(arx,  MathArrays.copyOf(arindex,  mu));  xmean  =  bestArx.multiply(weights);  RealMatrix  bestArz  =  selectColumns(arz,  MathArrays.copyOf(arindex,  mu));  RealMatrix  zmean  =  bestArz.multiply(weights);  boolean  hsig  =  updateEvolutionPaths(zmean,  xold);  if  (diagonalOnly  <=  0)  {  updateCovariance(hsig,  bestArx,  arz,  arindex,  xold);  }  else  {  updateCovarianceDiagonalOnly(hsig,  bestArz,  xold);  }  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	400	401	1	replace	int[]  arindex  =  sortedIndices(fitness,  dataArea,  fitfun);	  int[]    arindex    =    sortedIndices(fitness,    dataArea);    	non-compiled	[CE]  	4	None	replace
