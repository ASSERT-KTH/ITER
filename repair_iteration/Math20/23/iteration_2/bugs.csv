bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  luate(iterations,  isActiveCMA))  {  addFitness(optimum);  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  luate(iterations,  isActiveCMA))  {  addFitness(optimum);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	luate(iterations,  isActiveCMA))  {  addFitness(optimum);	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    addFitness(optimum);    }    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  luate(iterations,  isActiveCMA))  {  addFitness(optimum);  }  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  luate(iterations,  isActiveCMA))  {  addFitness(optimum);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	luate(iterations,  isActiveCMA))  {  addFitness(optimum);  }	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    addFitness(optimum);    }    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize);    }    	non-compiled	[CE]  	12	None	replace
4	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize);    }    	non-compiled	[CE]  	12	None	replace
5	[BUG]  [BUGGY]  int[]  maxIterations  =  optimum.getMaximumIterations();  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  int[]  maxIterations  =  optimum.getMaximumIterations();  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	int[]  maxIterations  =  optimum.getMaximumIterations();	      	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  int[]  maxIterations  =  getMaximumIterations();  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  int[]  maxIterations  =  getMaximumIterations();  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	int[]  maxIterations  =  getMaximumIterations();	      	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize,  optimale);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }	      if(maxIterations    >    0)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  Iterator  <  PointValuePair>  iterations  =  maxIterations.iterator();  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Iterator  <  PointValuePair>  iterations  =  maxIterations.iterator();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Iterator  <  PointValuePair>  iterations  =  maxIterations.iterator();	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  Iterator  <  PointValuePair>  iterations  =  getStartPoint().iterator();  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Iterator  <  PointValuePair>  iterations  =  getStartPoint().iterator();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Iterator  <  PointValuePair>  iterations  =  getStartPoint().iterator();	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  optimum.addValue(isMinimize);  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimum.addValue(isMinimize);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimum.addValue(isMinimize);	      optimum.addValue(optimize);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  optimised.addValue(optimize);  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimised.addValue(optimize);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimised.addValue(optimize);	      optimum.addValue(optimize);    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  optimum.add(bestValue);  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimum.add(bestValue);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimum.add(bestValue);	      optimum.addValue(bestValue);    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	For(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  PointValuePair  lastResult  =  new  PointValuePair(getStartPoint(),  isMinimize?  bestValue  :  optimum);  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  PointValuePair  lastResult  =  new  PointValuePair(getStartPoint(),  isMinimize?  bestValue  :  optimum);  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	PointValuePair  lastResult  =  new  PointValuePair(getStartPoint(),  isMinimize?  bestValue  :  optimum);	  PointValuePair    lastResult    =    optimum;    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }	      if(maxIterations    >    0)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimal);  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimal);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimal);  }	      if(maxIterations    >    0)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  Magimize.checkState(isActiveCMA);  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Magimize.checkState(isActiveCMA);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Magimize.checkState(isActiveCMA);	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  Magimize.checkNotNull(optimum);  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Magimize.checkNotNull(optimum);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Magimize.checkNotNull(optimum);	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  PointValuePair  lastResult  =  bestValue;  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  PointValuePair  lastResult  =  bestValue;  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	PointValuePair  lastResult  =  bestValue;	  PointValuePair    lastResult    =    optimum;    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  optimum.addValue(isMinimize?  bestValue  :  bestValue);  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimum.addValue(isMinimize?  bestValue  :  bestValue);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimum.addValue(isMinimize?  bestValue  :  bestValue);	      optimum.addValue(bestValue);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  optimum.addValue(isMinimize?  bestValue  :  -bestValue);  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimum.addValue(isMinimize?  bestValue  :  -bestValue);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimum.addValue(isMinimize?  bestValue  :  -bestValue);	      optimum.addValue(bestValue);    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  MagimizeGenerator  <?>  generationLoop:  isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MagimizeGenerator  <?>  generationLoop:  isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MagimizeGenerator  <?>  generationLoop:  isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    addFitness(optimum);    }    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  MagimizeGenerator  <?>  generationLoop:  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MagimizeGenerator  <?>  generationLoop:  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MagimizeGenerator  <?>  generationLoop:  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    addFitness(optimum);    }    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  MagimizeHistory  generation  =  getGenericStatistics();  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MagimizeHistory  generation  =  getGenericStatistics();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MagimizeHistory  generation  =  getGenericStatistics();	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  MagimizeHistory  generationHistory  =  getGenericShapeHistory();  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MagimizeHistory  generationHistory  =  getGenericShapeHistory();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MagimizeHistory  generationHistory  =  getGenericShapeHistory();	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	10	None	replace
29	[BUG]  [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  bestValue);  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  int  maxIterations  =  Math.max(maxIterations,  bestValue);  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	int  maxIterations  =  Math.max(maxIterations,  bestValue);	      	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  int  maxIterations  =  getMaximumIterations();  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  int  maxIterations  =  getMaximumIterations();  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	int  maxIterations  =  getMaximumIterations();	      	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  optimum.addValue(value);  [CE]  [FE]          AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  optimum.addValue(value);  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	optimum.addValue(value);	      optimum.addValue(maximize);    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize);    }    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(generationHistory,  optimal);  }  [CE]  [FE]              AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(generationHistory,  optimal);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(generationHistory,  optimal);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize);    }    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  Iterator  <  PointValuePair>  iterator  =  getStartPoint().iterator();  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Iterator  <  PointValuePair>  iterator  =  getStartPoint().iterator();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Iterator  <  PointValuePair>  iterator  =  getStartPoint().iterator();	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	MutableIterator  <  PointValuePair>  generationLoop:  for(int  iterations  =  1;  iterations  <  =  maxIterations;  iterations++)  {  push(optimize);  }	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize);    }    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  Iterator  <  PointValuePair>  iterator  =  this.generationLoops.iterator();  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Iterator  <  PointValuePair>  iterator  =  this.generationLoops.iterator();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Iterator  <  PointValuePair>  iterator  =  this.generationLoops.iterator();	      if(optimum!=    null)    {    for(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    push(optimize,    optimale);    }    	non-compiled	[CE]  	10	None	replace
37	[BUG]  [BUGGY]  Iterator  <  PointValuePair>  iterator  =  this.generationLoop.iterator();  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  Iterator  <  PointValuePair>  iterator  =  this.generationLoop.iterator();  [BUGGY]    PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	Iterator  <  PointValuePair>  iterator  =  this.generationLoop.iterator();	      if(isActiveCMA)    {    for(int    iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    addFitness(optimum);    }    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  int  maxIterations  =  getMaxIterations();  [CE]  [FE]            AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  int  maxIterations  =  getMaxIterations();  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	int  maxIterations  =  getMaxIterations();	      	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  PointValuePair  lastResult  =  optimum.lastResult;  [CE]  [FE]        AssertionError    [CONTEXT]    final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);    [BUGGY]  PointValuePair  lastResult  =  optimum.lastResult;  [BUGGY]      generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	PointValuePair  lastResult  =  optimum.lastResult;	  PointValuePair    lastResult    =    optimum;    	non-compiled	[CE]  	1	None	replace
