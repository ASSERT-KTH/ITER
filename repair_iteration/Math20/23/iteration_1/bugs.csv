bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  PointValuePair  lastResult  =  optimum;  [CE]  [FE]    AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]  PointValuePair  lastResult  =  optimum;  [BUGGY]    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	PointValuePair  lastResult  =  optimum;	PointValuePair  lastResult  =  null;  	non-compiled	[CE]  	46	None	replace
2	[BUG]  [BUGGY]  PointValuePair  lastResult  =  optimal;  [CE]  [FE]      AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]  PointValuePair  lastResult  =  optimal;  [BUGGY]    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	PointValuePair  lastResult  =  optimal;	PointValuePair  lastResult  =  null;  	non-compiled	[CE]  	46	None	replace
3	[BUG]  [BUGGY]    [CE]  [FE]        AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    [BUGGY]    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	  	PointValuePair  lastResult  =  null;  	non-compiled	[CE]  	46	None	replace
4	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	47	None	add
5	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  	47	None	add
6	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [CE]  [FE]        AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(isActiveCMA)  {  for(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  addFitness(optimum);  }		non-compiled	[CE]  	47	None	add
7	[BUG]  [BUGGY]    optimum.addValue(bestValue);  [CE]  [FE]    AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    optimum.addValue(bestValue);  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    optimum.addValue(bestValue);		non-compiled	[CE]  	47	None	add
8	[BUG]  [BUGGY]    optimum.addValue(maximize);  [CE]  [FE]      AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    optimum.addValue(maximize);  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    optimum.addValue(maximize);		non-compiled	[CE]  	47	None	add
9	[BUG]  [BUGGY]    optimum.addValue(optimize);  [CE]  [FE]        AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    optimum.addValue(optimize);  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    optimum.addValue(optimize);		non-compiled	[CE]  	47	None	add
10	[BUG]  [BUGGY]    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]    AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }		non-compiled	[CE]  	47	None	add
11	[BUG]  [BUGGY]    if(maxIterations  >  0)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [CE]  [FE]      AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(maxIterations  >  0)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(maxIterations  >  0)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize,  optimale);  }		non-compiled	[CE]  	47	None	add
12	[BUG]  [BUGGY]    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [CE]  [FE]        AssertionError  [CONTEXT]  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [BUGGY]    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }  [BUGGY]  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  double[]  fitness  =  new  double[lambda];  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	363	363	1	replace	    if(optimum!=  null)  {  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  push(optimize);  }		non-compiled	[CE]  	47	None	add
