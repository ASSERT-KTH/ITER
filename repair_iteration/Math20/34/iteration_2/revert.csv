projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i==checkFeasableCount||fitfun.isFeasible(arxk.getColumn(0))){arxk=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));}
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390if(i==checkFeasableCount||fitfun.isFeasible(arxk.getColumn(0))){arxk=xmean.add(times(diagD,arz.getRowMatrix(k)).scalarMultiply(sigma));}
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arx,k);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,k);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,k);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxk=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxk=xmean.add(times(diagD,arz.getRowMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxk=xmean.add(times(diagD,arz.getRangeMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arx,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390k=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390k=xmean.add(times(diagD,arz.getRowMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arx,dimension);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390Arxk=zmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,dimension);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,dimension);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390k=zmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390arxk=xmean.add(times(diagD,arz.getColumnMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arx,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,i+1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,2);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arx,arindex);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz.length,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390k=zmean.add(times(diagD,arz.getRowMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz.length-1,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz.length,1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,arz);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,dimension+1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,0);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,2);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arindex,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390scanRange(arxk,0,arindex,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,scale);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,0);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390arxk=xmean.add(times(diagD,arz.getRowMatrix(k)).scalarMultiply(sigma));
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arz,0,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390scan(arxk,0,arx,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,sigma);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,0,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arx,arindex);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,sigma);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,1,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz.length,2);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,i*1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arz.length,i);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyRange(arxk,0,arz,1);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arz,3);
projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java390copyColumn(arxk,0,arindex,3);
