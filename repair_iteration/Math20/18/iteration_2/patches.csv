bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[i]));  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[i]));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[i]));	  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[i]));    	non-compiled	[CE]  	27	None	replace
2	[BUG]  [BUGGY]  Injectables.checkState(dimension  ==  1);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Injectables.checkState(dimension  ==  1);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Injectables.checkState(dimension  ==  1);	  Injectables.checkState(dimension    ==    0);    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  Injectables.checkNotNull(dimension);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Injectables.checkNotNull(dimension);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Injectables.checkNotNull(dimension);	  Injectables.checkNotNull(guess);    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  Injectables.checkArgument(dimension!=  null);  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Injectables.checkArgument(dimension!=  null);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Injectables.checkArgument(dimension!=  null);	  Injectables.checkNotNull(guess);    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  validate(guess,  dimension,  iterations);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  validate(guess,  dimension,  iterations);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	validate(guess,  dimension,  iterations);	  validate(guess,    dimension);    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  Integer  i  =  getInitialValue().doubleValue();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  i  =  getInitialValue().doubleValue();  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  i  =  getInitialValue().doubleValue();	  Integer    i    =    getInitialValue();    	non-compiled	[CE]  	17	None	replace
7	[BUG]  [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[1]));  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[1]));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.this.addFitness(fitfun.value(dimension[1]));	  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[0]));    	non-compiled	[CE]  	28	None	replace
8	[BUG]  [BUGGY]  MutableFitnessHistory.checkState(dimension  ==  1);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.checkState(dimension  ==  1);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.checkState(dimension  ==  1);	  MutableFitnessHistory.checkState(dimension    ==    0);    	non-compiled	[CE]  	25	None	replace
9	[BUG]  [BUGGY]  luate(guess);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  luate(guess);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	luate(guess);	  luate(dimension);    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  Integer  bestValue  =  getMaximumValue();  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  bestValue  =  getMaximumValue();  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  bestValue  =  getMaximumValue();	  Integer    bestValue    =    getMinimumValue();    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  ensureCapacity(dimension  -  2);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  ensureCapacity(dimension  -  2);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	ensureCapacity(dimension  -  2);	  ensureCapacity(dimension    -    1);    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  double  bestValue  =  fitfun.value(dimension  -  1);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  double  bestValue  =  fitfun.value(dimension  -  1);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	double  bestValue  =  fitfun.value(dimension  -  1);	  double    bestValue    =    fitfun.value(dimension);    	non-compiled	[CE]  	29	None	replace
13	[BUG]  [BUGGY]  int  dimensions  =  getDimensions()  -  1;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  int  dimensions  =  getDimensions()  -  1;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	int  dimensions  =  getDimensions()  -  1;	  int    dimensions    =    getDimensions();    	non-compiled	[CE]  	18	None	replace
14	[BUG]  [BUGGY]  int  dimensions  =  getDimensions()  +  1;  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  int  dimensions  =  getDimensions()  +  1;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	int  dimensions  =  getDimensions()  +  1;	  int    dimensions    =    getDimensions();    	non-compiled	[CE]  	18	None	replace
15	[BUG]  [BUGGY]  int  dimension  =  guess.length;  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  int  dimension  =  guess.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	int  dimension  =  guess.length;	  int    dimension    =    dimension.length;    	non-compiled	[CE]  	19	None	replace
16	[BUG]  [BUGGY]  double  dimension  =  dimension.length;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  double  dimension  =  dimension.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	double  dimension  =  dimension.length;	  int    dimension    =    dimension.length;    	non-compiled	[CE]  	19	None	replace
17	[BUG]  [BUGGY]  Integer  bestValue  =  getStandardValue()  -  dimension;  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  bestValue  =  getStandardValue()  -  dimension;  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  bestValue  =  getStandardValue()  -  dimension;	  Integer    bestValue    =    getStandardValue();    	non-compiled	[CE]  	15	None	replace
18	[BUG]  [BUGGY]  checkParameter(guess);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  checkParameter(guess);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	checkParameter(guess);	  checkParameter(dimension);    	non-compiled	[CE]  	20	None	replace
19	[BUG]  [BUGGY]  Dimension  dimension  =  fitfun.getWidth();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  fitfun.getWidth();  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  fitfun.getWidth();	  Dimension    dimension    =    dimension.getWidth();    	non-compiled	[CE]  	13	None	replace
20	[BUG]  [BUGGY]  Dimension  dimension  =  guess.getWidth();  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  guess.getWidth();  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  guess.getWidth();	  Dimension    dimension    =    dimension.getWidth();    	non-compiled	[CE]  	13	None	replace
21	[BUG]  [BUGGY]  ensureCapacity(dimension,  dimension[i]);  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  ensureCapacity(dimension,  dimension[i]);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	ensureCapacity(dimension,  dimension[i]);	  if(dimension!=    0)    {    for(int    i    =    0;    i    <    dimension.length;    ++i)    {    ensureCapacity(i,    dimension[i]);    }    	non-compiled	[CE]  	30	None	replace
22	[BUG]  [BUGGY]  ensureCapacity(dimension,  dimension[0]);  [CE]  [FE]                    AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  ensureCapacity(dimension,  dimension[0]);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	ensureCapacity(dimension,  dimension[0]);	  if(dimension!=    0)    {    for(int    i    =    0;    i    <    dimension.length;    ++i)    {    ensureCapacity(i,    dimension[i]);    }    	non-compiled	[CE]  	30	None	replace
23	[BUG]  [BUGGY]  Dimension  dimension  =  guess.length;  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  guess.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  guess.length;	  Dimension    dimension    =    dimension.length;    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  Dimension  dimension  =  fitfun.length;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  fitfun.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  fitfun.length;	  Dimension    dimension    =    dimension.length;    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  Integer[]  dimensions  =  fitfun.encode(getDimensions());  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer[]  dimensions  =  fitfun.encode(getDimensions());  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer[]  dimensions  =  fitfun.encode(getDimensions());	  Integer[]    dimensions    =    fitfun.getDimensions();    	non-compiled	[CE]  	22	None	replace
26	[BUG]  [BUGGY]  dimension  =  guess.length;  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  dimension  =  guess.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	dimension  =  guess.length;	  dimension    =    dimension.length;    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  dimension  -=  dimension.length;  [CE]  [FE]                    AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  dimension  -=  dimension.length;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	dimension  -=  dimension.length;	  dimension    =    dimension.length;    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  Integer  initializeCMA(guess);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  initializeCMA(guess);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  initializeCMA(guess);	  Integer    initializeCMA(dimension);    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  Integer  initializeCMA(guess,  dimension);  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  initializeCMA(guess,  dimension);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  initializeCMA(guess,  dimension);	  Integer    initializeCMA(dimension);    	non-compiled	[CE]  	14	None	replace
30	[BUG]  [BUGGY]  Integer  i  =  addFitness(fitfun.value(dimension));  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  i  =  addFitness(fitfun.value(dimension));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  i  =  addFitness(fitfun.value(dimension));	  Integer    i    =    addFitness(fitfun.value(dimension);    	non-compiled	[CE]  	21	None	replace
31	[BUG]  [BUGGY]  Integer  i  =  addFitness(fitfun.value(dimension  +  1));  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  i  =  addFitness(fitfun.value(dimension  +  1));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  i  =  addFitness(fitfun.value(dimension  +  1));	  Integer    i    =    addFitness(fitfun.value(dimension);    	non-compiled	[CE]  	21	None	replace
32	[BUG]  [BUGGY]  nested  =  false;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  nested  =  false;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	nested  =  false;	  nested    =    true;    	non-compiled	[CE]  	10	None	replace
33	[BUG]  [BUGGY]  Injectables.checkArgument(dimension!=  0);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Injectables.checkArgument(dimension!=  0);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Injectables.checkArgument(dimension!=  0);	  Injectables.checkNotNull(guess);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  luate(dimension,  guess);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  luate(dimension,  guess);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	luate(dimension,  guess);	  luate(dimension);    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  int  dimensions  =  getDimensions()  +  dimension;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  int  dimensions  =  getDimensions()  +  dimension;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	int  dimensions  =  getDimensions()  +  dimension;	  int    dimensions    =    getDimensions();    	non-compiled	[CE]  	18	None	replace
36	[BUG]  [BUGGY]  int  dimensions  =  getDimensions()  -  dimension;  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  int  dimensions  =  getDimensions()  -  dimension;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	int  dimensions  =  getDimensions()  -  dimension;	  int    dimensions    =    getDimensions();    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  luate(guess,  dimension);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  luate(guess,  dimension);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	luate(guess,  dimension);	  if(dimension    ==    0)    {    validate(guess);    }    else    {    checkParameters();    }    	non-compiled	[CE]  	24	None	replace
38	[BUG]  [BUGGY]  Integer  initializeCMA(dimension,  guess);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  initializeCMA(dimension,  guess);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  initializeCMA(dimension,  guess);	  Integer    initializeCMA(dimension);    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  Dimension  dimension  =  dimension.length  -  1;  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  dimension.length  -  1;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  dimension.length  -  1;	  Dimension    dimension    =    dimension.length;    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  Integer  i  =  getInitialValue()  +  dimension;  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  i  =  getInitialValue()  +  dimension;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  i  =  getInitialValue()  +  dimension;	  Integer    i    =    getInitialValue();    	non-compiled	[CE]  	17	None	replace
41	[BUG]  [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[i]));  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[i]));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[i]));	  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[i]));    	non-compiled	[CE]  	27	None	replace
42	[BUG]  [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[0]));  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[0]));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  dimension[0]));	  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[0]));    	non-compiled	[CE]  	28	None	replace
43	[BUG]  [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[0]));  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[0]));  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.this.addFitness(fitfun.value(dimension,  guess[0]));	  MutableFitnessHistory.this.addFitness(fitfun.value(dimension[0]));    	non-compiled	[CE]  	28	None	replace
44	[BUG]  [BUGGY]  Dimension  dimension  =  data.getWidth();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  data.getWidth();  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  data.getWidth();	  Dimension    dimension    =    dimension.getWidth();    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  validate(dimension,  guess);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  validate(dimension,  guess);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	validate(dimension,  guess);	  validate(dimension);    	non-compiled	[CE]  	11	None	replace
46	[BUG]  [BUGGY]  dimension  =  dimension.length  -  1;  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  dimension  =  dimension.length  -  1;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	dimension  =  dimension.length  -  1;	  dimension    =    dimension.length;    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  Integer  bestValue  =  getStandardValue()  +  dimension;  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  bestValue  =  getStandardValue()  +  dimension;  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  bestValue  =  getStandardValue()  +  dimension;	  Integer    bestValue    =    getStandardValue();    	non-compiled	[CE]  	15	None	replace
48	[BUG]  [BUGGY]  ensureCapacity(dimension  *  1);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  ensureCapacity(dimension  *  1);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	ensureCapacity(dimension  *  1);	  ensureCapacity(dimension    -    1);    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  Integer  bestValue  =  getStandardValue(dimension);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Integer  bestValue  =  getStandardValue(dimension);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Integer  bestValue  =  getStandardValue(dimension);	  Integer    bestValue    =    getStandardValue();    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  checkInputStatistics();  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  checkInputStatistics();  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	checkInputStatistics();	  checkStatistics();    	non-compiled	[CE]  	8	None	replace
51	[BUG]  [BUGGY]  Dimension  dimension  =  dimension.getHeight();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Dimension  dimension  =  dimension.getHeight();  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Dimension  dimension  =  dimension.getHeight();	  Dimension    dimension    =    dimension.getWidth();    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  validate(guess,  dimension,  0);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  validate(guess,  dimension,  0);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	validate(guess,  dimension,  0);	  validate(guess,    dimension);    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  checkParameters(dimension);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  checkParameters(dimension);  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	checkParameters(dimension);	  checkParameter(dimension);    	non-compiled	[CE]  	20	None	replace
54	[BUG]  [BUGGY]  if(dimension!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  if(dimension!=  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	if(dimension!=  1)  {  throw  new  IllegalArgumentException( " ");  }	  luate();    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  MutableFitnessHistory.checkState(dimension!=  1);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  MutableFitnessHistory.checkState(dimension!=  1);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	MutableFitnessHistory.checkState(dimension!=  1);	  MutableFitnessHistory.checkState(dimension!=    0);    	non-compiled	[CE]  	26	None	replace
56	[BUG]  [BUGGY]  Iterator  <  Dimension>  iterations  =  dimension.iterator();  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Iterator  <  Dimension>  iterations  =  dimension.iterator();  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Iterator  <  Dimension>  iterations  =  dimension.iterator();	  if(dimension!=    0)    {    for(int    i    =    0;    i    <    dimension.length;    ++i)    {    ensureCapacity(i,    dimension[i]);    }    	non-compiled	[CE]  	30	None	replace
57	[BUG]  [BUGGY]  Iterations  =  dimension.iterator().next();  [CE]  [FE]                    AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  Iterations  =  dimension.iterator().next();  [BUGGY]      iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	Iterations  =  dimension.iterator().next();	  if(dimension!=    0)    {    for(int    i    =    0;    i    <    dimension.length;    ++i)    {    ensureCapacity(i,    dimension[i]);    }    	non-compiled	[CE]  	30	None	replace
58	[BUG]  [BUGGY]  luate(dimension,  true);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  luate(dimension,  true);  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	luate(dimension,  true);	  luate(dimension);    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  dimension  =  dimension!=  null?  dimension.length  :  1;  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();  isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;      [BUGGY]  dimension  =  dimension!=  null?  dimension.length  :  1;  [BUGGY]      initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	357	357	1	replace	dimension  =  dimension!=  null?  dimension.length  :  1;	  dimension    =    dimension.length;    	non-compiled	[CE]  	2	None	replace
