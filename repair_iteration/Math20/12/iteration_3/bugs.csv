bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  hasInfiniteBounds  =  false;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  hasInfiniteBounds  =  false;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	hasInfiniteBounds  =  false;	  lB[i]    =    lB[i].getStandardFitness();    hasInfiniteBounds    =    false;    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  lB[i]  =  uB[i].getFiniteBounds();  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  lB[i]  =  uB[i].getFiniteBounds();  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	lB[i]  =  uB[i].getFiniteBounds();	  lB[i]    =    uB[i].getStandardFitness();    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  lB[i]  =  uB[i].getFitness();  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  lB[i]  =  uB[i].getFitness();  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	lB[i]  =  uB[i].getFitness();	  lB[i]    =    lB[i].getFitness();    	non-compiled	[CE]  	22	None	replace
4	[BUG]  [BUGGY]  ((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    break;    }    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(uB[i]  +  1);  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFiniteBounds(uB[i]  +  1);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFiniteBounds(uB[i]  +  1);	  ((    Double)lB[i]).setFiniteBounds(uB[i]);    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  ((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  lB[i]  <  <  1)||(uB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    	non-compiled	[CE]  	18	None	replace
7	[BUG]  [BUGGY]  ((  lB[i]  <  <  2)||(uB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  [CE]  [FE]                  AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  lB[i]  <  <  2)||(uB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  lB[i]  <  <  2)||(uB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    	non-compiled	[CE]  	18	None	replace
8	[BUG]  [BUGGY]  if(!Double.isInfinite(lB[i])||!Double.isInfinite(uB[i]))  {  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(!Double.isInfinite(lB[i])||!Double.isInfinite(uB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(!Double.isInfinite(lB[i])||!Double.isInfinite(uB[i]))  {	  if(!Double.isNaN(lB[i])||!Double.isInfinite(uB[i]))    {    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  ((  Double)lB[i]).doubleValue()  +  1;  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).doubleValue()  +  1;  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).doubleValue()  +  1;	  ((    Double)lB[i]).doubleValue();    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  ((  Double)lB[i]).setFitness(true);  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFitness(true);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFitness(true);	  ((    Double)lB[i]).setFitness(false);    	non-compiled	[CE]  	21	None	replace
11	[BUG]  [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;  [CE]  [FE]                  AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;	  ((    uB[i]    <    <    1)||(lB[i]    >=    uB[i]))    {    hasInfiniteBounds    =    true;    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  ((  Double)uB[i]).setFiniteBounds(true);  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)uB[i]).setFiniteBounds(true);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)uB[i]).setFiniteBounds(true);	  ((    Double)uB[i]).setFiniteBounds(false);    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(false,  uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFiniteBounds(false,  uB[i]);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFiniteBounds(false,  uB[i]);	  ((    Double)lB[i]).setFiniteBounds(true);    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  ((  lB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  false;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  lB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  false;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  lB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  false;	  ((    lB[i]    <    <    1)||(lB[i]    >    uB[i]))    {    hasInfiniteBounds    =    true;    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  if(!Double.isNaN(lB[i])&&!Double.isInfinite(uB[i]))  {  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(!Double.isNaN(lB[i])&&!Double.isInfinite(uB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(!Double.isNaN(lB[i])&&!Double.isInfinite(uB[i]))  {	  if(Double.isNaN(lB[i])&&    Double.isInfinite(uB[i]))    {    	non-compiled	[CE]  	19	None	replace
16	[BUG]  [BUGGY]  if(!Double.isNaN(lB[i])||  Double.isInfinite(uB[i]))  {  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(!Double.isNaN(lB[i])||  Double.isInfinite(uB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(!Double.isNaN(lB[i])||  Double.isInfinite(uB[i]))  {	  if(!Double.isNaN(lB[i])&&    Double.isInfinite(uB[i]))    {    	non-compiled	[CE]  	20	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(lB[i])||  Double.isInfinite(lB[i]))  {  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(Double.isNaN(lB[i])||  Double.isInfinite(lB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(Double.isNaN(lB[i])||  Double.isInfinite(lB[i]))  {	  if(Double.isNaN(uB[i])||    Double.isNaN(lB[i]))    {    	non-compiled	[CE]  	23	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(uB[i])&&  Double.isInfinite(lB[i]))  {  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(Double.isNaN(uB[i])&&  Double.isInfinite(lB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(Double.isNaN(uB[i])&&  Double.isInfinite(lB[i]))  {	  if(Double.isNaN(lB[i])&&    Double.isNaN(uB[i]))    {    	non-compiled	[CE]  	15	None	replace
19	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(hasInfiniteBounds?  true  :  true);  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFiniteBounds(hasInfiniteBounds?  true  :  true);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFiniteBounds(hasInfiniteBounds?  true  :  true);	  ((    Double)lB[i]).setFiniteBounds(hasInfiniteBounds?    false    :    false);    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    	non-compiled	[CE]  	18	None	replace
21	[BUG]  [BUGGY]  lB[i]  =  uB[i].getStandardFitness();  hasInfiniteBounds  =  false;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  lB[i]  =  uB[i].getStandardFitness();  hasInfiniteBounds  =  false;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	lB[i]  =  uB[i].getStandardFitness();  hasInfiniteBounds  =  false;	  lB[i]    =    lB[i].getStandardFitness();    hasInfiniteBounds    =    false;    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  haveInfiniteBounds  =  false;  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  haveInfiniteBounds  =  false;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	haveInfiniteBounds  =  false;	  hasInfiniteBounds    =    true;    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  uB[i]  <  <  1)||(lB[i]  >=  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    break;    }    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  uB[i]  <  <  1)||(lB[i]  >  uB[i]))  {  hasInfiniteBounds  =  true;  break;  }	  ((    lB[i]    <    <    1)||(lB[i]    >    uB[i]))    {    hasInfiniteBounds    =    true;    break;    }    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  ((  Double)uB[i]).doubleValue();  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)uB[i]).doubleValue();  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)uB[i]).doubleValue();	  ((    Double)lB[i]).doubleValue();    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  ((  Double)lB[i]).setFiniteBounds(true,  uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFiniteBounds(true,  uB[i]);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFiniteBounds(true,  uB[i]);	  ((    Double)lB[i]).setFiniteBounds(true);    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  if(!Double.isNaN(uB[i])||  Double.isInfinite(uB[i]))  {  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(!Double.isNaN(uB[i])||  Double.isInfinite(uB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(!Double.isNaN(uB[i])||  Double.isInfinite(uB[i]))  {	  if(!Double.isNaN(lB[i])&&    Double.isInfinite(uB[i]))    {    	non-compiled	[CE]  	20	None	replace
28	[BUG]  [BUGGY]  if(Double.isNaN(uB[i])||  Double.isInfinite(lB[i]))  {  [CE]  [FE]            AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  if(Double.isNaN(uB[i])||  Double.isInfinite(lB[i]))  {  [BUGGY]      Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	if(Double.isNaN(uB[i])||  Double.isInfinite(lB[i]))  {	  if(Double.isNaN(uB[i])||    Double.isNaN(lB[i]))    {    	non-compiled	[CE]  	23	None	replace
29	[BUG]  [BUGGY]  ((  Double)lB[i]).setFitness(false,  uB[i]);  [CE]  [FE]              AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  Double)lB[i]).setFitness(false,  uB[i]);  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  Double)lB[i]).setFitness(false,  uB[i]);	  ((    Double)lB[i]).setFitness(false);    	non-compiled	[CE]  	21	None	replace
30	[BUG]  [BUGGY]  ((  lB[i]  <  <  1)||(lB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  ((  lB[i]  <  <  1)||(lB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	((  lB[i]  <  <  1)||(lB[i]  >  lB[i]))  {  hasInfiniteBounds  =  true;  break;  }	  ((    lB[i]    <    <    1)||(uB[i]    >=    lB[i]))    {    hasInfiniteBounds    =    true;    break;    }    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  lB[i]  =  lB[i].getFitness();  hasInfiniteBounds  =  false;  [CE]  [FE]                AssertionError      [CONTEXT]      if  (!Double.isInfinite(lB[i])  ||  !Double.isInfinite(uB[i]))  {  hasFiniteBounds  =  true;  break;  }  }  boolean  hasInfiniteBounds  =  false;  if  (hasFiniteBounds)  {  for  (int  i  =  0;  i  <  lB.length;  i++)  {      [BUGGY]  lB[i]  =  lB[i].getFitness();  hasInfiniteBounds  =  false;  [BUGGY]      if  (Double.isInfinite(lB[i])  ||      Double.isInfinite(uB[i]))  {  Double.isInfinite(uB[i]))  {  hasInfiniteBounds  =  true;  break;  }  }  if  (hasInfiniteBounds)  {    throw  new  MathUnsupportedOperationException();  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  checkParameters  [RETURN_TYPE]  void  [VARIABLES]  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hasFiniteBounds  hasInfiniteBounds  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  init  inputSigma  lB  pcCol  sqrtDiagC  uB  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.4472135954999579	516	517	1	replace	lB[i]  =  lB[i].getFitness();  hasInfiniteBounds  =  false;	  lB[i]    =    lB[i].getStandardFitness();    hasInfiniteBounds    =    false;    	non-compiled	[CE]  	2	None	replace
