bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  fitness  =  new  double[arz.getFitness()];  [CE]  [FE]    AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]  double[]  fitness  =  new  double[arz.getFitness()];  [BUGGY]    for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	double[]  fitness  =  new  double[arz.getFitness()];	double[]  fitness  =  new  double[lambda];  	non-compiled	[CE]  	54	None	replace
2	[BUG]  [BUGGY]  double[]  fitness  =  new  double[arz.getValue()  ];  [CE]  [FE]      AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]  double[]  fitness  =  new  double[arz.getValue()  ];  [BUGGY]    for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	double[]  fitness  =  new  double[arz.getValue()  ];	double[]  fitness  =  new  double[lambda];  	non-compiled	[CE]  	54	None	replace
3	[BUG]  [BUGGY]    [CE]  [FE]        AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    [BUGGY]    for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	  	double[]  fitness  =  new  double[lambda];  	non-compiled	[CE]  	54	None	replace
4	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arz);  }  [CE]  [FE]    AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arz);  }  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arz);  }		non-compiled	[CE]  	55	None	add
5	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arx);  }  [CE]  [FE]      AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arx);  }  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  arx);  }		non-compiled	[CE]  	55	None	add
6	[BUG]  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  lambda);  }  [CE]  [FE]        AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  lambda);  }  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    if(isActiveCMA)  {  for(int  i  =  0;  iterations  <  maxIterations;  iterations++)  {  ARRAY  =  randn1(dimension,  lambda);  }		non-compiled	[CE]  	55	None	add
7	[BUG]  [BUGGY]    double[]  lambda  =  arz.getLowerBounds();  [CE]  ')'  expected  [FE]    AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  arz.getLowerBounds();  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  arz.getLowerBounds();		non-compiled	[CE]  ')'  expected	55	None	add
8	[BUG]  [BUGGY]    double[]  lambda  =  arz.getLowerBound();  [CE]  [FE]      AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  arz.getLowerBound();  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  arz.getLowerBound();		non-compiled	[CE]  	55	None	add
9	[BUG]  [BUGGY]    double[]  lambda  =  arz.getLowerBounds(dimension);  [CE]  [FE]        AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  arz.getLowerBounds(dimension);  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  arz.getLowerBounds(dimension);		non-compiled	[CE]  	55	None	add
10	[BUG]  [BUGGY]  double[]  fitness  =  new  double[1];  [CE]  [FE]    AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]  double[]  fitness  =  new  double[1];  [BUGGY]    for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	double[]  fitness  =  new  double[1];	double[]  fitness  =  new  double[lambda];  	non-compiled	[CE]  	54	None	replace
11	[BUG]  [BUGGY]    double[]  lambda  =  randn1(dimension,  lambda);  [CE]  [FE]    AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  randn1(dimension,  lambda);  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  randn1(dimension,  lambda);		non-compiled	[CE]  	55	None	add
12	[BUG]  [BUGGY]    double[]  lambda  =  randn1(dimension,  arz);  [CE]  [FE]      AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  randn1(dimension,  arz);  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  randn1(dimension,  arz);		non-compiled	[CE]  	55	None	add
13	[BUG]  [BUGGY]    double[]  lambda  =  randn2(dimension,  lambda);  [CE]  [FE]        AssertionError  [CONTEXT]  isMinimize  ?  bestValue  :  -bestValue);  PointValuePair  lastResult  =  null;    generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  RealMatrix  arz  =  randn1(dimension,  lambda);  RealMatrix  arx  =  zeros(dimension,  lambda);  [BUGGY]    double[]  lambda  =  randn2(dimension,  lambda);  [BUGGY]  double[]  fitness  =  new  double[lambda];  for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount+1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	372	372	1	replace	    double[]  lambda  =  randn2(dimension,  lambda);		non-compiled	[CE]  	55	None	add
