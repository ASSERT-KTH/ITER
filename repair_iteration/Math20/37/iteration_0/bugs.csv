bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
74	[BUG] [BUGGY] int[] arindex = sortedIndices(fitness); [FE] AssertionError [CONTEXT] arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  [BUGGY] int[] arindex = sortedIndices(fitness); [BUGGY]  RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); RealMatrix zmean = bestArz.multiply(weights); boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { [CLASS] CMAESOptimizer DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean DEFAULT_ISACTIVECMA generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double DEFAULT_STOPFITNESS bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness double[][] boundaries List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int DEFAULT_CHECKFEASABLECOUNT DEFAULT_DIAGONALONLY DEFAULT_MAXITERATIONS checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu RandomGenerator DEFAULT_RANDOMGENERATOR random PointValuePair current lastResult optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	398	398	1	replace	
75	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  [BUGGY] [BUGGY] int[] arindex = sortedIndices(fitness);  RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); RealMatrix zmean = bestArz.multiply(weights); boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { [CLASS] CMAESOptimizer DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean DEFAULT_ISACTIVECMA generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double DEFAULT_STOPFITNESS bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness double[][] boundaries List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int DEFAULT_CHECKFEASABLECOUNT DEFAULT_DIAGONALONLY DEFAULT_MAXITERATIONS checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu RandomGenerator DEFAULT_RANDOMGENERATOR random PointValuePair current lastResult optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	398	398	1	add	
