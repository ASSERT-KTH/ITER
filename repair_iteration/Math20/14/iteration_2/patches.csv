bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(getEndPoint()!=  getEndPoint());  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  Preconditions.checkState(getEndPoint()!=  getEndPoint());  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	Preconditions.checkState(getEndPoint()!=  getEndPoint());	  Preconditions.checkState(getEndPoint()!=    getStartPoint());    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  int[]  dimension  =  getEndPoint().toArray(new  int[size()  ]);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimension  =  getEndPoint().toArray(new  int[size()  ]);  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimension  =  getEndPoint().toArray(new  int[size()  ]);	  int[]    dimension    =    getStartPoint().toArray(new    int[size()    ]);    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);  push(bestValue,  bestValue);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);  push(bestValue,  bestValue);  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);  push(bestValue,  bestValue);	  if(isActiveCMA)    {    final    PointValuePair    bestValue    =    new    PointValuePair(getStartPoint(),    isMinimize?    getEndPoint()    :    -bestValue);    push(bestValue,    bestValue);    }    	non-compiled	[CE]  	19	None	replace
4	[BUG]  [BUGGY]  final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	final  PointValuePair  bestValue  =  new  PointValuePair(getStartPoint(),  isMinimize?  getEndPoint()  :  -bestValue);	  if(isActiveCMA)    {    final    PointValuePair    bestValue    =    new    PointValuePair(getStartPoint(),    isMinimize?    getEndPoint()    :    -bestValue);    push(bestValue,    bestValue);    }    	non-compiled	[CE]  	19	None	replace
5	[BUG]  [BUGGY]  luate();  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  luate();  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	luate();	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()!=    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  validate(getStartPoint());  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  validate(getStartPoint());  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	validate(getStartPoint());	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()!=    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  int[]  dimension  =  getMatrix().toArray(new  int[size()  ]);  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimension  =  getMatrix().toArray(new  int[size()  ]);  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimension  =  getMatrix().toArray(new  int[size()  ]);	  int[]    dimension    =    getMatrix();    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(getStartPoint()  ==  null);  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  Preconditions.checkState(getStartPoint()  ==  null);  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	Preconditions.checkState(getStartPoint()  ==  null);	  Preconditions.checkState(getStartPoint()!=    null);    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  int[]  dimension  =  getMaximumSize();  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimension  =  getMaximumSize();  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimension  =  getMaximumSize();	  int[]    dimension    =    getMinimumSize();    	non-compiled	[CE]  	21	None	replace
10	[BUG]  [BUGGY]  int[]  dimensions  =  getMaximumSize();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimensions  =  getMaximumSize();  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimensions  =  getMaximumSize();	  int[]    dimensions    =    getMinimumSize();    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  int[]  dimension  =  getFieldType().getMinimumSize();  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimension  =  getFieldType().getMinimumSize();  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimension  =  getFieldType().getMinimumSize();	  int[]    dimension    =    getFieldType().getMaximumSize();    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  int[]  dimension  =  getMaximize();  [CE]  [FE]            AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimension  =  getMaximize();  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimension  =  getMaximize();	  int[]    dimension    =    getMinimize();    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  int[]  dimensions  =  getDimensions().toArray(new  int[size()  ]);  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  int[]  dimensions  =  getDimensions().toArray(new  int[size()  ]);  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	int[]  dimensions  =  getDimensions().toArray(new  int[size()  ]);	  int[]    dimensions    =    getDimensions();    	non-compiled	[CE]  	1	None	replace
14	[BUG]  [BUGGY]  Magimizer.checkState(isActiveCMA);  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  Magimizer.checkState(isActiveCMA);  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	Magimizer.checkState(isActiveCMA);	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()    ==    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  Magimizer.checkState(isRepairMode);  [CE]  [FE]                    AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  Magimizer.checkState(isRepairMode);  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	Magimizer.checkState(isRepairMode);	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()    ==    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	16	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(getEndPoint()  ==  getEndPoint());  [CE]  [FE]              AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  Preconditions.checkState(getEndPoint()  ==  getEndPoint());  [BUGGY]      isMinimize  =  getGoalType().equals(GoalType.MINIMIZE);  final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	Preconditions.checkState(getEndPoint()  ==  getEndPoint());	  Preconditions.checkState(getEndPoint()!=    getStartPoint());    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()  ==  getEndPoint())  {  return  new  PointValuePair(i);  }  [CE]  [FE]                  AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()  ==  getEndPoint())  {  return  new  PointValuePair(i);  }  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()  ==  getEndPoint())  {  return  new  PointValuePair(i);  }	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()    ==    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	16	None	replace
18	[BUG]  [BUGGY]  if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()!=  getEndPoint())  {  return  new  PointValuePair(i);  }  [CE]  [FE]                AssertionError      [CONTEXT]      protected  PointValuePair  doOptimize()  {  checkParameters();        [BUGGY]  if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()!=  getEndPoint())  {  return  new  PointValuePair(i);  }  [BUGGY]      final  FitnessFunction  fitfun  =  new  FitnessFunction();  final  double[]  guess  =  fitfun.encode(getStartPoint());  dimension  =  guess.length;  initializeCMA(guess);  iterations  =  0;  double  bestValue  =  fitfun.value(guess);  push(fitnessHistory,  bestValue);  PointValuePair  optimum  =  new  PointValuePair(getStartPoint(),  isMinimize  ?  bestValue  :  -bestValue);  [CLASS]  CMAESOptimizer  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  DEFAULT_ISACTIVECMA  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  DEFAULT_STOPFITNESS  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  double[][]  boundaries  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  DEFAULT_CHECKFEASABLECOUNT  DEFAULT_DIAGONALONLY  DEFAULT_MAXITERATIONS  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  RandomGenerator  DEFAULT_RANDOMGENERATOR  random  PointValuePair  current  lastResult  optimum  	projects/Math20/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java	0.2773500981126146	352	352	1	replace	if(isRepairMode)  {  for(int  i  =  0,  isMinimize  =  0;  i  <  isMaximize;  i++)  {  if(getStartPoint()!=  getEndPoint())  {  return  new  PointValuePair(i);  }	  if(isActiveCMA)    {    for(int    i    =    0,    isMinimize    =    0;    i    <    isMaximize;    i++)    {    if(getStartPoint()!=    getEndPoint())    {    return    new    PointValuePair(i);    }    	non-compiled	[CE]  	15	None	replace
