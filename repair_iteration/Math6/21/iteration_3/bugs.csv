bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Math.max(1,  fitness.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  fitness.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(1,  fitness.length));	  Math.max(0,    fitness.length));    	non-compiled	[CE]  	29	None	replace
2	[BUG]  [BUGGY]  Iterator  <  Class  <?>  iterator  =  this.fitness.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Class  <?>  iterator  =  this.fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Class  <?>  iterator  =  this.fitness.iterator();	  Iterator    <    Class    <?>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	44	None	replace
3	[BUG]  [BUGGY]  Iterator  <  Class  <?>  iterator  =  arx.iterator();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Class  <?>  iterator  =  arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Class  <?>  iterator  =  arx.iterator();	  Iterator    <    Class    <?>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	44	None	replace
4	[BUG]  [BUGGY]  luate(arx,  fitness);  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  fitness);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  fitness);	  luate(arx,    arz);    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  iterations;  k++)  {  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  iterations;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	for(int  k  =  0;  k  <  iterations;  k++)  {	  for(int    k    =    0;    k    <    maxIterations;    k++)    {    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  true;  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  true;  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  true;  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    true;    }    	non-compiled	[CE]  	45	None	replace
7	[BUG]  [BUGGY]  Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  true;  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  true;  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  true;  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    true;    }    	non-compiled	[CE]  	45	None	replace
8	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    fitness    =    new    double[    	non-compiled	[CE]  	30	None	replace
9	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    fitness    =    new    double[    	non-compiled	[CE]  	30	None	replace
10	[BUG]  [BUGGY]  Math.min(k,  lambda.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(k,  lambda.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(k,  lambda.length));	  Math.min(k,    fitness.length));    	non-compiled	[CE]  	38	None	replace
11	[BUG]  [BUGGY]  Math.min(lambda,  fitness.length));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(lambda,  fitness.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(lambda,  fitness.length));	  Math.min(k,    fitness.length));    	non-compiled	[CE]  	38	None	replace
12	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.temp.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.temp.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.temp.iterator();	  Iterator    <    Number>    iterations    =    temp.iterator();    	non-compiled	[CE]  	48	None	replace
13	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.data.iterator();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.data.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.data.iterator();	  Iterator    <    Number>    iterations    =    data.iterator();    	non-compiled	[CE]  	49	None	replace
14	[BUG]  [BUGGY]  Iterator  <  Class  <?>  iterator  =  iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Class  <?>  iterator  =  iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Class  <?>  iterator  =  iterator();	  Iterator    <    Class    <?>    iterator    =    classes.iterator();    	non-compiled	[CE]  	43	None	replace
15	[BUG]  [BUGGY]  Iterator  <  Class  <?>  iterator  =  this.classes.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Class  <?>  iterator  =  this.classes.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Class  <?>  iterator  =  this.classes.iterator();	  Iterator    <    Class    <?>    iterator    =    classes.iterator();    	non-compiled	[CE]  	43	None	replace
16	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }	  For(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	16	None	replace
17	[BUG]  [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  null;  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  null;  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  null;  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    null;    }    	non-compiled	[CE]  	46	None	replace
18	[BUG]  [BUGGY]  Iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  arx;  }  [CE]  [FE]                    AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  arx;  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  arx;  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    null;    }    	non-compiled	[CE]  	46	None	replace
19	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  0;  iterations++;  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  0;  iterations++;  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  0;  iterations++;	  Iterator    <    Number>    iterations    =    maxIterations;    iterations++;    	non-compiled	[CE]  	32	None	replace
20	[BUG]  [BUGGY]  luate(arx,  fitness));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  fitness));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  fitness));	  luate(arx,    arx));    	non-compiled	[CE]  	19	None	replace
21	[BUG]  [BUGGY]  luate(arx,  lambda));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  lambda));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  lambda));	  luate(arx,    arx));    	non-compiled	[CE]  	19	None	replace
22	[BUG]  [BUGGY]  luate(arx,  arz.length);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  arz.length);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  arz.length);	  luate(arz,    arx);    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    new    double[lambda];    }    	non-compiled	[CE]  	36	None	replace
24	[BUG]  [BUGGY]  Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterations  <  =  iterations;  iterations++)  {  fitness[i]  =  new  double[lambda];  }	  Iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    new    double[lambda];    }    	non-compiled	[CE]  	36	None	replace
25	[BUG]  [BUGGY]  cast(arx,  fitness);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  cast(arx,  fitness);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	cast(arx,  fitness);	  cast(arx,    arx);    	non-compiled	[CE]  	47	None	replace
26	[BUG]  [BUGGY]  Iterator  <  E>  iterator  =  arx.iterator();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  E>  iterator  =  arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  E>  iterator  =  arx.iterator();	  Iterator    <    E>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	40	None	replace
27	[BUG]  [BUGGY]  Iterator  <  E>  iterator  =  this.fitness.iterator();  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  E>  iterator  =  this.fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  E>  iterator  =  this.fitness.iterator();	  Iterator    <    E>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	40	None	replace
28	[BUG]  [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }	  Generator    <    RealMatrix>Generator    <    =    generateStatistics)    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    	non-compiled	[CE]  	31	None	replace
29	[BUG]  [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }	  Generator    <    RealMatrix>Generator    <    =    generateStatistics)    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    	non-compiled	[CE]  	31	None	replace
30	[BUG]  [BUGGY]  Math.min(k,  lambda.length  -  1);  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(k,  lambda.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(k,  lambda.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	39	None	replace
31	[BUG]  [BUGGY]  Math.min(lambda,  fitness.length  -  1);  [CE]  [FE]                    AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(lambda,  fitness.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(lambda,  fitness.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	39	None	replace
32	[BUG]  [BUGGY]  Math.max(10.0,  lambda.length));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(10.0,  lambda.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(10.0,  lambda.length));	  Math.max(10.0,    arx.length));    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  Math.max(10.0,  arx.length  -  1));  [CE]  [FE]                    AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(10.0,  arx.length  -  1));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(10.0,  arx.length  -  1));	  Math.max(10.0,    arx.length));    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  luate(arx,  arz));  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  arz));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  arz));	  luate(arz,    arx));    	non-compiled	[CE]  	27	None	replace
35	[BUG]  [BUGGY]  luate(arz,  fitness));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arz,  fitness));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arz,  fitness));	  luate(arz,    arx));    	non-compiled	[CE]  	27	None	replace
36	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.dataIterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.dataIterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.dataIterator();	  Iterator    <    Number>    iterations    =    dataIterator();    	non-compiled	[CE]  	42	None	replace
37	[BUG]  [BUGGY]  Math.max(0,  lambda.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(0,  lambda.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(0,  lambda.length));	  Math.max(0,    arx.length));    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  Math.max(1,  arx.length));  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(1,  arx.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(1,  arx.length));	  Math.max(0,    arx.length));    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  luate(arx,  lambda);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  lambda);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  lambda);	  luate(dimension,    lambda);    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  Iterator  <  Point>  iterator  =  arx.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Point>  iterator  =  arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Point>  iterator  =  arx.iterator();	  Iterator    <    Point>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	41	None	replace
41	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  For(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	18	None	replace
42	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	17	None	replace
43	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  lambda.length  -  2;  k++)  {  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  lambda.length  -  2;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	for(int  k  =  0;  k  <  lambda.length  -  2;  k++)  {	  for(int    k    =    0;    k    <    lambda.length    -    1;    k++)    {    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  Iterator  <  Number>  iterators  =  fitness.iterator();  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterators  =  fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterators  =  fitness.iterator();	  Iterator    <    Number>    iterators    =    arx.iterator();    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  Iterator  <  Number>  iterators  =  this.arx.iterator();  [CE]  [FE]                    AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterators  =  this.arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterators  =  this.arx.iterator();	  Iterator    <    Number>    iterators    =    arx.iterator();    	non-compiled	[CE]  	25	None	replace
46	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.maxIterations.iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.maxIterations.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.maxIterations.iterator();	  Iterator    <    Number>    iterations    =    maxIterations.iterator();    	non-compiled	[CE]  	26	None	replace
47	[BUG]  [BUGGY]  luate(arx,  dimension);  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  dimension);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  dimension);	  luate(dimension,    arx);    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  luate(arx,  dimensions);  [CE]  [FE]                    AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  dimensions);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  dimensions);	  luate(dimension,    arx);    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magbda,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magbda,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magbda,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.fitness.iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.fitness.iterator();	  Iterator    <    Number>    iterations    =    fitness.iterator();    	non-compiled	[CE]  	34	None	replace
52	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magicCount,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magicCount,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magicCount,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	15	None	replace
53	[BUG]  [BUGGY]  Iterator  <  E>  iterations  =  this.arz.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  E>  iterations  =  this.arz.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  E>  iterations  =  this.arz.iterator();	  Iterator    <    E>    iterations    =    arz.iterator();    	non-compiled	[CE]  	2	None	replace
54	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  temp  =  new  double[  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  temp  =  new  double[  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  temp  =  new  double[	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    temp    =    new    double[    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  luate(arz,  lambda);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arz,  lambda);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arz,  lambda);	  luate(dimension,    lambda);    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  Math.min(feasableCount,  fitness.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(feasableCount,  fitness.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(feasableCount,  fitness.length));	  Math.min(k,    fitness.length));    	non-compiled	[CE]  	38	None	replace
57	[BUG]  [BUGGY]  Math.max(0,  arx.length  -  1));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.max(0,  arx.length  -  1));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.max(0,  arx.length  -  1));	  Math.max(0,    arx.length));    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);	  Generator    <    RealMatrix>Generator    <    =    generateStatistics)    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    	non-compiled	[CE]  	31	None	replace
60	[BUG]  [BUGGY]  cast(arx,  arz);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  cast(arx,  arz);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	cast(arx,  arz);	  cast(arx,    arx);    	non-compiled	[CE]  	47	None	replace
61	[BUG]  [BUGGY]  luate(arz,  fitness);  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arz,  fitness);  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arz,  fitness);	  luate(arz,    arx);    	non-compiled	[CE]  	3	None	replace
62	[BUG]  [BUGGY]  for(int  k  =  0;  k  <  10;  k++)  {  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  k  =  0;  k  <  10;  k++)  {  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	for(int  k  =  0;  k  <  10;  k++)  {	  for(int    k    =    0;    k    <    maxIterations;    k++)    {    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  arx.length;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  arx.length;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  arx.length;  iterations++)  {  fitness[i]  =  Math.min(arx,  arx);  }	  For(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	16	None	replace
64	[BUG]  [BUGGY]  Iterator  <  E>  iterations  =  this.fitness.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  E>  iterations  =  this.fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  E>  iterations  =  this.fitness.iterator();	  Iterator    <    E>    iterations    =    fitness.iterator();    	non-compiled	[CE]  	35	None	replace
65	[BUG]  [BUGGY]  Iterator  <  Point>  iterator  =  this.fitness.iterator();  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Point>  iterator  =  this.fitness.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Point>  iterator  =  this.fitness.iterator();	  Iterator    <    Point>    iterator    =    fitness.iterator();    	non-compiled	[CE]  	41	None	replace
66	[BUG]  [BUGGY]  Iterator  <  RealMatrix>  iterations  =  arx.iterator().next();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  RealMatrix>  iterations  =  arx.iterator().next();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  RealMatrix>  iterations  =  arx.iterator().next();	  iterations    =    arx.iterator().next();    	non-compiled	[CE]  	37	None	replace
67	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  1;  iterations++;  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  1;  iterations++;  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  1;  iterations++;	  Iterator    <    Number>    iterations    =    maxIterations;    iterations++;    	non-compiled	[CE]  	32	None	replace
68	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    fitness    =    new    double[    	non-compiled	[CE]  	30	None	replace
69	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(branch,  arx);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(branch,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(branch,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	15	None	replace
70	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magic,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magic,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(magic,  arx);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	15	None	replace
71	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    temp    =    new    double[    	non-compiled	[CE]  	21	None	replace
72	[BUG]  [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  For(int    iterations    =    1;    iterations    <    =    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	17	None	replace
73	[BUG]  [BUGGY]  luate(arx,  BD));  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  luate(arx,  BD));  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	luate(arx,  BD));	  luate(arz,    arx));    	non-compiled	[CE]  	27	None	replace
74	[BUG]  [BUGGY]  Math.min(maxIterations,  fitness.length));  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(maxIterations,  fitness.length));  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(maxIterations,  fitness.length));	  Math.min(k,    fitness.length));    	non-compiled	[CE]  	38	None	replace
75	[BUG]  [BUGGY]  Iterator  <  Number>  iterations  =  this.arx.iterator();  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  Number>  iterations  =  this.arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  Number>  iterations  =  this.arx.iterator();	  Iterator    <    Number>    iterations    =    arx.iterator();    	non-compiled	[CE]  	24	None	replace
76	[BUG]  [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	For(int  iterations  =  0;  iterations  <  =  maxIterations;  iterations++)  {  fitness[i]  =  Math.min(maxIterations,  arx);  }	  For(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    Math.min(maxIterations,    arx);    }    	non-compiled	[CE]  	16	None	replace
77	[BUG]  [BUGGY]  Math.min(maxIterations,  fitness.length  -  1);  [CE]  [FE]                  AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Math.min(maxIterations,  fitness.length  -  1);  [BUGGY]      RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Math.min(maxIterations,  fitness.length  -  1);	  Math.min(k,    fitness.length    -    1);    	non-compiled	[CE]  	39	None	replace
78	[BUG]  [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[lam  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[lam  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Generator  <  RealMatrix>generator()  {  for(iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  double[]  fitness  =  new  double[lam	  Generator    <    RealMatrix>generator()    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    final    double[]    fitness    =    new    double[    	non-compiled	[CE]  	30	None	replace
79	[BUG]  [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [CE]  [FE]                AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	for(int  iterations  =  0;  iterations  <  maxIterations;  iterations++)  {  fitness[i]  =  randn1(dimension,  lambda);  }	  For(int    iterations    =    0;    iterations    <    maxIterations;    iterations++)    {    fitness[i]    =    randn1(dimension,    arx);    }    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  final  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [CE]  [FE]              AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  final  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	final  Generator  <  RealMatrix>Generator  <  =  generateStatistics)  {  for(iterations  =  1;  iterations  <  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  }	  Generator    <    RealMatrix>Generator    <    =    generateStatistics)    {    for(iterations    =    1;    iterations    <    maxIterations;    iterations++)    {    final    RealMatrix    arz    =    randn1(dimension,    lambda);    	non-compiled	[CE]  	31	None	replace
81	[BUG]  [BUGGY]  Iterator  <  E>  iterations  =  this.arx.iterator();  [CE]  [FE]            AssertionError      [CONTEXT]        generationLoop:  for  (iterations  =  1;  iterations  <=  maxIterations;  iterations++)  {  final  RealMatrix  arz  =  randn1(dimension,  lambda);  final  RealMatrix  arx  =  zeros(dimension,  lambda);  final  double[]  fitness  =  new  double[lambda];        [BUGGY]  Iterator  <  E>  iterations  =  this.arx.iterator();  [BUGGY]      for  (int  k  =  0;  k  <  lambda;  k++)  {  RealMatrix  arxk  =  null;  for  (int  i  =  0;  i  <  checkFeasableCount  +  1;  i++)  {  if  (diagonalOnly  <=  0)  {  arxk  =  xmean.add(BD.multiply(arz.getColumnMatrix(k))  .scalarMultiply(sigma));  //  m  +  sig  *  Normal(0,C)  }  else  {  arxk  =  xmean.add(times(diagD,arz.getColumnMatrix(k))  .scalarMultiply(sigma));  }  if  (i  >=  checkFeasableCount  ||  [CLASS]  CMAESOptimizer  Sigma  PopulationSize  DoubleIndex  FitnessFunction  [METHOD]  doOptimize  [RETURN_TYPE]  PointValuePair  [VARIABLES]  TooManyEvaluationsException  e  boolean  generateStatistics  hsig  isActiveCMA  isMinimize  isRepairMode  double[]  fitness  fitnessHistory  guess  inputSigma  pcCol  s  sigma  sqrtDiagC  RealMatrix  B  BD  C  D  arx  arxk  arz  bestArx  bestArz  diagC  diagD  pc  ps  weights  xmean  xold  zmean  double  bestFitness  bestValue  cc  ccov1  ccov1Sep  ccovmu  ccovmuSep  chiN  cs  damps  historyBest  historyWorst  logMu2  mueff  normps  sigma  stopFitness  stopTolFun  stopTolHistFun  stopTolUpX  stopTolX  value  valueRange  worstFitness  List  statisticsDHistory  statisticsFitnessHistory  statisticsMeanHistory  statisticsSigmaHistory  FitnessFunction  fitfun  int[]  arindex  int  checkFeasableCount  diagonalOnly  dimension  historySize  i  index  iterations  k  lambda  maxIterations  mu  size  RandomGenerator  random  PointValuePair  current  lastResult  optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	Iterator  <  E>  iterations  =  this.arx.iterator();	  Iterator    <    E>    iterations    =    arx.iterator();    	non-compiled	[CE]  	1	None	replace
