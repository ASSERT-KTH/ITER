bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return iterations.getCount(); [FE] AssertionError [CONTEXT] public int getIterations() { [BUGGY] return iterations.getCount(); [BUGGY] } [CLASS] BaseOptimizer MaxEvalCallback MaxIterCallback [METHOD] getIterations [RETURN_TYPE] int  [VARIABLES] Incrementor evaluations iterations ConvergenceChecker checker boolean  	projects/Math6/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java	1.0	93	93	28	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public int getIterations() { [BUGGY] [BUGGY] return iterations.getCount(); } [CLASS] BaseOptimizer MaxEvalCallback MaxIterCallback [METHOD] getIterations [RETURN_TYPE] int  [VARIABLES] Incrementor evaluations iterations ConvergenceChecker checker boolean  	projects/Math6/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java	1.0	93	93	28	add	
3	[BUG] [BUGGY] if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [FE] AssertionError [CONTEXT] if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   if (stopFitness != 0) { // only if stopFitness is defined [BUGGY] if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [BUGGY] break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7559289460184544	451	451	28	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   if (stopFitness != 0) { // only if stopFitness is defined [BUGGY] [BUGGY] if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7559289460184544	451	451	28	add	
5	[BUG] [BUGGY] final double[][] d = new double[m.getRowDimension()][1]; [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { [BUGGY] final double[][] d = new double[m.getRowDimension()][1]; [BUGGY] for (int i = 0; i < m.getColumnDimension(); i++) { d[i][0] = m.getEntry(i, i); } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { [BUGGY] [BUGGY] final double[][] d = new double[m.getRowDimension()][1]; for (int i = 0; i < m.getColumnDimension(); i++) { d[i][0] = m.getEntry(i, i); } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1109	1109	28	add	
7	[BUG] [BUGGY] for (int i = 0; i < m.getColumnDimension(); i++) { [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; [BUGGY] for (int i = 0; i < m.getColumnDimension(); i++) { [BUGGY] d[i][0] = m.getEntry(i, i); } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1110	1110	28	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; [BUGGY] [BUGGY] for (int i = 0; i < m.getColumnDimension(); i++) { d[i][0] = m.getEntry(i, i); } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1110	1110	28	add	
9	[BUG] [BUGGY] d[i][0] = m.getEntry(i, i); [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; for (int i = 0; i < m.getColumnDimension(); i++) { [BUGGY] d[i][0] = m.getEntry(i, i); [BUGGY] } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1111	1111	28	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static RealMatrix diag(final RealMatrix m) { if (m.getColumnDimension() == 1) { final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; for (int i = 0; i < m.getColumnDimension(); i++) { [BUGGY] [BUGGY] d[i][0] = m.getEntry(i, i); } return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1111	1111	28	add	
11	[BUG] [BUGGY] return new Array2DRowRealMatrix(d, false); [FE] AssertionError [CONTEXT] final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; for (int i = 0; i < m.getColumnDimension(); i++) { d[i][0] = m.getEntry(i, i); } [BUGGY] return new Array2DRowRealMatrix(d, false); [BUGGY] } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[][] d = new double[m.getRowDimension()][m.getRowDimension()]; for (int i = 0; i < m.getRowDimension(); i++) { d[i][i] = m.getEntry(i, 0); } return new Array2DRowRealMatrix(d, false); } else { final double[][] d = new double[m.getRowDimension()][1]; for (int i = 0; i < m.getColumnDimension(); i++) { d[i][0] = m.getEntry(i, i); } [BUGGY] [BUGGY] return new Array2DRowRealMatrix(d, false); } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] diag [RETURN_TYPE] RealMatrix  RealMatrix m [VARIABLES] boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] doubles fitness fitnessHistory guess init inputSigma lB pcCol point repaired s sigma sqrtDiagC uB vals x RealMatrix B BD C Cneg D arnorms arnormsInv arnormsReverse arnormsSorted arpos artmp arx arxk arz arzneg bestArx bestArz diagC diagD insigma m n pc ps roneu weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps diff e historyBest historyWorst logMu2 mueff negalphaold negccov negcovMax negminresidualvariance normps oldFac penalty sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX sum sumw sumwq tfac val value valueRange w worstFitness double[][] d List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory int c checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu r size RandomGenerator random  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7319250547113999	1113	1113	28	add	
13	[BUG] [BUGGY] isMinimize = getGoalType().equals(GoalType.MINIMIZE); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  [BUGGY] isMinimize = getGoalType().equals(GoalType.MINIMIZE); [BUGGY] final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	370	370	28	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  [BUGGY] [BUGGY] isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	370	370	28	add	
15	[BUG] [BUGGY] final FitnessFunction fitfun = new FitnessFunction(); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); [BUGGY] final FitnessFunction fitfun = new FitnessFunction(); [BUGGY] final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	371	371	28	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); [BUGGY] [BUGGY] final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	371	371	28	add	
17	[BUG] [BUGGY] final double[] guess = getStartPoint(); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); [BUGGY] final double[] guess = getStartPoint(); [BUGGY]  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	372	372	28	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); [BUGGY] [BUGGY] final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	372	372	28	add	
19	[BUG] [BUGGY] dimension = guess.length; [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  [BUGGY] dimension = guess.length; [BUGGY] initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	374	374	28	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  [BUGGY] [BUGGY] dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	374	374	28	add	
21	[BUG] [BUGGY] initializeCMA(guess); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; [BUGGY] initializeCMA(guess); [BUGGY] iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	375	375	28	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; [BUGGY] [BUGGY] initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	375	375	28	add	
23	[BUG] [BUGGY] iterations = 0; [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); [BUGGY] iterations = 0; [BUGGY] double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	376	376	28	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); [BUGGY] [BUGGY] iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	376	376	28	add	
25	[BUG] [BUGGY] double bestValue = fitfun.value(guess); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; [BUGGY] double bestValue = fitfun.value(guess); [BUGGY] push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	377	377	28	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; [BUGGY] [BUGGY] double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	377	377	28	add	
27	[BUG] [BUGGY] push(fitnessHistory, bestValue); [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); [BUGGY] push(fitnessHistory, bestValue); [BUGGY] PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	378	378	28	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] protected PointValuePair doOptimize() {  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); [BUGGY] [BUGGY] push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	378	378	28	add	
29	[BUG] [BUGGY] PointValuePair optimum = new PointValuePair(getStartPoint(),     isMinimize ? bestValue : -bestValue); [FE] AssertionError [CONTEXT]  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); [BUGGY] PointValuePair optimum   = new PointValuePair(getStartPoint(),                 isMinimize ? bestValue : -bestValue); [BUGGY] = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	379	381	28	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  isMinimize = getGoalType().equals(GoalType.MINIMIZE); final FitnessFunction fitfun = new FitnessFunction(); final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); [BUGGY] [BUGGY] PointValuePair optimum   = new PointValuePair(getStartPoint(),                 isMinimize ? bestValue : -bestValue); = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	379	381	28	add	
31	[BUG] [BUGGY] PointValuePair lastResult = null; [FE] AssertionError [CONTEXT] final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); [BUGGY] PointValuePair lastResult = null; [BUGGY]   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	382	382	28	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double[] guess = getStartPoint();  dimension = guess.length; initializeCMA(guess); iterations = 0; double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); [BUGGY] [BUGGY] PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	382	382	28	add	
33	[BUG] [BUGGY] for (iterations = 1; iterations <= maxIterations; iterations++) { [FE] AssertionError [CONTEXT] double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: [BUGGY] for (iterations = 1; iterations <= maxIterations; iterations++) { [BUGGY]   final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	387	387	28	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double bestValue = fitfun.value(guess); push(fitnessHistory, bestValue); PointValuePair optimum = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: [BUGGY] [BUGGY] for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	387	387	28	add	
35	[BUG] [BUGGY] final RealMatrix arz = randn1(dimension, lambda); [FE] AssertionError [CONTEXT] = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  [BUGGY] final RealMatrix arz = randn1(dimension, lambda); [BUGGY] final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	390	390	28	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] = new PointValuePair(getStartPoint(), isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  [BUGGY] [BUGGY] final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	390	390	28	add	
37	[BUG] [BUGGY] final RealMatrix arx = zeros(dimension, lambda); [FE] AssertionError [CONTEXT] isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); [BUGGY] final RealMatrix arx = zeros(dimension, lambda); [BUGGY] final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	391	391	28	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] isMinimize ? bestValue : -bestValue); PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); [BUGGY] [BUGGY] final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	391	391	28	add	
39	[BUG] [BUGGY] final double[] fitness = new double[lambda]; [FE] AssertionError [CONTEXT] PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); [BUGGY] final double[] fitness = new double[lambda]; [BUGGY]  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	392	392	28	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] PointValuePair lastResult = null;   generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); [BUGGY] [BUGGY] final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	392	392	28	add	
41	[BUG] [BUGGY] for (int k = 0; k < lambda; k++) { [FE] AssertionError [CONTEXT]  generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  [BUGGY] for (int k = 0; k < lambda; k++) { [BUGGY] RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  [BUGGY] [BUGGY] for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	394	394	28	add	
43	[BUG] [BUGGY] RealMatrix arxk = null; [FE] AssertionError [CONTEXT] generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { [BUGGY] RealMatrix arxk = null; [BUGGY] for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	395	395	28	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { [BUGGY] [BUGGY] RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	395	395	28	add	
45	[BUG] [BUGGY] for (int i = 0; i < checkFeasableCount + 1; i++) { [FE] AssertionError [CONTEXT] generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; [BUGGY] for (int i = 0; i < checkFeasableCount + 1; i++) { [BUGGY] if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	396	396	28	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] generationLoop: for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; [BUGGY] [BUGGY] for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	396	396	28	add	
47	[BUG] [BUGGY] if (diagonalOnly <= 0) { [FE] AssertionError [CONTEXT] for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { [BUGGY] if (diagonalOnly <= 0) { [BUGGY] arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	397	397	28	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (iterations = 1; iterations <= maxIterations; iterations++) {  final RealMatrix arz = randn1(dimension, lambda); final RealMatrix arx = zeros(dimension, lambda); final double[] fitness = new double[lambda];  for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { [BUGGY] [BUGGY] if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	397	397	28	add	
49	[BUG] [BUGGY] if (i >= checkFeasableCount ||  fitfun.isFeasible(arxk.getColumn(0))) { [FE] AssertionError [CONTEXT] for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } [BUGGY] if (i >= checkFeasableCount ||      fitfun.isFeasible(arxk.getColumn(0))) { [BUGGY] fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int k = 0; k < lambda; k++) { RealMatrix arxk = null; for (int i = 0; i < checkFeasableCount + 1; i++) { if (diagonalOnly <= 0) { arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)) .scalarMultiply(sigma)); // m + sig * Normal(0,C) } else { arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } [BUGGY] [BUGGY] if (i >= checkFeasableCount ||      fitfun.isFeasible(arxk.getColumn(0))) { fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	404	405	28	add	
51	[BUG] [BUGGY] copyColumn(arxk, 0, arx, k); [FE] AssertionError [CONTEXT] arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } [BUGGY] copyColumn(arxk, 0, arx, k); [BUGGY] try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	411	411	28	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] arxk = xmean.add(times(diagD,arz.getColumnMatrix(k)) .scalarMultiply(sigma)); } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } [BUGGY] [BUGGY] copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	411	411	28	add	
53	[BUG] [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { [FE] AssertionError [CONTEXT] } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness    } catch (TooManyEvaluationsException e) { [BUGGY] } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) { break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { [BUGGY] [BUGGY] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness    } catch (TooManyEvaluationsException e) { } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	413	414	28	add	
55	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; [BUGGY] } [BUGGY] }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	416	416	28	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] break; }  arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; [BUGGY] [BUGGY] } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	416	416	28	add	
57	[BUG] [BUGGY] final int[] arindex = sortedIndices(fitness); [FE] AssertionError [CONTEXT] arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  [BUGGY] final int[] arindex = sortedIndices(fitness); [BUGGY]  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	419	419	28	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] arz.setColumn(k, randn(dimension)); } copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  [BUGGY] [BUGGY] final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	419	419	28	add	
59	[BUG] [BUGGY] final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [FE] AssertionError [CONTEXT] copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  [BUGGY] final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)   final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [BUGGY] final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	421	422	28	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] copyColumn(arxk, 0, arx, k); try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  [BUGGY] [BUGGY] final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)   final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	421	422	28	add	
61	[BUG] [BUGGY] final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [FE] AssertionError [CONTEXT] try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) [BUGGY] final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [BUGGY] xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] try { fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) [BUGGY] [BUGGY] final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	422	422	28	add	
63	[BUG] [BUGGY] xmean = bestArx.multiply(weights); [FE] AssertionError [CONTEXT] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [BUGGY] xmean = bestArx.multiply(weights); [BUGGY] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	423	423	28	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); [BUGGY] [BUGGY] xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	423	423	28	add	
65	[BUG] [BUGGY] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); [FE] AssertionError [CONTEXT] } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [BUGGY] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); [BUGGY] final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	424	424	28	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } catch (TooManyEvaluationsException e) { break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); [BUGGY] [BUGGY] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	424	424	28	add	
67	[BUG] [BUGGY] final RealMatrix zmean = bestArz.multiply(weights); [FE] AssertionError [CONTEXT] break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); [BUGGY] final RealMatrix zmean = bestArz.multiply(weights); [BUGGY] final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	425	425	28	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] break generationLoop; } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); [BUGGY] [BUGGY] final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	425	425	28	add	
69	[BUG] [BUGGY] final boolean hsig = updateEvolutionPaths(zmean, xold); [FE] AssertionError [CONTEXT] } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); [BUGGY] final boolean hsig = updateEvolutionPaths(zmean, xold); [BUGGY] if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	426	426	28	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); [BUGGY] [BUGGY] final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	426	426	28	add	
71	[BUG] [BUGGY] if (diagonalOnly <= 0) { [FE] AssertionError [CONTEXT] }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); [BUGGY] if (diagonalOnly <= 0) { [BUGGY] updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	427	427	28	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  final int[] arindex = sortedIndices(fitness);  final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3) final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu)); xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); [BUGGY] [BUGGY] if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	427	427	28	add	
73	[BUG] [BUGGY] sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [FE] AssertionError [CONTEXT] xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  [BUGGY] sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [BUGGY] final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	433	433	28	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] xmean = bestArx.multiply(weights); final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  [BUGGY] [BUGGY] sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	433	433	28	add	
75	[BUG] [BUGGY] final double bestFitness = fitness[arindex[0]]; [FE] AssertionError [CONTEXT] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [BUGGY] final double bestFitness = fitness[arindex[0]]; [BUGGY] final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	434	434	28	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu)); final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); [BUGGY] [BUGGY] final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	434	434	28	add	
77	[BUG] [BUGGY] final double worstFitness = fitness[arindex[arindex.length - 1]]; [FE] AssertionError [CONTEXT] final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; [BUGGY] final double worstFitness = fitness[arindex[arindex.length - 1]]; [BUGGY] if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	435	435	28	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final RealMatrix zmean = bestArz.multiply(weights); final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; [BUGGY] [BUGGY] final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	435	435	28	add	
79	[BUG] [BUGGY] if (bestValue > bestFitness) { [FE] AssertionError [CONTEXT] final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; [BUGGY] if (bestValue > bestFitness) { [BUGGY] bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	436	436	28	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final boolean hsig = updateEvolutionPaths(zmean, xold); if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; [BUGGY] [BUGGY] if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	436	436	28	add	
81	[BUG] [BUGGY] bestValue = bestFitness; [FE] AssertionError [CONTEXT] if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { [BUGGY] bestValue = bestFitness; [BUGGY] lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	437	437	28	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (diagonalOnly <= 0) { updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { [BUGGY] [BUGGY] bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	437	437	28	add	
83	[BUG] [BUGGY] lastResult = optimum; [FE] AssertionError [CONTEXT] updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; [BUGGY] lastResult = optimum; [BUGGY] optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	438	438	28	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] updateCovariance(hsig, bestArx, arz, arindex, xold); } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; [BUGGY] [BUGGY] lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }  [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	438	438	28	add	
85	[BUG] [BUGGY] optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),   isMinimize ? bestFitness : -bestFitness); [FE] AssertionError [CONTEXT] } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; [BUGGY] optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize ? bestFitness : -bestFitness); [BUGGY] isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { updateCovarianceDiagonalOnly(hsig, bestArz); }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; [BUGGY] [BUGGY] optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),            isMinimize ? bestFitness : -bestFitness); isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	439	440	28	add	
87	[BUG] [BUGGY] if (getConvergenceChecker() != null &&  lastResult != null) { [FE] AssertionError [CONTEXT] }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); [BUGGY] if (getConvergenceChecker() != null &&     lastResult != null) { [BUGGY] lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	441	442	28	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps)); final double bestFitness = fitness[arindex[0]]; final double worstFitness = fitness[arindex[arindex.length - 1]]; if (bestValue > bestFitness) { bestValue = bestFitness; lastResult = optimum; optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)), isMinimize ? bestFitness : -bestFitness); [BUGGY] [BUGGY] if (getConvergenceChecker() != null &&     lastResult != null) { lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	441	442	28	add	
89	[BUG] [BUGGY] if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [FE] AssertionError [CONTEXT] isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   [BUGGY] if (stopFitness != 0) { // only if stopFitness is defined    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { [BUGGY] if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	450	451	28	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] isMinimize ? bestFitness : -bestFitness); if (getConvergenceChecker() != null && lastResult != null) { if (getConvergenceChecker().converged(iterations, optimum, lastResult)) { break generationLoop; } } }   [BUGGY] [BUGGY] if (stopFitness != 0) { // only if stopFitness is defined    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	450	451	28	add	
91	[BUG] [BUGGY] final double[] sqrtDiagC = sqrt(diagC).getColumn(0); [FE] AssertionError [CONTEXT] } } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } [BUGGY] final double[] sqrtDiagC = sqrt(diagC).getColumn(0); [BUGGY] final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	455	455	28	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } [BUGGY] [BUGGY] final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	455	455	28	add	
93	[BUG] [BUGGY] final double[] pcCol = pc.getColumn(0); [FE] AssertionError [CONTEXT] } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); [BUGGY] final double[] pcCol = pc.getColumn(0); [BUGGY] for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	456	456	28	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); [BUGGY] [BUGGY] final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	456	456	28	add	
95	[BUG] [BUGGY] for (int i = 0; i < dimension; i++) { [FE] AssertionError [CONTEXT] }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); [BUGGY] for (int i = 0; i < dimension; i++) { [BUGGY] if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	457	457	28	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); [BUGGY] [BUGGY] for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	457	457	28	add	
97	[BUG] [BUGGY] if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { [FE] AssertionError [CONTEXT]   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { [BUGGY] if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { [BUGGY] break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	458	458	28	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { [BUGGY] [BUGGY] if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	458	458	28	add	
99	[BUG] [BUGGY] break; [FE] AssertionError [CONTEXT]  if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { [BUGGY] break; [BUGGY] } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	459	459	28	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (stopFitness != 0) { // only if stopFitness is defined if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) { break generationLoop; } } final double[] sqrtDiagC = sqrt(diagC).getColumn(0); final double[] pcCol = pc.getColumn(0); for (int i = 0; i < dimension; i++) { if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) { [BUGGY] [BUGGY] break; } if (i >= dimension - 1) { break generationLoop; } } for (int i = 0; i < dimension; i++) { if (sigma * sqrtDiagC[i] > stopTolUpX) { break generationLoop; } } [CLASS] CMAESOptimizer Sigma PopulationSize DoubleIndex FitnessFunction [METHOD] doOptimize [RETURN_TYPE] PointValuePair  [VARIABLES] TooManyEvaluationsException e boolean generateStatistics hsig isActiveCMA isMinimize isRepairMode double[] fitness fitnessHistory guess inputSigma pcCol s sigma sqrtDiagC RealMatrix B BD C D arx arxk arz bestArx bestArz diagC diagD pc ps weights xmean xold zmean double bestFitness bestValue cc ccov1 ccov1Sep ccovmu ccovmuSep chiN cs damps historyBest historyWorst logMu2 mueff normps sigma stopFitness stopTolFun stopTolHistFun stopTolUpX stopTolX value valueRange worstFitness List statisticsDHistory statisticsFitnessHistory statisticsMeanHistory statisticsSigmaHistory FitnessFunction fitfun int[] arindex int checkFeasableCount diagonalOnly dimension historySize i index iterations k lambda maxIterations mu size RandomGenerator random PointValuePair current lastResult optimum  	projects/Math6/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java	0.7126966450997984	459	459	28	add	
